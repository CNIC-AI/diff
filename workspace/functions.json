[
    {
        "filename": "/bolt/include/bolt/Core/BinaryFunction.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/bolt/include/bolt/Core/DebugData.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/bolt/include/bolt/Profile/ProfileYAMLMapping.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/bolt/lib/Core/BinaryFunction.cpp",
        "new_functions": [],
        "functions": [
            "llvm::bolt|BinaryFunction|computeHash"
        ]
    },
    {
        "filename": "/bolt/lib/Core/BinaryFunctionProfile.cpp",
        "new_functions": [],
        "functions": [
            "llvm::bolt|BinaryFunction|mergeProfileDataInto"
        ]
    },
    {
        "filename": "/bolt/lib/Core/DebugData.cpp",
        "new_functions": [],
        "functions": [
            "llvm::bolt|DebugStrOffsetsWriter|finalizeSection"
        ]
    },
    {
        "filename": "/bolt/lib/Core/Exceptions.cpp",
        "new_functions": [],
        "functions": [
            "llvm::bolt|BinaryFunction|parseLSDA"
        ]
    },
    {
        "filename": "/bolt/lib/Core/FunctionLayout.cpp",
        "new_functions": [],
        "functions": [
            "llvm::bolt|FunctionLayout|update"
        ]
    },
    {
        "filename": "/bolt/lib/Passes/IdenticalCodeFolding.cpp",
        "new_functions": [],
        "functions": [
            "llvm::bolt|IdenticalCodeFolding|runOnFunctions"
        ]
    },
    {
        "filename": "/bolt/lib/Passes/IndirectCallPromotion.cpp",
        "new_functions": [],
        "functions": [
            "llvm::bolt|IndirectCallPromotion|runOnFunctions"
        ]
    },
    {
        "filename": "/bolt/lib/Passes/LongJmp.cpp",
        "new_functions": [],
        "functions": [
            "llvm::bolt|LongJmpPass|replaceTargetWithStub"
        ]
    },
    {
        "filename": "/bolt/lib/Passes/ReorderAlgorithm.cpp",
        "new_functions": [],
        "functions": [
            "llvm::bolt|TSPReorderAlgorithm|reorderBasicBlocks"
        ]
    },
    {
        "filename": "/bolt/lib/Passes/SplitFunctions.cpp",
        "new_functions": [],
        "functions": [
            "llvm::bolt|SplitFunctions|runOnFunctions",
            "|SplitCacheDirected|findSplitIndex"
        ]
    },
    {
        "filename": "/bolt/lib/Passes/VeneerElimination.cpp",
        "new_functions": [],
        "functions": [
            "llvm::bolt|VeneerElimination|runOnFunctions"
        ]
    },
    {
        "filename": "/bolt/lib/Profile/StaleProfileMatching.cpp",
        "new_functions": [],
        "functions": [
            "llvm::bolt|BinaryFunction|computeBlockHashes",
            "llvm::bolt|YAMLProfileReader|inferStaleProfile"
        ]
    },
    {
        "filename": "/bolt/lib/Profile/YAMLProfileReader.cpp",
        "new_functions": [],
        "functions": [
            "llvm::bolt|YAMLProfileReader|parseFunctionProfile",
            "llvm::bolt|YAMLProfileReader|readProfile"
        ]
    },
    {
        "filename": "/bolt/lib/Profile/YAMLProfileWriter.cpp",
        "new_functions": [],
        "functions": [
            "llvm::bolt|YAMLProfileWriter|writeProfile"
        ]
    },
    {
        "filename": "/bolt/lib/Rewrite/DWARFRewriter.cpp",
        "new_functions": [],
        "functions": [
            "llvm::bolt|DWARFRewriter|updateDebugInfo"
        ]
    },
    {
        "filename": "/bolt/lib/Rewrite/RewriteInstance.cpp",
        "new_functions": [],
        "functions": [
            "llvm::bolt|RewriteInstance|parseBuildID"
        ]
    },
    {
        "filename": "/bolt/lib/Target/AArch64/AArch64MCPlusBuilder.cpp",
        "new_functions": [],
        "functions": [
            "|AArch64MCPlusBuilder|isRegToRegMove"
        ]
    },
    {
        "filename": "/clang-tools-extra/clang-doc/Mapper.cpp",
        "new_functions": [],
        "functions": [
            "clang::doc|MapASTVisitor|getFile"
        ]
    },
    {
        "filename": "/clang-tools-extra/clang-tidy/ClangTidy.cpp",
        "new_functions": [],
        "functions": [
            "clang::tidy::|ErrorReporter|finish",
            "clang::tidy::|ErrorReporter|reportDiagnostic"
        ]
    },
    {
        "filename": "/clang-tools-extra/clang-tidy/ExpandModularHeadersPPCallbacks.cpp",
        "new_functions": [],
        "functions": [
            "clang::tooling|ExpandModularHeadersPPCallbacks|InclusionDirective"
        ]
    },
    {
        "filename": "/clang-tools-extra/clang-tidy/abseil/StringFindStartswithCheck.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang-tools-extra/clang-tidy/bugprone/UnusedReturnValueCheck.cpp",
        "new_functions": [],
        "functions": [
            "clang::tidy::bugprone|UnusedReturnValueCheck|UnusedReturnValueCheck"
        ]
    },
    {
        "filename": "/clang-tools-extra/clang-tidy/bugprone/UnusedReturnValueCheck.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang-tools-extra/clang-tidy/hicpp/HICPPTidyModule.cpp",
        "new_functions": [],
        "functions": [
            "clang::tidy::hicpp|HICPPModule|addCheckFactories"
        ]
    },
    {
        "filename": "/clang-tools-extra/clang-tidy/misc/IncludeCleanerCheck.cpp",
        "new_functions": [],
        "functions": [
            "clang::tidy::misc|IncludeCleanerCheck|check"
        ]
    },
    {
        "filename": "/clang-tools-extra/clang-tidy/modernize/ModernizeTidyModule.cpp",
        "new_functions": [],
        "functions": [
            "clang::tidy::modernize|ModernizeModule|addCheckFactories"
        ]
    },
    {
        "filename": "/clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp",
        "new_functions": [],
        "functions": [
            "clang::tidy::performance|UnnecessaryCopyInitialization|check",
            "clang::tidy::performance|UnnecessaryCopyInitialization|handleCopyFromLocalVar",
            "clang::tidy::performance|UnnecessaryCopyInitialization|handleCopyFromMethodReturn"
        ]
    },
    {
        "filename": "/clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.cpp",
        "new_functions": [],
        "functions": [
            "clang::tidy::readability|ContainerContainsCheck|check"
        ]
    },
    {
        "filename": "/clang-tools-extra/clang-tidy/readability/FunctionCognitiveComplexityCheck.cpp",
        "new_functions": [],
        "functions": [
            "clang::tidy::readability::|None|operator&",
            "clang::tidy::readability::|None|operator|"
        ]
    },
    {
        "filename": "/clang-tools-extra/clangd/IncludeCleaner.cpp",
        "new_functions": [],
        "functions": [
            "clang::clangd|None|computeIncludeCleanerFindings"
        ]
    },
    {
        "filename": "/clang-tools-extra/clangd/InlayHints.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang-tools-extra/clangd/SemanticHighlighting.cpp",
        "new_functions": [],
        "functions": [
            "clang::clangd::|HighlightingsBuilder|HighlightingsBuilder"
        ]
    },
    {
        "filename": "/clang-tools-extra/clangd/unittests/InlayHintTests.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang-tools-extra/include-cleaner/lib/Analysis.cpp",
        "new_functions": [],
        "functions": [
            "clang::include_cleaner|None|analyze"
        ]
    },
    {
        "filename": "/clang-tools-extra/modularize/ModuleAssistant.cpp",
        "new_functions": [],
        "functions": [
            "None|None|addModuleDescription"
        ]
    },
    {
        "filename": "/clang-tools-extra/pseudo/include/clang-pseudo/Token.h",
        "new_functions": [],
        "functions": [
            "clang::pseudo|Token|flag",
            "clang::pseudo|Token|setFlag"
        ]
    },
    {
        "filename": "/clang-tools-extra/test/clang-tidy/checkers/Inputs/Headers/stddef.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang-tools-extra/test/clang-tidy/checkers/abseil/string-find-startswith.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang-tools-extra/test/clang-tidy/checkers/readability/container-contains.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang-tools-extra/test/clang-tidy/checkers/readability/container-size-empty.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang-tools-extra/test/clang-tidy/infrastructure/clang-tidy-run-with-database.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/AST/Expr.h",
        "new_functions": [],
        "functions": [
            "clang|AtomicExpr|getVal2",
            "clang|AtomicExpr|isCmpXChg"
        ]
    },
    {
        "filename": "/clang/include/clang/AST/Type.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Analysis/FlowSensitive/DataflowAnalysis.h",
        "new_functions": [],
        "functions": [
            "clang::dataflow|None|diagnoseFunction"
        ]
    },
    {
        "filename": "/clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Analysis/FlowSensitive/RecordOps.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Analysis/FlowSensitive/StorageLocation.h",
        "new_functions": [],
        "functions": [
            "clang::dataflow|RecordStorageLocation|RecordStorageLocation"
        ]
    },
    {
        "filename": "/clang/include/clang/Basic/CodeGenOptions.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Basic/Cuda.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Basic/DirectoryEntry.h",
        "new_functions": [
            "clang|OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr|OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr",
            "clang|OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr|operator const clang::DirectoryEntry *",
            "clang|OptionalDirectoryEntryRefDegradesToDirectoryEntryPtr|operator="
        ],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Basic/FileEntry.h",
        "new_functions": [
            "clang|OptionalFileEntryRefDegradesToFileEntryPtr|OptionalFileEntryRefDegradesToFileEntryPtr",
            "clang|OptionalFileEntryRefDegradesToFileEntryPtr|operator const clang::FileEntry *",
            "clang|OptionalFileEntryRefDegradesToFileEntryPtr|operator="
        ],
        "functions": [
            "clang|FileEntry|getName"
        ]
    },
    {
        "filename": "/clang/include/clang/Basic/LangOptions.h",
        "new_functions": [],
        "functions": [
            "clang|FPOptions|FPOptions"
        ]
    },
    {
        "filename": "/clang/include/clang/Basic/Module.h",
        "new_functions": [],
        "functions": [
            "clang|Module|getASTFile"
        ]
    },
    {
        "filename": "/clang/include/clang/Basic/OpenACCKinds.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Basic/SourceManager.h",
        "new_functions": [],
        "functions": [
            "clang|SourceManager|getFileEntryForID",
            "clang|SourceManager|getFileEntryForSLocEntry"
        ]
    },
    {
        "filename": "/clang/include/clang/Basic/SyncScope.h",
        "new_functions": [],
        "functions": [
            "clang|AtomicScopeModel|create",
            "clang|None|getAsString"
        ]
    },
    {
        "filename": "/clang/include/clang/Basic/TargetInfo.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Driver/Multilib.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Format/Format.h",
        "new_functions": [],
        "functions": [
            "clang::format|FormatStyle|operator=="
        ]
    },
    {
        "filename": "/clang/include/clang/Frontend/FrontendActions.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/IndexSerialization/SerializablePathCollection.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Lex/HeaderSearch.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Lex/ModuleMap.h",
        "new_functions": [],
        "functions": [
            "clang|ModuleMap|getBuiltinDir"
        ]
    },
    {
        "filename": "/clang/include/clang/Lex/PPCallbacks.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Lex/PreprocessorLexer.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Lex/PreprocessorOptions.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Parse/Parser.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Sema/ExternalSemaSource.h",
        "new_functions": [
            "clang|ExternalSemaSource|ReadPendingInstantiationsOfConstexprEntity"
        ],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Sema/HLSLExternalSemaSource.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Sema/MultiplexExternalSemaSource.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Sema/Sema.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Serialization/ASTBitCodes.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Serialization/ASTReader.h",
        "new_functions": [
            "clang|BitsUnpacker|~BitsUnpacker"
        ],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/Serialization/ModuleFile.h",
        "new_functions": [],
        "functions": [
            "clang::serialization|InputFile|getFile",
            "clang::serialization|ModuleFile|ModuleFile"
        ]
    },
    {
        "filename": "/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/AST/Decl.cpp",
        "new_functions": [],
        "functions": [
            "clang|FunctionDecl|setFunctionTemplateSpecialization"
        ]
    },
    {
        "filename": "/clang/lib/AST/Expr.cpp",
        "new_functions": [],
        "functions": [
            "clang|AtomicExpr|getNumSubExprs"
        ]
    },
    {
        "filename": "/clang/lib/AST/ExprConstant.cpp",
        "new_functions": [],
        "functions": [
            "None|None|CheckConstexprFunction",
            "None|None|EvaluateStmt",
            "|LValueExprEvaluator|VisitMaterializeTemporaryExpr",
            "|LValueExprEvaluator|VisitVarDecl"
        ]
    },
    {
        "filename": "/clang/lib/AST/Interp/ByteCodeEmitter.cpp",
        "new_functions": [],
        "functions": [
            "clang::interp|ByteCodeEmitter|compileFunc"
        ]
    },
    {
        "filename": "/clang/lib/AST/Interp/ByteCodeExprGen.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/AST/Interp/Context.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/AST/Interp/IntegralAP.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/AST/Interp/Interp.h",
        "new_functions": [],
        "functions": [
            "clang::interp|None|ArrayDecay",
            "clang::interp|None|CastFloatingIntegral"
        ]
    },
    {
        "filename": "/clang/lib/AST/Interp/InterpBuiltin.cpp",
        "new_functions": [],
        "functions": [
            "clang::interp|None|InterpretBuiltin"
        ]
    },
    {
        "filename": "/clang/lib/AST/Interp/InterpFrame.cpp",
        "new_functions": [],
        "functions": [
            "clang::interp|InterpFrame|getRange",
            "clang::interp|InterpFrame|getSource"
        ]
    },
    {
        "filename": "/clang/lib/AST/MicrosoftMangle.cpp",
        "new_functions": [],
        "functions": [
            "|MicrosoftMangleContextImpl|mangleCXXRTTICompleteObjectLocator"
        ]
    },
    {
        "filename": "/clang/lib/AST/RecordLayoutBuilder.cpp",
        "new_functions": [],
        "functions": [
            "|MicrosoftRecordLayoutBuilder|layoutNonVirtualBase"
        ]
    },
    {
        "filename": "/clang/lib/AST/StmtPrinter.cpp",
        "new_functions": [],
        "functions": [
            "|StmtPrinter|VisitAtomicExpr"
        ]
    },
    {
        "filename": "/clang/lib/Analysis/FlowSensitive/DataflowAnalysisContext.cpp",
        "new_functions": [],
        "functions": [
            "clang::dataflow|DataflowAnalysisContext|createStorageLocation"
        ]
    },
    {
        "filename": "/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp",
        "new_functions": [
            "clang::dataflow|Environment|getThisPointeeStorageLocation"
        ],
        "functions": [
            "clang::dataflow|Environment|Environment",
            "clang::dataflow|Environment|createValueUnlessSelfReferential",
            "clang::dataflow|None|getMemberForAccessor"
        ]
    },
    {
        "filename": "/clang/lib/Analysis/FlowSensitive/HTMLLogger.cpp",
        "new_functions": [],
        "functions": [
            "clang::dataflow::|HTMLLogger|writeCode",
            "clang::dataflow::|ModelDumper|dump"
        ]
    },
    {
        "filename": "/clang/lib/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.cpp",
        "new_functions": [
            "clang::dataflow::|None|getValueBehindPossiblePointer",
            "clang::dataflow::|None|hasAnyOptionalType",
            "clang::dataflow::|None|initializeOptionalReference",
            "clang::dataflow::|None|isEmptyOptional",
            "clang::dataflow::|None|isNonEmptyOptional",
            "clang::dataflow::|None|isNulloptConstructor",
            "clang::dataflow::|None|maybeInitializeOptionalValueMember",
            "clang::dataflow|UncheckedOptionalAccessModel|compare",
            "clang::dataflow|UncheckedOptionalAccessModel|merge",
            "clang::dataflow|UncheckedOptionalAccessModel|widen"
        ],
        "functions": [
            "clang::dataflow::|None|buildTransferMatchSwitch",
            "clang::dataflow::|None|createOptionalValue",
            "clang::dataflow::|None|diagnoseUnwrapCall",
            "clang::dataflow::|None|getHasValue",
            "clang::dataflow::|None|setHasValue",
            "clang::dataflow::|None|transferArrowOpCall",
            "clang::dataflow::|None|transferOptionalAndOptionalCmp",
            "clang::dataflow::|None|transferOptionalAndValueCmp",
            "clang::dataflow::|None|transferOptionalHasValueCall",
            "clang::dataflow::|None|transferSwap",
            "clang::dataflow::|None|transferUnwrapCall",
            "clang::dataflow::|None|transferValueOrImpl",
            "clang::dataflow::|None|valueOrConversionHasValue",
            "clang::dataflow|UncheckedOptionalAccessModel|UncheckedOptionalAccessModel"
        ]
    },
    {
        "filename": "/clang/lib/Analysis/FlowSensitive/RecordOps.cpp",
        "new_functions": [],
        "functions": [
            "clang::dataflow|None|copyRecord",
            "clang::dataflow|None|recordsEqual"
        ]
    },
    {
        "filename": "/clang/lib/Analysis/FlowSensitive/Transfer.cpp",
        "new_functions": [],
        "functions": [
            "clang::dataflow::|TransferVisitor|VisitInitListExpr"
        ]
    },
    {
        "filename": "/clang/lib/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/Analysis/ThreadSafety.cpp",
        "new_functions": [],
        "functions": [
            "|BuildLockset|VisitDeclStmt",
            "|BuildLockset|VisitMaterializeTemporaryExpr",
            "|BuildLockset|handleCall",
            "|ThreadSafetyAnalyzer|runAnalysis"
        ]
    },
    {
        "filename": "/clang/lib/Analysis/UninitializedValues.cpp",
        "new_functions": [],
        "functions": [
            "None|None|isTrackedVar"
        ]
    },
    {
        "filename": "/clang/lib/Analysis/UnsafeBufferUsage.cpp",
        "new_functions": [],
        "functions": [
            "None|None|getSourceRangeToTokenEnd",
            "|ULCArraySubscriptGadget|getFixits"
        ]
    },
    {
        "filename": "/clang/lib/Basic/CodeGenOptions.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/Basic/Cuda.cpp",
        "new_functions": [],
        "functions": [
            "clang|None|MinVersionForCudaArch"
        ]
    },
    {
        "filename": "/clang/lib/Basic/Module.cpp",
        "new_functions": [],
        "functions": [
            "None|None|isPlatformEnvironment"
        ]
    },
    {
        "filename": "/clang/lib/Basic/Targets/AArch64.cpp",
        "new_functions": [],
        "functions": [
            "clang::targets|AArch64TargetInfo|getTargetDefines"
        ]
    },
    {
        "filename": "/clang/lib/Basic/Targets/AMDGPU.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/Basic/Targets/AMDGPU.h",
        "new_functions": [],
        "functions": [
            "clang::targets|AMDGPUTargetInfo|getConstantAddressSpace",
            "clang::targets|AMDGPUTargetInfo|getDWARFAddressSpace",
            "clang::targets|AMDGPUTargetInfo|getPointerWidthV",
            "clang::targets|AMDGPUTargetInfo|getVtblPtrAddressSpace"
        ]
    },
    {
        "filename": "/clang/lib/Basic/Targets/NVPTX.cpp",
        "new_functions": [],
        "functions": [
            "clang::targets|NVPTXTargetInfo|getTargetDefines"
        ]
    },
    {
        "filename": "/clang/lib/Basic/Targets/OSTargets.cpp",
        "new_functions": [],
        "functions": [
            "clang::targets|None|addVisualCDefines"
        ]
    },
    {
        "filename": "/clang/lib/Basic/Targets/RISCV.cpp",
        "new_functions": [],
        "functions": [
            "clang::targets|RISCVTargetInfo|getTargetDefines",
            "clang::targets|RISCVTargetInfo|handleTargetFeatures",
            "clang::targets|RISCVTargetInfo|hasFeature",
            "clang::targets|RISCVTargetInfo|initFeatureMap"
        ]
    },
    {
        "filename": "/clang/lib/Basic/Targets/SystemZ.h",
        "new_functions": [],
        "functions": [
            "clang::targets|SystemZTargetInfo|SystemZTargetInfo"
        ]
    },
    {
        "filename": "/clang/lib/Basic/Targets/X86.cpp",
        "new_functions": [],
        "functions": [
            "clang::targets|X86TargetInfo|getTargetDefines",
            "clang::targets|X86TargetInfo|handleTargetFeatures",
            "clang::targets|X86TargetInfo|hasFeature",
            "clang::targets|X86TargetInfo|isValidFeatureName"
        ]
    },
    {
        "filename": "/clang/lib/Basic/Targets/X86.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/CodeGen/BackendUtil.cpp",
        "new_functions": [],
        "functions": [
            "|EmitAssemblyHelper|RunOptimizationPipeline"
        ]
    },
    {
        "filename": "/clang/lib/CodeGen/CGAtomic.cpp",
        "new_functions": [],
        "functions": [
            "None|None|EmitPostAtomicMinMax",
            "None|None|emitAtomicCmpXchg",
            "clang::CodeGen|CodeGenFunction|EmitAtomicExpr",
            "|AtomicInfo|EmitAtomicCompareExchangeOp"
        ]
    },
    {
        "filename": "/clang/lib/CodeGen/CGBuilder.h",
        "new_functions": [],
        "functions": [
            "clang::CodeGen|CGBuilderTy|CreateAtomicCmpXchg",
            "clang::CodeGen|CGBuilderTy|CreateAtomicRMW"
        ]
    },
    {
        "filename": "/clang/lib/CodeGen/CGBuiltin.cpp",
        "new_functions": [],
        "functions": [
            "None|None|CheckAtomicAlignment",
            "None|None|EmitAtomicCmpXchg128ForMSIntrin",
            "None|None|EmitAtomicCmpXchgForMSIntrin",
            "None|None|EmitAtomicDecrementValue",
            "None|None|EmitAtomicIncrementValue",
            "None|None|EmitBinaryAtomicPost",
            "None|None|EmitBitTestIntrinsic",
            "None|None|MakeAtomicCmpXchgValue",
            "None|None|MakeBinaryAtomicValue",
            "clang::CodeGen|CodeGenFunction|EmitAArch64BuiltinExpr",
            "clang::CodeGen|CodeGenFunction|EmitAArch64SVEBuiltinExpr",
            "clang::CodeGen|CodeGenFunction|EmitAMDGPUBuiltinExpr",
            "clang::CodeGen|CodeGenFunction|EmitBuiltinExpr",
            "clang::CodeGen|CodeGenFunction|EmitNVPTXBuiltinExpr",
            "clang::CodeGen|CodeGenFunction|EmitSystemZBuiltinExpr"
        ]
    },
    {
        "filename": "/clang/lib/CodeGen/CGCUDANV.cpp",
        "new_functions": [],
        "functions": [
            "|CGNVCUDARuntime|createOffloadingEntries"
        ]
    },
    {
        "filename": "/clang/lib/CodeGen/CGCUDARuntime.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/CodeGen/CGCall.cpp",
        "new_functions": [],
        "functions": [
            "clang::CodeGen|CodeGenFunction|EmitCall"
        ]
    },
    {
        "filename": "/clang/lib/CodeGen/CGCall.h",
        "new_functions": [],
        "functions": [
            "clang::CodeGen|None|operator&",
            "clang::CodeGen|None|operator|"
        ]
    },
    {
        "filename": "/clang/lib/CodeGen/CGDebugInfo.cpp",
        "new_functions": [
            "None|None|evaluateConstantInitializer"
        ],
        "functions": [
            "clang::CodeGen|CGDebugInfo|CreateCompileUnit",
            "clang::CodeGen|CGDebugInfo|CreateRecordStaticField",
            "clang::CodeGen|CGDebugInfo|EmitGlobalVariable",
            "clang::CodeGen|CGDebugInfo|finalize"
        ]
    },
    {
        "filename": "/clang/lib/CodeGen/CGDebugInfo.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/CodeGen/CGExpr.cpp",
        "new_functions": [],
        "functions": [
            "None|None|emitArraySubscriptGEP",
            "clang::CodeGen|CodeGenFunction|EmitLValueForField"
        ]
    },
    {
        "filename": "/clang/lib/CodeGen/CGExprComplex.cpp",
        "new_functions": [],
        "functions": [
            "|ComplexExprEmitter|EmitBinDiv",
            "|ComplexExprEmitter|EmitBinMul"
        ]
    },
    {
        "filename": "/clang/lib/CodeGen/CGExprScalar.cpp",
        "new_functions": [],
        "functions": [
            "|ScalarExprEmitter|EmitCompoundAssignLValue",
            "|ScalarExprEmitter|EmitScalarPrePostIncDec"
        ]
    },
    {
        "filename": "/clang/lib/CodeGen/CGHLSLRuntime.cpp",
        "new_functions": [],
        "functions": [
            "clang::CodeGen|CGHLSLRuntime|addBufferResourceAnnotation",
            "clang::CodeGen|CGHLSLRuntime|annotateHLSLResource",
            "clang::CodeGen|CGHLSLRuntime|finishCodeGen"
        ]
    },
    {
        "filename": "/clang/lib/CodeGen/CGHLSLRuntime.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/CodeGen/CGOpenMPRuntime.cpp",
        "new_functions": [],
        "functions": [
            "|MappableExprsHandler|generateInfoForComponentList"
        ]
    },
    {
        "filename": "/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp",
        "new_functions": [],
        "functions": [
            "clang::CodeGen|CGOpenMPRuntimeGPU|emitOutlinedFunctionCall",
            "clang::CodeGen|CGOpenMPRuntimeGPU|getParameterAddress",
            "clang::CodeGen|CGOpenMPRuntimeGPU|processRequiresDirective"
        ]
    },
    {
        "filename": "/clang/lib/CodeGen/CGStmtOpenMP.cpp",
        "new_functions": [],
        "functions": [
            "None|None|emitOMPAtomicRMW",
            "None|None|emitOMPSimdRegion"
        ]
    },
    {
        "filename": "/clang/lib/CodeGen/CodeGenModule.cpp",
        "new_functions": [],
        "functions": [
            "clang::CodeGen|CodeGenModule|GetAddrOfGlobalTemporary",
            "clang::CodeGen|CodeGenModule|GetOrCreateMultiVersionResolver",
            "clang::CodeGen|CodeGenModule|emitMultiVersionFunctions"
        ]
    },
    {
        "filename": "/clang/lib/CodeGen/CodeGenTBAA.cpp",
        "new_functions": [],
        "functions": [
            "clang::CodeGen|CodeGenTBAA|getBaseTypeInfo",
            "clang::CodeGen|CodeGenTBAA|getBaseTypeInfoHelper",
            "clang::CodeGen|CodeGenTBAA|getTypeInfoHelper"
        ]
    },
    {
        "filename": "/clang/lib/CodeGen/Targets/AMDGPU.cpp",
        "new_functions": [],
        "functions": [
            "|AMDGPUTargetCodeGenInfo|getLLVMSyncScopeID"
        ]
    },
    {
        "filename": "/clang/lib/CrossTU/CrossTranslationUnit.cpp",
        "new_functions": [],
        "functions": [
            "clang::cross_tu|ASTLoader|load"
        ]
    },
    {
        "filename": "/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/Driver/Driver.cpp",
        "new_functions": [],
        "functions": [
            "clang::driver|Driver|PrintHelp",
            "clang::driver|Driver|getCrashDiagnosticFile"
        ]
    },
    {
        "filename": "/clang/lib/Driver/Multilib.cpp",
        "new_functions": [],
        "functions": [
            "clang::driver|MultilibSet|parseYaml",
            "clang::driver|MultilibSet|select",
            "clang::driver|Multilib|Multilib",
            "llvm::yaml|MappingTraits|mapping",
            "llvm::yaml|MappingTraits|validate"
        ]
    },
    {
        "filename": "/clang/lib/Driver/ToolChains/Arch/AArch64.cpp",
        "new_functions": [],
        "functions": [
            "clang::driver::tools::aarch64|None|getAArch64TargetCPU",
            "clang::driver::tools::aarch64|None|getAArch64TargetFeatures"
        ]
    },
    {
        "filename": "/clang/lib/Driver/ToolChains/Arch/RISCV.cpp",
        "new_functions": [],
        "functions": [
            "None|None|getRISCFeaturesFromMcpu",
            "clang::driver::tools::riscv|None|getRISCVTargetFeatures"
        ]
    },
    {
        "filename": "/clang/lib/Driver/ToolChains/Arch/X86.cpp",
        "new_functions": [],
        "functions": [
            "clang::driver::tools::x86|None|getX86TargetFeatures"
        ]
    },
    {
        "filename": "/clang/lib/Driver/ToolChains/Clang.cpp",
        "new_functions": [
            "None|None|getFramePointerKind",
            "None|None|mustUseNonLeafFramePointerForTarget",
            "None|None|useFramePointerForTargetByDefault"
        ],
        "functions": [
            "None|None|RenderFloatingPointOptions",
            "clang::driver::tools|Clang|AddPreprocessingOptions",
            "clang::driver::tools|Clang|ConstructJob"
        ]
    },
    {
        "filename": "/clang/lib/Driver/ToolChains/CommonArgs.cpp",
        "new_functions": [],
        "functions": [
            "clang::driver::tools|None|addFortranRuntimeLibs",
            "clang::driver::tools|None|addMachineOutlinerArgs"
        ]
    },
    {
        "filename": "/clang/lib/Driver/ToolChains/CommonArgs.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/Driver/ToolChains/Cuda.cpp",
        "new_functions": [],
        "functions": [
            "clang::driver::tools::NVPTX|None|getNVPTXTargetFeatures",
            "|None|getCudaVersion"
        ]
    },
    {
        "filename": "/clang/lib/Driver/ToolChains/Darwin.cpp",
        "new_functions": [],
        "functions": [
            "clang::driver::toolchains|MachO|AddLinkRuntimeLib"
        ]
    },
    {
        "filename": "/clang/lib/Driver/ToolChains/Flang.cpp",
        "new_functions": [],
        "functions": [
            "None|None|processVSRuntimeLibrary",
            "clang::driver::tools|Flang|ConstructJob",
            "clang::driver::tools|Flang|addCodegenOptions",
            "clang::driver::tools|Flang|addTargetOptions"
        ]
    },
    {
        "filename": "/clang/lib/Driver/ToolChains/HIPUtility.cpp",
        "new_functions": [],
        "functions": [
            "clang::driver::tools::HIP|None|constructGenerateObjFileFromHIPFatBinary"
        ]
    },
    {
        "filename": "/clang/lib/Driver/ToolChains/MSVC.cpp",
        "new_functions": [],
        "functions": [
            "clang::driver::toolchains|MSVCToolChain|computeMSVCVersion"
        ]
    },
    {
        "filename": "/clang/lib/Driver/ToolChains/WebAssembly.cpp",
        "new_functions": [],
        "functions": [
            "clang::driver::tools::wasm|Linker|ConstructJob"
        ]
    },
    {
        "filename": "/clang/lib/ExtractAPI/ExtractAPIConsumer.cpp",
        "new_functions": [],
        "functions": [
            "|LocationFileChecker|operator()",
            "|None|getRelativeIncludeName"
        ]
    },
    {
        "filename": "/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp",
        "new_functions": [],
        "functions": [
            "|None|getLanguageName"
        ]
    },
    {
        "filename": "/clang/lib/Format/ContinuationIndenter.cpp",
        "new_functions": [],
        "functions": [
            "clang::format|ContinuationIndenter|getNewLineColumn"
        ]
    },
    {
        "filename": "/clang/lib/Format/Format.cpp",
        "new_functions": [],
        "functions": [
            "clang::format::internal|None|reformat",
            "clang::format|None|getStyle",
            "llvm::yaml|MappingTraits|mapping"
        ]
    },
    {
        "filename": "/clang/lib/Format/TokenAnnotator.cpp",
        "new_functions": [],
        "functions": [
            "clang::format|TokenAnnotator|spaceRequiredBefore"
        ]
    },
    {
        "filename": "/clang/lib/Format/TokenAnnotator.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/Format/UnwrappedLineFormatter.cpp",
        "new_functions": [],
        "functions": [
            "clang::format::|LineJoiner|tryFitMultipleLinesInOne",
            "clang::format::|LineJoiner|tryMergeSimpleBlock"
        ]
    },
    {
        "filename": "/clang/lib/Format/UnwrappedLineParser.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/Frontend/CompilerInstance.cpp",
        "new_functions": [],
        "functions": [
            "clang|CompilerInstance|loadGlobalModuleIndex"
        ]
    },
    {
        "filename": "/clang/lib/Frontend/CompilerInvocation.cpp",
        "new_functions": [],
        "functions": [
            "None|None|GeneratePreprocessorArgs",
            "None|None|ParsePreprocessorArgs",
            "clang|CompilerInvocation|ParseCodeGenArgs",
            "clang|CompilerInvocation|ParseLangArgs",
            "clang|CompilerInvocation|getModuleHash",
            "clang|CompilerInvocation|resetNonModularOptions"
        ]
    },
    {
        "filename": "/clang/lib/Frontend/FrontendActions.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/Frontend/InitPreprocessor.cpp",
        "new_functions": [],
        "functions": [
            "None|None|InitializePredefinedMacros"
        ]
    },
    {
        "filename": "/clang/lib/Headers/bmiintrin.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/Headers/opencl-c-base.h",
        "new_functions": [
            "None|None|sqrt"
        ],
        "functions": []
    },
    {
        "filename": "/clang/lib/Headers/opencl-c.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/Headers/vecintrin.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/IndexSerialization/SerializablePathCollection.cpp",
        "new_functions": [],
        "functions": [
            "clang::index|SerializablePathCollection|tryStoreFilePath"
        ]
    },
    {
        "filename": "/clang/lib/Lex/HeaderSearch.cpp",
        "new_functions": [],
        "functions": [
            "clang|HeaderSearch|LookupFile",
            "clang|HeaderSearch|SetSearchPaths"
        ]
    },
    {
        "filename": "/clang/lib/Lex/InitHeaderSearch.cpp",
        "new_functions": [],
        "functions": [
            "|InitHeaderSearch|Realize"
        ]
    },
    {
        "filename": "/clang/lib/Lex/ModuleMap.cpp",
        "new_functions": [],
        "functions": [
            "clang|ModuleMapParser|diagnosePrivateModules",
            "clang|ModuleMap|inferFrameworkModule"
        ]
    },
    {
        "filename": "/clang/lib/Lex/PPDirectives.cpp",
        "new_functions": [],
        "functions": [
            "clang|Preprocessor|getIncludeNextStart"
        ]
    },
    {
        "filename": "/clang/lib/Lex/Pragma.cpp",
        "new_functions": [],
        "functions": [
            "clang|Preprocessor|HandlePragmaDependency"
        ]
    },
    {
        "filename": "/clang/lib/Lex/PreprocessorLexer.cpp",
        "new_functions": [],
        "functions": [
            "clang|PreprocessorLexer|getFileEntry"
        ]
    },
    {
        "filename": "/clang/lib/Parse/ParseExprCXX.cpp",
        "new_functions": [],
        "functions": [
            "clang|Parser|ParseLambdaExpressionAfterIntroducer"
        ]
    },
    {
        "filename": "/clang/lib/Parse/ParseOpenACC.cpp",
        "new_functions": [
            "clang|Parser|ParseOpenACCRoutineName"
        ],
        "functions": [
            "clang|Parser|ParseOpenACCDirective",
            "|None|ParseOpenACCAtomicKind",
            "|None|ParseOpenACCDirectiveKind",
            "|None|ParseOpenACCEnterExitDataDirective",
            "|None|getOpenACCAtomicKind",
            "|None|getOpenACCDirectiveKind",
            "|None|isOpenACCDirectiveKind"
        ]
    },
    {
        "filename": "/clang/lib/Parse/ParseOpenMP.cpp",
        "new_functions": [],
        "functions": [
            "clang|Parser|ParseOpenMPDeclarativeOrExecutableDirective"
        ]
    },
    {
        "filename": "/clang/lib/Parse/ParsePragma.cpp",
        "new_functions": [],
        "functions": [
            "|PragmaSTDC_CX_LIMITED_RANGEHandler|HandlePragma"
        ]
    },
    {
        "filename": "/clang/lib/Parse/ParseStmt.cpp",
        "new_functions": [],
        "functions": [
            "clang|Parser|ParseCompoundStatementLeadingPragmas",
            "clang|Parser|ParseStatementOrDeclarationAfterAttributes"
        ]
    },
    {
        "filename": "/clang/lib/Parse/ParseTemplate.cpp",
        "new_functions": [],
        "functions": [
            "clang|Parser|ParseNonTypeTemplateParameter",
            "clang|Parser|ParseTemplateArgument"
        ]
    },
    {
        "filename": "/clang/lib/Parse/Parser.cpp",
        "new_functions": [],
        "functions": [
            "clang|Parser|ParseExternalDeclaration"
        ]
    },
    {
        "filename": "/clang/lib/Rewrite/Rewriter.cpp",
        "new_functions": [],
        "functions": [
            "clang|Rewriter|overwriteChangedFiles"
        ]
    },
    {
        "filename": "/clang/lib/Sema/HLSLExternalSemaSource.cpp",
        "new_functions": [
            "clang|HLSLExternalSemaSource|completeBufferType",
            "clang|HLSLExternalSemaSource|forwardDeclareHLSLTypes"
        ],
        "functions": [
            "clang|HLSLExternalSemaSource|InitializeSema",
            "|BuiltinTypeDeclBuilder|annotateResourceClass"
        ]
    },
    {
        "filename": "/clang/lib/Sema/MultiplexExternalSemaSource.cpp",
        "new_functions": [
            "clang|MultiplexExternalSemaSource|ReadPendingInstantiationsOfConstexprEntity"
        ],
        "functions": []
    },
    {
        "filename": "/clang/lib/Sema/Sema.cpp",
        "new_functions": [],
        "functions": [
            "None|None|checkUndefinedButUsed",
            "clang|Sema|checkTypeSupport"
        ]
    },
    {
        "filename": "/clang/lib/Sema/SemaAttr.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/Sema/SemaCUDA.cpp",
        "new_functions": [],
        "functions": [
            "clang|Sema|IdentifyCUDAPreference"
        ]
    },
    {
        "filename": "/clang/lib/Sema/SemaChecking.cpp",
        "new_functions": [],
        "functions": [
            "None|None|CheckInvalidVLENandLMUL",
            "None|None|SemaBuiltinDumpStruct",
            "None|None|isValidOrderingForOp",
            "clang|Sema|BuildAtomicExpr",
            "clang|Sema|CheckRISCVBuiltinFunctionCall",
            "clang|Sema|CheckSVEBuiltinFunctionCall"
        ]
    },
    {
        "filename": "/clang/lib/Sema/SemaCodeComplete.cpp",
        "new_functions": [],
        "functions": [
            "clang|Sema|CodeCompleteIncludedFile"
        ]
    },
    {
        "filename": "/clang/lib/Sema/SemaDecl.cpp",
        "new_functions": [],
        "functions": [
            "clang|Sema|ActOnFinishFunctionBody",
            "clang|Sema|CheckVariableDeclarationType",
            "clang|Sema|GetNameFromUnqualifiedId"
        ]
    },
    {
        "filename": "/clang/lib/Sema/SemaDeclAttr.cpp",
        "new_functions": [],
        "functions": [
            "None|None|ProcessDeclAttribute"
        ]
    },
    {
        "filename": "/clang/lib/Sema/SemaDeclCXX.cpp",
        "new_functions": [],
        "functions": [
            "None|None|TryNamespaceTypoCorrection",
            "clang|Sema|ActOnFriendFunctionDecl",
            "clang|Sema|CheckDeductionGuideDeclarator"
        ]
    },
    {
        "filename": "/clang/lib/Sema/SemaExpr.cpp",
        "new_functions": [],
        "functions": [
            "clang|Sema|CreateBuiltinArraySubscriptExpr",
            "clang|Sema|MarkFunctionReferenced"
        ]
    },
    {
        "filename": "/clang/lib/Sema/SemaInit.cpp",
        "new_functions": [],
        "functions": [
            "None|None|CheckCXX98CompatAccessibleCopy",
            "None|None|CopyObject",
            "None|None|ResolveConstructorOverload",
            "None|None|TryConstructorInitialization",
            "clang|Sema|DeduceTemplateSpecializationFromInitializer"
        ]
    },
    {
        "filename": "/clang/lib/Sema/SemaLambda.cpp",
        "new_functions": [],
        "functions": [
            "clang|Sema|ActOnLambdaExpr",
            "clang|Sema|ActOnStartOfLambdaDefinition"
        ]
    },
    {
        "filename": "/clang/lib/Sema/SemaLookup.cpp",
        "new_functions": [],
        "functions": [
            "clang|Sema|diagnoseMissingImport"
        ]
    },
    {
        "filename": "/clang/lib/Sema/SemaOverload.cpp",
        "new_functions": [
            "None|None|EvaluateConvertedConstantExpression"
        ],
        "functions": [
            "None|None|CheckConvertedConstantExpression"
        ]
    },
    {
        "filename": "/clang/lib/Sema/SemaRISCVVectorLookup.cpp",
        "new_functions": [],
        "functions": [
            "|RISCVIntrinsicManagerImpl|InitRVVIntrinsic"
        ]
    },
    {
        "filename": "/clang/lib/Sema/SemaStmt.cpp",
        "new_functions": [],
        "functions": [
            "clang|Sema|ActOnFinishSwitchStmt"
        ]
    },
    {
        "filename": "/clang/lib/Sema/SemaStmtAttr.cpp",
        "new_functions": [],
        "functions": [
            "None|None|ProcessStmtAttribute"
        ]
    },
    {
        "filename": "/clang/lib/Sema/SemaTemplate.cpp",
        "new_functions": [],
        "functions": [
            "None|None|CheckNonTypeTemplatePartialSpecializationArgs",
            "None|None|CheckTemplateArgumentAddressOfObjectOrFunction",
            "None|None|CheckTemplateArgumentIsCompatibleWithParameter",
            "None|None|CheckTemplateArgumentPointerToMember",
            "None|None|checkMoreSpecializedThanPrimary",
            "None|None|diagnoseMissingArgument",
            "None|None|isNullPointerValueTemplateArgument",
            "clang|Sema|CheckTemplateArgument",
            "clang|Sema|CheckTemplateArgumentList",
            "clang|Sema|CheckTemplateTypeArgument",
            "clang|Sema|CheckTypenameType",
            "clang|Sema|DiagnoseTemplateParameterShadow",
            "clang|Sema|DiagnoseUninstantiableTemplate",
            "clang|Sema|diagnoseMissingTemplateArguments",
            "|ConstraintRefersToContainingTemplateChecker|CheckIfContainingRecord"
        ]
    },
    {
        "filename": "/clang/lib/Sema/SemaTemplateInstantiate.cpp",
        "new_functions": [],
        "functions": [
            "clang|Sema|PrintInstantiationStack"
        ]
    },
    {
        "filename": "/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp",
        "new_functions": [
            "clang|Sema|PerformPendingInstantiationsOfConstexprFunctions"
        ],
        "functions": []
    },
    {
        "filename": "/clang/lib/Sema/SemaType.cpp",
        "new_functions": [],
        "functions": [
            "None|None|GetDeclSpecTypeForDeclarator"
        ]
    },
    {
        "filename": "/clang/lib/Serialization/ASTReader.cpp",
        "new_functions": [
            "clang|ASTReader|ReadPendingInstantiationsOfConstexprEntity"
        ],
        "functions": [
            "clang|ASTReader|ReadASTBlock",
            "clang|ASTReader|ReadControlBlock",
            "clang|ASTReader|ReadSubmoduleBlock",
            "clang|ASTReader|getInputFile"
        ]
    },
    {
        "filename": "/clang/lib/Serialization/ASTReaderDecl.cpp",
        "new_functions": [],
        "functions": [
            "clang|ASTDeclReader|VisitDecl",
            "clang|ASTDeclReader|VisitFunctionDecl",
            "clang|ASTDeclReader|VisitParmVarDecl",
            "clang|ASTDeclReader|VisitTagDecl"
        ]
    },
    {
        "filename": "/clang/lib/Serialization/ASTReaderStmt.cpp",
        "new_functions": [],
        "functions": [
            "clang|ASTReader|ReadStmtFromStream",
            "clang|ASTStmtReader|VisitCallExpr",
            "clang|ASTStmtReader|VisitExpr",
            "clang|ASTStmtReader|VisitOverloadExpr"
        ]
    },
    {
        "filename": "/clang/lib/Serialization/ASTWriter.cpp",
        "new_functions": [],
        "functions": [
            "clang|ASTWriter|WriteASTCore",
            "clang|ASTWriter|WriteBlockInfoBlock",
            "clang|ASTWriter|WriteControlBlock",
            "clang|ASTWriter|WriteSourceManagerBlock",
            "clang|ASTWriter|collectNonAffectingInputFiles"
        ]
    },
    {
        "filename": "/clang/lib/Serialization/ASTWriterDecl.cpp",
        "new_functions": [],
        "functions": [
            "clang|ASTDeclWriter|VisitDecl",
            "clang|ASTDeclWriter|VisitFunctionDecl",
            "clang|ASTDeclWriter|VisitParmVarDecl",
            "clang|ASTDeclWriter|VisitTagDecl",
            "clang|ASTWriter|WriteDeclAbbrevs"
        ]
    },
    {
        "filename": "/clang/lib/Serialization/ASTWriterStmt.cpp",
        "new_functions": [],
        "functions": [
            "clang|ASTStmtWriter|VisitCallExpr",
            "clang|ASTStmtWriter|VisitExpr",
            "clang|ASTStmtWriter|VisitOverloadExpr"
        ]
    },
    {
        "filename": "/clang/lib/Serialization/GlobalModuleIndex.cpp",
        "new_functions": [],
        "functions": [
            "clang|GlobalModuleIndex|loadedModuleFile"
        ]
    },
    {
        "filename": "/clang/lib/Serialization/ModuleManager.cpp",
        "new_functions": [],
        "functions": [
            "clang::serialization|ModuleManager|addModule",
            "clang::serialization|ModuleManager|lookupByModuleName",
            "clang::serialization|ModuleManager|lookupModuleFile"
        ]
    },
    {
        "filename": "/clang/lib/StaticAnalyzer/Checkers/ArrayBoundCheckerV2.cpp",
        "new_functions": [
            "None|None|getExceedsMsg",
            "None|None|getPrecedesMsg",
            "None|None|getTaintMsg",
            "|ArrayBoundCheckerV2|checkLocation"
        ],
        "functions": [
            "None|None|compareValueToThreshold",
            "|ArrayBoundCheckerV2|reportOOB"
        ]
    },
    {
        "filename": "/clang/lib/StaticAnalyzer/Checkers/BitwiseShiftChecker.cpp",
        "new_functions": [],
        "functions": [
            "None|BitwiseShiftChecker|checkPreStmt",
            "|BitwiseShiftValidator|checkOvershift"
        ]
    },
    {
        "filename": "/clang/lib/StaticAnalyzer/Checkers/EnumCastOutOfRangeChecker.cpp",
        "new_functions": [],
        "functions": [
            "|EnumCastOutOfRangeChecker|reportWarning"
        ]
    },
    {
        "filename": "/clang/lib/StaticAnalyzer/Checkers/StreamChecker.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp",
        "new_functions": [],
        "functions": [
            "|SimpleSValBuilder|getConstValue"
        ]
    },
    {
        "filename": "/clang/lib/Tooling/DependencyScanning/ModuleDepCollector.cpp",
        "new_functions": [],
        "functions": [
            "clang::tooling::dependencies|ModuleDepCollectorPP|handleTopLevelModule"
        ]
    },
    {
        "filename": "/clang/test/AST/Interp/arrays.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/AST/Interp/builtin-functions.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/AST/Interp/cxx23.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/AST/Interp/floats.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/AST/Interp/intap.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/Analysis/enum-cast-out-of-range.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/Analysis/out-of-bounds-new.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CXX/basic/basic.lookup/basic.lookup.argdep/p5-ex2.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CXX/class.access/class.friend/p6.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CXX/drs/dr0xx.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CXX/drs/dr10xx.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CXX/drs/dr11xx.cpp",
        "new_functions": [],
        "functions": [
            "dr1111::example1|None|foo"
        ]
    },
    {
        "filename": "/clang/test/CXX/drs/dr12xx.cpp",
        "new_functions": [],
        "functions": [
            "dr1223|None|f"
        ]
    },
    {
        "filename": "/clang/test/CXX/drs/dr13xx.cpp",
        "new_functions": [],
        "functions": [
            "dr1346|None|init_capture"
        ]
    },
    {
        "filename": "/clang/test/CXX/drs/dr14xx.cpp",
        "new_functions": [],
        "functions": [
            "dr1460|None|check"
        ]
    },
    {
        "filename": "/clang/test/CXX/drs/dr15xx.cpp",
        "new_functions": [],
        "functions": [
            "dr1512|None|test"
        ]
    },
    {
        "filename": "/clang/test/CXX/drs/dr16xx.cpp",
        "new_functions": [],
        "functions": [
            "dr1653|None|f"
        ]
    },
    {
        "filename": "/clang/test/CXX/drs/dr17xx.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CXX/drs/dr18xx.cpp",
        "new_functions": [],
        "functions": [
            "None|None|dr1891"
        ]
    },
    {
        "filename": "/clang/test/CXX/drs/dr19xx.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CXX/drs/dr1xx.cpp",
        "new_functions": [],
        "functions": [
            "dr145|None|f"
        ]
    },
    {
        "filename": "/clang/test/CXX/drs/dr20xx.cpp",
        "new_functions": [],
        "functions": [
            "dr2026|None|f",
            "dr2083::dr_example_1|None|main",
            "dr2083|B|f",
            "dr2083|None|discarded_lval",
            "dr2083|None|ref_to_non_const"
        ]
    },
    {
        "filename": "/clang/test/CXX/drs/dr21xx.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CXX/drs/dr22xx.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CXX/drs/dr2390.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CXX/drs/dr23xx.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CXX/drs/dr25xx.cpp",
        "new_functions": [],
        "functions": [
            "dr2518|None|f"
        ]
    },
    {
        "filename": "/clang/test/CXX/drs/dr26xx.cpp",
        "new_functions": [
            "dr2628|None|f",
            "dr2631|None|f",
            "dr2631|None|g",
            "dr2631|None|k",
            "dr2631|None|test",
            "dr2635|None|TemplUse",
            "dr2635|None|use",
            "dr2672|None|m"
        ],
        "functions": []
    },
    {
        "filename": "/clang/test/CXX/drs/dr27xx.cpp",
        "new_functions": [
            "dr2789|None|test"
        ],
        "functions": []
    },
    {
        "filename": "/clang/test/CXX/drs/dr2xx.cpp",
        "new_functions": [],
        "functions": [
            "dr222|None|f",
            "dr294|None|main"
        ]
    },
    {
        "filename": "/clang/test/CXX/drs/dr3xx.cpp",
        "new_functions": [],
        "functions": [
            "dr330|None|f",
            "dr387::old|None|g",
            "dr396|None|f"
        ]
    },
    {
        "filename": "/clang/test/CXX/drs/dr412.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CXX/drs/dr4xx.cpp",
        "new_functions": [],
        "functions": [
            "dr430|None|f",
            "dr446|None|f",
            "dr458|None|g",
            "dr458|None|h",
            "dr479|None|f",
            "dr488|None|g"
        ]
    },
    {
        "filename": "/clang/test/CXX/drs/dr5xx.cpp",
        "new_functions": [],
        "functions": [
            "dr568|None|jump"
        ]
    },
    {
        "filename": "/clang/test/CXX/drs/dr6xx.cpp",
        "new_functions": [],
        "functions": [
            "dr613|A|f",
            "dr629|None|f",
            "dr637|None|f",
            "dr641::std_example|None|test",
            "dr687|None|f"
        ]
    },
    {
        "filename": "/clang/test/CXX/drs/dr7xx.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CXX/drs/dr8xx.cpp",
        "new_functions": [
            "dr873|None|f"
        ],
        "functions": [
            "dr873|None|g"
        ]
    },
    {
        "filename": "/clang/test/CXX/drs/dr9xx.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CXX/module/module.interface/p2.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CXX/temp/temp.decls/temp.friend/p1.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CodeGenCXX/RelativeVTablesABI/member-function-pointer.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CodeGenCXX/attr-target-clones.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CodeGenCXX/debug-info-class.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/CodeGenCXX/debug-info-static-member.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/Driver/netbsd.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/Frontend/sarif-diagnostics.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/Index/initializer-memory.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/Layout/ms-x86-declspec-empty_bases.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/Modules/submodules-merge-defs.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/OpenMP/distribute_parallel_for_simd_private_codegen.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/OpenMP/distribute_simd_private_codegen.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/OpenMP/parallel_reduction_codegen.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/OpenMP/target_data_use_device_addr_codegen.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/OpenMP/target_teams_distribute_parallel_for_simd_private_codegen.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/OpenMP/target_teams_distribute_simd_private_codegen.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/OpenMP/teams_distribute_parallel_for_simd_private_codegen.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/OpenMP/teams_distribute_simd_private_codegen.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/Parser/cxx2b-lambdas.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/ParserOpenACC/unimplemented.cpp",
        "new_functions": [],
        "functions": [
            "None|None|func"
        ]
    },
    {
        "filename": "/clang/test/Sema/aarch64-sme2-intrinsics/acle_sme2_imm.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/Sema/aarch64-sve2p1-intrinsics/acle_sve2p1_imm.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_svbfmul_lane"
        ]
    },
    {
        "filename": "/clang/test/Sema/builtin-expect-with-probability.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/SemaCXX/builtin-dump-struct.cpp",
        "new_functions": [],
        "functions": [
            "None|None|errors"
        ]
    },
    {
        "filename": "/clang/test/SemaCXX/coro-lifetimebound.cpp",
        "new_functions": [],
        "functions": [
            "None|None|lambdas"
        ]
    },
    {
        "filename": "/clang/test/SemaCXX/coro-return-type-and-wrapper.cpp",
        "new_functions": [],
        "functions": [
            "lambdas|None|foo"
        ]
    },
    {
        "filename": "/clang/test/SemaCXX/cxx1z-copy-omission.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/SemaCXX/friend.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/SemaCXX/warn-thread-safety-analysis.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/test/SemaTemplate/temp_arg_nontype_cxx20.cpp",
        "new_functions": [],
        "functions": [
            "ConvertedConstant|None|f"
        ]
    },
    {
        "filename": "/clang/tools/clang-format/ClangFormat.cpp",
        "new_functions": [],
        "functions": [
            "None|None|dumpConfig",
            "None|None|main",
            "clang::format|None|format"
        ]
    },
    {
        "filename": "/clang/tools/clang-fuzzer/handle-llvm/handle_llvm.cpp",
        "new_functions": [],
        "functions": [
            "None|None|CreateAndRunJITFunc"
        ]
    },
    {
        "filename": "/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp",
        "new_functions": [],
        "functions": [
            "::generic|None|clang"
        ]
    },
    {
        "filename": "/clang/tools/clang-linker-wrapper/OffloadWrapper.cpp",
        "new_functions": [],
        "functions": [
            "|None|createRegisterGlobalsFunction"
        ]
    },
    {
        "filename": "/clang/tools/libclang/CXIndexDataConsumer.cpp",
        "new_functions": [],
        "functions": [
            "clang::cxindex|CXIndexDataConsumer|getIndexFile",
            "clang::cxindex|CXIndexDataConsumer|translateLoc"
        ]
    },
    {
        "filename": "/clang/tools/libclang/CXIndexDataConsumer.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/unittests/Analysis/FlowSensitive/DataflowEnvironmentTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/unittests/Analysis/FlowSensitive/RecordOpsTest.cpp",
        "new_functions": [],
        "functions": [
            "clang::dataflow::test::|None|TEST",
            "clang::dataflow::test::|None|runDataflow"
        ]
    },
    {
        "filename": "/clang/unittests/Analysis/FlowSensitive/TestingSupport.cpp",
        "new_functions": [],
        "functions": [
            "clang::dataflow::test|None|checkDataflowWithNoopAnalysis"
        ]
    },
    {
        "filename": "/clang/unittests/Analysis/FlowSensitive/TestingSupport.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/unittests/Analysis/FlowSensitive/TypeErasedDataflowAnalysisTest.cpp",
        "new_functions": [
            "|SpecialBoolAnalysis|compare",
            "|SpecialBoolAnalysis|merge"
        ],
        "functions": [
            "|JoinFlowConditionsTest|runDataflow",
            "|SpecialBoolAnalysis|SpecialBoolAnalysis",
            "|SpecialBoolAnalysis|transfer"
        ]
    },
    {
        "filename": "/clang/unittests/Analysis/FlowSensitive/UncheckedOptionalAccessModelTest.cpp",
        "new_functions": [],
        "functions": [
            "None|UncheckedOptionalAccessTest|ExpectDiagnosticsFor"
        ]
    },
    {
        "filename": "/clang/unittests/Basic/FileEntryTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/unittests/Basic/FileManagerTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/unittests/Format/FormatTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/unittests/Format/FormatTestComments.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/unittests/Format/FormatTestVerilog.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/clang/utils/TableGen/RISCVVEmitter.cpp",
        "new_functions": [],
        "functions": [
            "None|None|emitCodeGenSwitchBody"
        ]
    },
    {
        "filename": "/clang/utils/TableGen/SveEmitter.cpp",
        "new_functions": [],
        "functions": [
            "|SVEType|applyModifier"
        ]
    },
    {
        "filename": "/compiler-rt/lib/asan/asan_interceptors.cpp",
        "new_functions": [],
        "functions": [
            "None|None|___interceptor___cxa_atexit",
            "None|None|___interceptor___strdup",
            "None|None|___interceptor_atoi",
            "None|None|___interceptor_atol",
            "None|None|___interceptor_atoll",
            "None|None|___interceptor_strcat",
            "None|None|___interceptor_strcpy",
            "None|None|___interceptor_strdup",
            "None|None|___interceptor_strncat",
            "None|None|___interceptor_strncpy"
        ]
    },
    {
        "filename": "/compiler-rt/lib/asan/asan_interceptors.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/compiler-rt/lib/asan/asan_internal.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/compiler-rt/lib/asan/asan_mac.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/compiler-rt/lib/asan/asan_malloc_linux.cpp",
        "new_functions": [],
        "functions": [
            "None|DlsymAlloc|UseImpl",
            "None|None|___interceptor_calloc",
            "None|None|___interceptor_malloc",
            "None|None|___interceptor_realloc",
            "None|None|___interceptor_reallocarray"
        ]
    },
    {
        "filename": "/compiler-rt/lib/asan/asan_malloc_mac.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/compiler-rt/lib/asan/asan_rtl.cpp",
        "new_functions": [],
        "functions": [
            "__asan|None|AsanInitFromRtl",
            "__asan|None|AsanInitInternal",
            "__asan|None|AsanInitIsRunning",
            "__asan|None|SetAsanInitIsRunning",
            "__asan|None|SetAsanInited"
        ]
    },
    {
        "filename": "/compiler-rt/lib/hwasan/hwasan_interceptors.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/compiler-rt/lib/hwasan/hwasan_linux.cpp",
        "new_functions": [],
        "functions": [
            "__hwasan|None|InitializeShadowBaseAddress"
        ]
    },
    {
        "filename": "/compiler-rt/lib/interception/interception_win.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/compiler-rt/lib/orc/macho_platform.cpp",
        "new_functions": [
            "|MachOPlatformRuntimeState|lookupSymbolInJITDylib"
        ],
        "functions": [
            "|MachOPlatformRuntimeState|dlsym"
        ]
    },
    {
        "filename": "/compiler-rt/lib/orc/simple_packed_serialization.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/compiler-rt/lib/profile/InstrProfiling.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_libcdep.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup.cpp",
        "new_functions": [],
        "functions": [
            "__sanitizer|MarkupStackTracePrinter|RenderData",
            "__sanitizer|MarkupStackTracePrinter|RenderFrame"
        ]
    },
    {
        "filename": "/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup_constants.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup_fuchsia.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/compiler-rt/lib/scudo/standalone/combined.h",
        "new_functions": [],
        "functions": [
            "scudo|None|deallocate",
            "scudo|None|getErrorInfo",
            "scudo|None|getRingBufferErrorInfo",
            "scudo|None|getRingBufferSize",
            "scudo|None|getUsableSize",
            "scudo|None|mapAndInitializeRingBuffer",
            "scudo|None|ringBufferSizeInBytes",
            "scudo|None|storeRingBufferEntry",
            "scudo|None|unmapRingBuffer"
        ]
    },
    {
        "filename": "/compiler-rt/lib/scudo/standalone/common.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp",
        "new_functions": [],
        "functions": [
            "None|None|LLVMFuzzerTestOneInput"
        ]
    },
    {
        "filename": "/compiler-rt/lib/scudo/standalone/include/scudo/interface.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/compiler-rt/lib/scudo/standalone/primary32.h",
        "new_functions": [],
        "functions": [
            "scudo|None|getSizeClassFragmentationInfo"
        ]
    },
    {
        "filename": "/compiler-rt/lib/scudo/standalone/primary64.h",
        "new_functions": [],
        "functions": [
            "scudo|None|getRegionFragmentationInfo"
        ]
    },
    {
        "filename": "/compiler-rt/lib/scudo/standalone/secondary.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp",
        "new_functions": [
            "None|ScudoWrappersCTest|invalidateAllocHookPtrAs"
        ],
        "functions": []
    },
    {
        "filename": "/compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/compiler-rt/test/hwasan/TestCases/Linux/syscalls.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/flang/include/flang/Frontend/CompilerInstance.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/include/flang/Frontend/CompilerInvocation.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/include/flang/Frontend/FrontendActions.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/include/flang/Lower/Bridge.h",
        "new_functions": [],
        "functions": [
            "Fortran::lower|LoweringBridge|create"
        ]
    },
    {
        "filename": "/flang/include/flang/Lower/ConvertExprToHLFIR.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/include/flang/Lower/ConvertVariable.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/include/flang/Lower/PFTBuilder.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/include/flang/Optimizer/Analysis/TBAAForest.h",
        "new_functions": [],
        "functions": [
            "fir|TBAAForrest|operator[]"
        ]
    },
    {
        "filename": "/flang/include/flang/Optimizer/Builder/IntrinsicCall.h",
        "new_functions": [],
        "functions": [
            "fir|None|getTypeHelper"
        ]
    },
    {
        "filename": "/flang/include/flang/Optimizer/Builder/LowLevelIntrinsics.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/include/flang/Optimizer/CodeGen/Target.h",
        "new_functions": [],
        "functions": [
            "fir|CodeGenSpecifics|CodeGenSpecifics"
        ]
    },
    {
        "filename": "/flang/include/flang/Optimizer/CodeGen/TypeConverter.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/include/flang/Optimizer/Dialect/FIROpsSupport.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/include/flang/Runtime/character.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/include/flang/Runtime/iostat.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/include/flang/Runtime/magic-numbers.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/lib/Evaluate/variable.cpp",
        "new_functions": [],
        "functions": [
            "Fortran::evaluate|None|GetBaseObject",
            "Fortran::evaluate|None|GetLastSymbol"
        ]
    },
    {
        "filename": "/flang/lib/Frontend/CompilerInstance.cpp",
        "new_functions": [],
        "functions": [
            "Fortran::frontend|CompilerInstance|executeAction"
        ]
    },
    {
        "filename": "/flang/lib/Frontend/CompilerInvocation.cpp",
        "new_functions": [],
        "functions": [
            "Fortran::frontend|CompilerInvocation|createFromArgs",
            "Fortran::frontend|CompilerInvocation|getSemanticsCtx",
            "Fortran::frontend|CompilerInvocation|setDefaultFortranOpts",
            "Fortran::frontend|CompilerInvocation|setFortranOpts",
            "None|None|getIntrinsicDir",
            "None|None|getOpenMPHeadersDir",
            "None|None|parseCodeGenArgs"
        ]
    },
    {
        "filename": "/flang/lib/Frontend/FrontendActions.cpp",
        "new_functions": [
            "Fortran::frontend|CodeGenAction|setUpTargetMachine",
            "None|None|getExplicitAndImplicitAMDGPUTargetFeatures",
            "None|None|getExplicitAndImplicitNVPTXTargetFeatures",
            "None|None|getTargetFeatures",
            "None|None|setMLIRDataLayout"
        ],
        "functions": [
            "Fortran::frontend|CodeGenAction|beginSourceFileAction",
            "Fortran::frontend|CodeGenAction|executeAction",
            "Fortran::frontend|CodeGenAction|generateLLVMIR",
            "Fortran::frontend|CodeGenAction|runOptimizationPipeline",
            "None|None|addAMDGPUSpecificMLIRItems",
            "None|None|getVScaleRange"
        ]
    },
    {
        "filename": "/flang/lib/Lower/Bridge.cpp",
        "new_functions": [
            "|IncrementLoopInfo|operator="
        ],
        "functions": [
            "Fortran::lower|LoweringBridge|LoweringBridge",
            "|FirConverter|genFIRIncrementLoopBegin",
            "|FirConverter|run",
            "|FirConverter|startNewFunction",
            "|IncrementLoopInfo|IncrementLoopInfo",
            "|TypeInfoConverter|createTypeInfoOpAndGlobal"
        ]
    },
    {
        "filename": "/flang/lib/Lower/CallInterface.cpp",
        "new_functions": [],
        "functions": [
            "Fortran::lower|CallerInterface|requireDispatchCall"
        ]
    },
    {
        "filename": "/flang/lib/Lower/ConvertCall.cpp",
        "new_functions": [],
        "functions": [
            "Fortran::lower|None|genCallOpAndResult",
            "None|None|genUserCall"
        ]
    },
    {
        "filename": "/flang/lib/Lower/ConvertExprToHLFIR.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/lib/Lower/ConvertVariable.cpp",
        "new_functions": [],
        "functions": [
            "Fortran::lower|None|createRuntimeTypeInfoGlobal",
            "None|None|instantiateCommon",
            "None|None|instantiateGlobal"
        ]
    },
    {
        "filename": "/flang/lib/Lower/DirectivesCommon.h",
        "new_functions": [],
        "functions": [
            "Fortran::lower|None|genBoundsOps",
            "Fortran::lower|None|genBoundsOpsFromBox"
        ]
    },
    {
        "filename": "/flang/lib/Lower/HlfirIntrinsics.cpp",
        "new_functions": [],
        "functions": [
            "Fortran::lower|None|lowerHlfirIntrinsic",
            "|HlfirTransformationalIntrinsic|getOperandVector"
        ]
    },
    {
        "filename": "/flang/lib/Lower/OpenMP.cpp",
        "new_functions": [
            "None|None|genCommonBlockMember"
        ],
        "functions": [
            "Fortran::lower|None|genThreadprivateOp",
            "None|None|createBodyOfOp",
            "None|None|threadPrivatizeVars"
        ]
    },
    {
        "filename": "/flang/lib/Lower/PFTBuilder.cpp",
        "new_functions": [
            "|PFTBuilder|checkForRoundingModeCall"
        ],
        "functions": [
            "Fortran::lower::pft|ModuleLikeUnit|ModuleLikeUnit"
        ]
    },
    {
        "filename": "/flang/lib/Optimizer/Builder/HLFIRTools.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/lib/Optimizer/Builder/IntrinsicCall.cpp",
        "new_functions": [],
        "functions": [
            "fir|IntrinsicLibrary|genIeeeClass",
            "fir|IntrinsicLibrary|genIeeeCopySign",
            "fir|IntrinsicLibrary|genIeeeIsFinite",
            "fir|IntrinsicLibrary|genIeeeIsNan",
            "fir|IntrinsicLibrary|genIeeeIsNegative",
            "fir|IntrinsicLibrary|genIeeeIsNormal",
            "fir|IntrinsicLibrary|genIeeeSignbit",
            "fir|IntrinsicLibrary|genIeeeSupportRounding",
            "fir|IntrinsicLibrary|genIeeeTypeCompare",
            "fir|IntrinsicLibrary|genIeeeUnordered",
            "fir|IntrinsicLibrary|genIeeeValue"
        ]
    },
    {
        "filename": "/flang/lib/Optimizer/Builder/LowLevelIntrinsics.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/lib/Optimizer/CodeGen/CodeGen.cpp",
        "new_functions": [],
        "functions": [
            "None|CoordinateOpConversion|doRewriteBox",
            "|CmpcOpConversion|matchAndRewrite",
            "|FIRToLLVMLowering|runOnOperation",
            "|XArrayCoorOpConversion|doRewrite"
        ]
    },
    {
        "filename": "/flang/lib/Optimizer/CodeGen/Target.cpp",
        "new_functions": [],
        "functions": [
            "fir|CodeGenSpecifics|get",
            "|TargetX86_64|complexArgumentType",
            "|TargetX86_64|complexReturnType"
        ]
    },
    {
        "filename": "/flang/lib/Optimizer/CodeGen/TargetRewrite.cpp",
        "new_functions": [],
        "functions": [
            "|TargetRewrite|clearMembers",
            "|TargetRewrite|convertAddrOp",
            "|TargetRewrite|convertCallOp",
            "|TargetRewrite|convertSignature",
            "|TargetRewrite|doComplexArg",
            "|TargetRewrite|doComplexReturn",
            "|TargetRewrite|hasPortableSignature",
            "|TargetRewrite|lowerComplexSignatureArg",
            "|TargetRewrite|lowerComplexSignatureRes",
            "|TargetRewrite|rewriteCallComplexInputType",
            "|TargetRewrite|rewriteCallComplexResultType",
            "|TargetRewrite|runOnOperation",
            "|TargetRewrite|setMembers"
        ]
    },
    {
        "filename": "/flang/lib/Optimizer/CodeGen/TypeConverter.cpp",
        "new_functions": [],
        "functions": [
            "fir|LLVMTypeConverter|LLVMTypeConverter"
        ]
    },
    {
        "filename": "/flang/lib/Optimizer/Dialect/FIRType.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/lib/Optimizer/HLFIR/IR/HLFIROps.cpp",
        "new_functions": [],
        "functions": [
            "None|None|verifyCharacterReductionOp",
            "None|None|verifyNumericalReductionOp"
        ]
    },
    {
        "filename": "/flang/lib/Optimizer/HLFIR/Transforms/LowerHLFIRIntrinsics.cpp",
        "new_functions": [],
        "functions": [
            "|LowerHLFIRIntrinsics|runOnOperation",
            "|None|matchAndRewrite"
        ]
    },
    {
        "filename": "/flang/lib/Optimizer/Transforms/ExternalNameConversion.cpp",
        "new_functions": [],
        "functions": [
            "|MangleNameOnFuncOp|matchAndRewrite"
        ]
    },
    {
        "filename": "/flang/lib/Parser/prescan.cpp",
        "new_functions": [],
        "functions": [
            "Fortran::parser|Prescanner|FreeFormContinuationLine",
            "Fortran::parser|Prescanner|QuotedCharacterLiteral"
        ]
    },
    {
        "filename": "/flang/lib/Parser/prescan.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/lib/Semantics/check-omp-structure.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/lib/Semantics/check-omp-structure.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/lib/Semantics/definable.cpp",
        "new_functions": [],
        "functions": [
            "Fortran::semantics|None|WhyNotDefinableBase",
            "Fortran::semantics|None|WhyNotDefinableLast"
        ]
    },
    {
        "filename": "/flang/lib/Semantics/symbol.cpp",
        "new_functions": [],
        "functions": [
            "Fortran::semantics|GenericKind|ToString"
        ]
    },
    {
        "filename": "/flang/runtime/ISO_Fortran_binding.cpp",
        "new_functions": [],
        "functions": [
            "Fortran::ISO|None|CFI_allocate"
        ]
    },
    {
        "filename": "/flang/runtime/character.cpp",
        "new_functions": [
            "Fortran::runtime|None|_FortranACharacterAssign"
        ],
        "functions": []
    },
    {
        "filename": "/flang/runtime/descriptor-io.cpp",
        "new_functions": [],
        "functions": [
            "Fortran::runtime::io::descr|None|DefinedFormattedIo",
            "Fortran::runtime::io::descr|None|DefinedUnformattedIo"
        ]
    },
    {
        "filename": "/flang/runtime/descriptor-io.h",
        "new_functions": [
            "Fortran::runtime::io::descr|None|DefaultComponentwiseIO"
        ],
        "functions": [
            "Fortran::runtime::io::descr|None|FormattedDerivedTypeIO",
            "Fortran::runtime::io::descr|None|UnformattedDescriptorIO"
        ]
    },
    {
        "filename": "/flang/runtime/edit-input.cpp",
        "new_functions": [],
        "functions": [
            "Fortran::runtime::io|None|EditBOZInput",
            "Fortran::runtime::io|None|EditCharacterInput"
        ]
    },
    {
        "filename": "/flang/runtime/edit-output.cpp",
        "new_functions": [],
        "functions": [
            "Fortran::runtime::io|None|EditFOutput",
            "Fortran::runtime::io|None|EditIntegerOutput"
        ]
    },
    {
        "filename": "/flang/runtime/internal-unit.cpp",
        "new_functions": [],
        "functions": [
            "Fortran::runtime::io|None|EndIoStatement"
        ]
    },
    {
        "filename": "/flang/runtime/io-stmt.h",
        "new_functions": [],
        "functions": [
            "Fortran::runtime::io|IoStatementState|CueUpInput"
        ]
    },
    {
        "filename": "/flang/runtime/iostat.cpp",
        "new_functions": [],
        "functions": [
            "Fortran::runtime::io|None|IostatErrorString"
        ]
    },
    {
        "filename": "/flang/runtime/unit.cpp",
        "new_functions": [],
        "functions": [
            "Fortran::runtime::io|ExternalFileUnit|BackspaceRecord",
            "Fortran::runtime::io|ExternalFileUnit|BeginReadingRecord",
            "Fortran::runtime::io|ExternalFileUnit|BeginSequentialVariableUnformattedInputRecord",
            "Fortran::runtime::io|ExternalFileUnit|DoEndfile",
            "Fortran::runtime::io|ExternalFileUnit|DoImpliedEndfile",
            "Fortran::runtime::io|ExternalFileUnit|Emit",
            "Fortran::runtime::io|ExternalFileUnit|LookUpOrCreateAnonymous",
            "Fortran::runtime::io|ExternalFileUnit|Rewind"
        ]
    },
    {
        "filename": "/flang/runtime/unit.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/flang/tools/bbc/bbc.cpp",
        "new_functions": [],
        "functions": [
            "None|None|convertFortranSourceToMLIR",
            "None|None|main"
        ]
    },
    {
        "filename": "/flang/tools/tco/tco.cpp",
        "new_functions": [
            "None|None|printModuleBody"
        ],
        "functions": [
            "None|None|compileFIR"
        ]
    },
    {
        "filename": "/flang/unittests/Evaluate/real.cpp",
        "new_functions": [],
        "functions": [
            "None|None|roundTest"
        ]
    },
    {
        "filename": "/flang/unittests/Frontend/FrontendActionTest.cpp",
        "new_functions": [],
        "functions": [
            "|FrontendActionTest|SetUp",
            "|None|TEST_F"
        ]
    },
    {
        "filename": "/flang/unittests/Runtime/CommandTest.cpp",
        "new_functions": [],
        "functions": [
            "None|CommandFixture|CheckMissingArgumentValue",
            "None|CommandFixture|CheckMissingCommandValue"
        ]
    },
    {
        "filename": "/flang/unittests/Runtime/MatmulTranspose.cpp",
        "new_functions": [],
        "functions": [
            "None|None|TEST"
        ]
    },
    {
        "filename": "/flang/unittests/Runtime/NumericalFormatTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libc/config/linux/app.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libc/src/__support/CPP/bit.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libc/src/__support/FPUtil/FPBits.h",
        "new_functions": [
            "LIBC_NAMESPACE::fputil|None|get_unbiased_exponent",
            "LIBC_NAMESPACE::fputil|None|set_unbiased_exponent"
        ],
        "functions": [
            "LIBC_NAMESPACE::fputil|None|create_value",
            "LIBC_NAMESPACE::fputil|None|get_explicit_exponent",
            "LIBC_NAMESPACE::fputil|None|get_explicit_mantissa",
            "LIBC_NAMESPACE::fputil|None|get_exponent",
            "LIBC_NAMESPACE::fputil|None|make_value"
        ]
    },
    {
        "filename": "/libc/src/__support/FPUtil/FloatProperties.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libc/src/__support/FPUtil/Hypot.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::fputil::internal|None|find_leading_one",
            "LIBC_NAMESPACE::fputil|None|hypot"
        ]
    },
    {
        "filename": "/libc/src/__support/FPUtil/ManipulationFunctions.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::fputil|None|nextafter"
        ]
    },
    {
        "filename": "/libc/src/__support/FPUtil/NormalFloat.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::fputil|None|init_from_bits",
            "LIBC_NAMESPACE::fputil|None|operator type-parameter-0-0"
        ]
    },
    {
        "filename": "/libc/src/__support/FPUtil/dyadic_float.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::fputil|None|operator type-parameter-1-0"
        ]
    },
    {
        "filename": "/libc/src/__support/FPUtil/fpbits_str.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|str"
        ]
    },
    {
        "filename": "/libc/src/__support/FPUtil/generic/FMA.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::fputil::generic|None|fma"
        ]
    },
    {
        "filename": "/libc/src/__support/FPUtil/generic/FMod.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::fputil::generic|None|eval_internal"
        ]
    },
    {
        "filename": "/libc/src/__support/FPUtil/generic/sqrt.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::fputil::internal|None|normalize",
            "LIBC_NAMESPACE::fputil|None|sqrt"
        ]
    },
    {
        "filename": "/libc/src/__support/FPUtil/generic/sqrt_80_bit_long_double.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::fputil::x86|None|normalize"
        ]
    },
    {
        "filename": "/libc/src/__support/FPUtil/x86_64/LongDoubleBits.h",
        "new_functions": [
            "LIBC_NAMESPACE::fputil|FPBits|get_unbiased_exponent",
            "LIBC_NAMESPACE::fputil|FPBits|set_unbiased_exponent"
        ],
        "functions": [
            "LIBC_NAMESPACE::fputil|FPBits|build_nan",
            "LIBC_NAMESPACE::fputil|FPBits|create_value",
            "LIBC_NAMESPACE::fputil|FPBits|get_explicit_exponent",
            "LIBC_NAMESPACE::fputil|FPBits|get_explicit_mantissa",
            "LIBC_NAMESPACE::fputil|FPBits|get_exponent",
            "LIBC_NAMESPACE::fputil|FPBits|inf",
            "LIBC_NAMESPACE::fputil|FPBits|is_inf",
            "LIBC_NAMESPACE::fputil|FPBits|is_inf_or_nan",
            "LIBC_NAMESPACE::fputil|FPBits|is_nan",
            "LIBC_NAMESPACE::fputil|FPBits|is_zero",
            "LIBC_NAMESPACE::fputil|FPBits|uintval"
        ]
    },
    {
        "filename": "/libc/src/__support/FPUtil/x86_64/NextAfterLongDouble.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::fputil|None|nextafter"
        ]
    },
    {
        "filename": "/libc/src/__support/FPUtil/x86_64/sqrt.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libc/src/__support/HashTable/bitmask.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::internal|None|end",
            "LIBC_NAMESPACE::internal|None|lowest_set_bit_nonzero"
        ]
    },
    {
        "filename": "/libc/src/__support/HashTable/table.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::internal|HashTable|control",
            "LIBC_NAMESPACE::internal|HashTable|entry",
            "LIBC_NAMESPACE::internal|HashTable|find",
            "LIBC_NAMESPACE::internal|HashTable|insert",
            "LIBC_NAMESPACE::internal|HashTable|offset_from_entries",
            "LIBC_NAMESPACE::internal|HashTable|offset_to_groups",
            "LIBC_NAMESPACE::internal|HashTable|table_alignment",
            "LIBC_NAMESPACE::internal|None|capacity_to_entries"
        ]
    },
    {
        "filename": "/libc/src/__support/OSUtil/linux/quick_exit.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|quick_exit"
        ]
    },
    {
        "filename": "/libc/src/__support/UInt.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::cpp|None|clz",
            "LIBC_NAMESPACE::cpp|None|operator type-parameter-1-0"
        ]
    },
    {
        "filename": "/libc/src/__support/UInt128.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libc/src/__support/detailed_powers_of_ten.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::internal|None|exp10_to_exp2"
        ]
    },
    {
        "filename": "/libc/src/__support/float_to_string.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::internal|None|get_table_negative",
            "LIBC_NAMESPACE::internal|None|log10_pow2",
            "LIBC_NAMESPACE::internal|None|log2_pow5",
            "LIBC_NAMESPACE::internal|None|mul_shift_mod_1e9",
            "LIBC_NAMESPACE|None|get_negative_block",
            "LIBC_NAMESPACE|None|get_positive_block"
        ]
    },
    {
        "filename": "/libc/src/__support/hash.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::internal|HashState|finish"
        ]
    },
    {
        "filename": "/libc/src/__support/integer_utils.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libc/src/__support/macros/properties/float.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libc/src/__support/macros/properties/os.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libc/src/__support/math_extras.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|add_with_carry",
            "LIBC_NAMESPACE|None|sub_with_borrow"
        ]
    },
    {
        "filename": "/libc/src/__support/memory_size.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libc/src/__support/number_pair.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libc/src/__support/str_to_float.h",
        "new_functions": [
            "LIBC_NAMESPACE::internal|None|leading_zeroes"
        ],
        "functions": [
            "LIBC_NAMESPACE::internal|None|binary_exp_to_float",
            "LIBC_NAMESPACE::internal|None|clinger_fast_path",
            "LIBC_NAMESPACE::internal|None|decimal_exp_to_float",
            "LIBC_NAMESPACE::internal|None|decimal_string_to_float",
            "LIBC_NAMESPACE::internal|None|eisel_lemire",
            "LIBC_NAMESPACE::internal|None|hexadecimal_string_to_float",
            "LIBC_NAMESPACE::internal|None|simple_decimal_conversion",
            "LIBC_NAMESPACE::internal|None|strtofloatingpoint"
        ]
    },
    {
        "filename": "/libc/src/__support/str_to_num_result.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|StrToNumResult<T>",
            "LIBC_NAMESPACE|None|has_error",
            "LIBC_NAMESPACE|None|operator type-parameter-0-0"
        ]
    },
    {
        "filename": "/libc/src/__support/threads/linux/thread.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|start_thread"
        ]
    },
    {
        "filename": "/libc/src/__support/wctype_utils.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::internal|None|wctob"
        ]
    },
    {
        "filename": "/libc/src/math/generic/expf.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|expf"
        ]
    },
    {
        "filename": "/libc/src/math/generic/explogxf.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|log2_eval",
            "LIBC_NAMESPACE|None|log_eval"
        ]
    },
    {
        "filename": "/libc/src/math/generic/hypotf.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|hypotf"
        ]
    },
    {
        "filename": "/libc/src/math/generic/log.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|log"
        ]
    },
    {
        "filename": "/libc/src/math/generic/log10.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|log10"
        ]
    },
    {
        "filename": "/libc/src/math/generic/log10f.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|log10f"
        ]
    },
    {
        "filename": "/libc/src/math/generic/log1p.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|log1p"
        ]
    },
    {
        "filename": "/libc/src/math/generic/log1pf.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::internal|None|log"
        ]
    },
    {
        "filename": "/libc/src/math/generic/log2.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|log2"
        ]
    },
    {
        "filename": "/libc/src/math/generic/log2f.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|log2f"
        ]
    },
    {
        "filename": "/libc/src/math/generic/logf.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|logf"
        ]
    },
    {
        "filename": "/libc/src/math/generic/math_utils.h",
        "new_functions": [
            "LIBC_NAMESPACE|None|as_float",
            "LIBC_NAMESPACE|None|as_uint32_bits",
            "LIBC_NAMESPACE|None|as_uint64_bits",
            "LIBC_NAMESPACE|None|top12_bits"
        ],
        "functions": []
    },
    {
        "filename": "/libc/src/math/generic/powf.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::|None|is_integer",
            "LIBC_NAMESPACE::|None|is_odd_integer",
            "LIBC_NAMESPACE::|None|larger_exponent"
        ]
    },
    {
        "filename": "/libc/src/search/hcreate.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|hcreate"
        ]
    },
    {
        "filename": "/libc/src/search/hdestroy.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|hdestroy"
        ]
    },
    {
        "filename": "/libc/src/search/hsearch.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|hsearch"
        ]
    },
    {
        "filename": "/libc/src/search/hsearch_r.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|hsearch_r"
        ]
    },
    {
        "filename": "/libc/src/stdio/printf_core/float_dec_converter.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::printf_core|None|convert_float_dec_auto_typed",
            "LIBC_NAMESPACE::printf_core|None|convert_float_dec_exp_typed",
            "LIBC_NAMESPACE::printf_core|None|convert_float_decimal_typed"
        ]
    },
    {
        "filename": "/libc/src/stdio/printf_core/float_hex_converter.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::printf_core|None|convert_float_hex_exp"
        ]
    },
    {
        "filename": "/libc/src/stdlib/getenv.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|getenv"
        ]
    },
    {
        "filename": "/libc/src/string/memory_utils/op_aarch64.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libc/src/string/memory_utils/op_builtin.h",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::builtin|None|block",
            "LIBC_NAMESPACE::builtin|None|head_tail",
            "LIBC_NAMESPACE::builtin|None|loop_and_tail",
            "LIBC_NAMESPACE::builtin|None|tail"
        ]
    },
    {
        "filename": "/libc/src/string/memory_utils/utils.h",
        "new_functions": [
            "LIBC_NAMESPACE|None|deferred_static_assert",
            "LIBC_NAMESPACE|None|ge_power2",
            "LIBC_NAMESPACE|None|is_power2",
            "LIBC_NAMESPACE|None|is_power2_or_zero",
            "LIBC_NAMESPACE|None|le_power2",
            "LIBC_NAMESPACE|None|log2s"
        ],
        "functions": [
            "LIBC_NAMESPACE|None|align_to_next_boundary",
            "LIBC_NAMESPACE|None|distance_to_align_down",
            "LIBC_NAMESPACE|None|distance_to_align_up",
            "LIBC_NAMESPACE|None|load_aligned",
            "LIBC_NAMESPACE|None|store_aligned"
        ]
    },
    {
        "filename": "/libc/startup/linux/aarch64/start.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|init_tls",
            "None|None|do_start"
        ]
    },
    {
        "filename": "/libc/startup/linux/riscv/start.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|init_tls",
            "None|None|do_start"
        ]
    },
    {
        "filename": "/libc/startup/linux/x86_64/start.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE|None|init_tls",
            "None|None|_start"
        ]
    },
    {
        "filename": "/libc/test/src/__support/CPP/bit_test.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libc/test/src/__support/FPUtil/fpbits_test.cpp",
        "new_functions": [],
        "functions": [
            "None|LlvmLibcFPBitsTest_DoubleType|Run",
            "None|LlvmLibcFPBitsTest_Float128Type|Run",
            "None|LlvmLibcFPBitsTest_FloatType|Run",
            "None|LlvmLibcFPBitsTest_X86LongDoubleType|Run"
        ]
    },
    {
        "filename": "/libc/test/src/__support/HashTable/bitmask_test.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::internal|LlvmLibcHashTableBitMaskTest_MultiBitStrideIteration|Run"
        ]
    },
    {
        "filename": "/libc/test/src/__support/HashTable/table_test.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::internal|LlvmLibcTableTest_Insertion|Run"
        ]
    },
    {
        "filename": "/libc/test/src/__support/math_extras_test.cpp",
        "new_functions": [
            "LIBC_NAMESPACE|LlvmLibcBlockMathExtrasTest_TODO|LlvmLibcBlockMathExtrasTest_TODO",
            "LIBC_NAMESPACE|LlvmLibcBlockMathExtrasTest_TODO|Run",
            "LIBC_NAMESPACE|LlvmLibcBlockMathExtrasTest_TODO|getName"
        ],
        "functions": []
    },
    {
        "filename": "/libc/test/src/__support/memory_size_test.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::internal|LlvmLibcMemSizeTest_AlignUp|Run"
        ]
    },
    {
        "filename": "/libc/test/src/__support/str_to_float_test.cpp",
        "new_functions": [
            "None|LlvmLibcStrToFloatTest_EiselLemireFloat64AsLongDouble|LlvmLibcStrToFloatTest_EiselLemireFloat64AsLongDouble",
            "None|LlvmLibcStrToFloatTest_EiselLemireFloat64AsLongDouble|Run",
            "None|LlvmLibcStrToFloatTest_EiselLemireFloat64AsLongDouble|getName",
            "None|LlvmLibcStrToFloatTest_LeadingZeroes|LlvmLibcStrToFloatTest_LeadingZeroes",
            "None|LlvmLibcStrToFloatTest_LeadingZeroes|Run",
            "None|LlvmLibcStrToFloatTest_LeadingZeroes|getName"
        ],
        "functions": []
    },
    {
        "filename": "/libc/test/src/math/LdExpTest.h",
        "new_functions": [],
        "functions": [
            "None|None|testNormalOperation"
        ]
    },
    {
        "filename": "/libc/test/src/math/NextAfterTest.h",
        "new_functions": [],
        "functions": [
            "None|None|testBoundaries"
        ]
    },
    {
        "filename": "/libc/test/src/math/RoundToIntegerTest.h",
        "new_functions": [],
        "functions": [
            "None|None|do_round_numbers_test",
            "None|None|testIntegerOverflow"
        ]
    },
    {
        "filename": "/libc/test/src/math/smoke/LdExpTest.h",
        "new_functions": [],
        "functions": [
            "None|None|testNormalOperation"
        ]
    },
    {
        "filename": "/libc/test/src/math/smoke/NextAfterTest.h",
        "new_functions": [],
        "functions": [
            "None|None|testBoundaries"
        ]
    },
    {
        "filename": "/libc/test/src/math/smoke/NextTowardTest.h",
        "new_functions": [],
        "functions": [
            "None|None|testBoundaries"
        ]
    },
    {
        "filename": "/libc/test/src/search/hsearch_test.cpp",
        "new_functions": [
            "None|LlvmLibcHSearchTest_InsertTooMany|LlvmLibcHSearchTest_InsertTooMany",
            "None|LlvmLibcHSearchTest_InsertTooMany|Run",
            "None|LlvmLibcHSearchTest_InsertTooMany|getName"
        ],
        "functions": [
            "None|LlvmLibcHSearchTest_Found|Run"
        ]
    },
    {
        "filename": "/libc/test/src/stdio/sprintf_test.cpp",
        "new_functions": [],
        "functions": [
            "None|LlvmLibcSPrintfTest_FloatAutoConv|Run",
            "None|LlvmLibcSPrintfTest_FloatDecimalConv|Run",
            "None|LlvmLibcSPrintfTest_FloatExponentConv|Run",
            "None|LlvmLibcSPrintfTest_FloatHexExpConv|Run"
        ]
    },
    {
        "filename": "/libc/test/src/stdio/sscanf_test.cpp",
        "new_functions": [],
        "functions": [
            "None|LlvmLibcSScanfTest_FloatConvLengthModifier|Run"
        ]
    },
    {
        "filename": "/libc/test/src/stdlib/strtold_test.cpp",
        "new_functions": [],
        "functions": [
            "None|LlvmLibcStrToLDTest|run_test"
        ]
    },
    {
        "filename": "/libc/test/src/string/memory_utils/utils_test.cpp",
        "new_functions": [
            "LIBC_NAMESPACE|LlvmLibcUtilsTest_GEPowerOf2|LlvmLibcUtilsTest_GEPowerOf2",
            "LIBC_NAMESPACE|LlvmLibcUtilsTest_GEPowerOf2|Run",
            "LIBC_NAMESPACE|LlvmLibcUtilsTest_GEPowerOf2|getName",
            "LIBC_NAMESPACE|LlvmLibcUtilsTest_IsPowerOfTwoOrZero|LlvmLibcUtilsTest_IsPowerOfTwoOrZero",
            "LIBC_NAMESPACE|LlvmLibcUtilsTest_IsPowerOfTwoOrZero|Run",
            "LIBC_NAMESPACE|LlvmLibcUtilsTest_IsPowerOfTwoOrZero|getName",
            "LIBC_NAMESPACE|LlvmLibcUtilsTest_IsPowerOfTwo|LlvmLibcUtilsTest_IsPowerOfTwo",
            "LIBC_NAMESPACE|LlvmLibcUtilsTest_IsPowerOfTwo|Run",
            "LIBC_NAMESPACE|LlvmLibcUtilsTest_IsPowerOfTwo|getName",
            "LIBC_NAMESPACE|LlvmLibcUtilsTest_LEPowerOf2|LlvmLibcUtilsTest_LEPowerOf2",
            "LIBC_NAMESPACE|LlvmLibcUtilsTest_LEPowerOf2|Run",
            "LIBC_NAMESPACE|LlvmLibcUtilsTest_LEPowerOf2|getName",
            "LIBC_NAMESPACE|LlvmLibcUtilsTest_Log2|LlvmLibcUtilsTest_Log2",
            "LIBC_NAMESPACE|LlvmLibcUtilsTest_Log2|Run",
            "LIBC_NAMESPACE|LlvmLibcUtilsTest_Log2|getName"
        ],
        "functions": []
    },
    {
        "filename": "/libc/test/utils/FPUtil/x86_long_double_test.cpp",
        "new_functions": [],
        "functions": [
            "None|LlvmLibcX86LongDoubleTest_is_nan|Run"
        ]
    },
    {
        "filename": "/libc/utils/MPFRWrapper/MPFRUtils.cpp",
        "new_functions": [],
        "functions": [
            "LIBC_NAMESPACE::testing::mpfr|MPFRNumber|ulp_as_mpfr_number"
        ]
    },
    {
        "filename": "/libc/utils/gpu/loader/amdgpu/Loader.cpp",
        "new_functions": [],
        "functions": [
            "None|None|load"
        ]
    },
    {
        "filename": "/libcxx/benchmarks/stop_token.bench.cpp",
        "new_functions": [],
        "functions": [
            "None|None|BM_stop_token_async_reg_unreg_callback"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/any_of.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__algorithm/binary_search.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|binary_search"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/clamp.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|clamp"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/comp_ref_type.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__do_compare_assert"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/copy.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|copy"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/copy_if.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__algorithm/copy_n.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|copy_n"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/count_if.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|count_if"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/equal.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__equal"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/fill.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__fill",
            "std::_LIBCPP_ABI_NAMESPACE|None|fill"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/fill_n.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__fill_n",
            "std::_LIBCPP_ABI_NAMESPACE|None|fill_n"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/find.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|find"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/find_first_of.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|find_first_of"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/find_if.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__algorithm/find_if_not.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__algorithm/for_each_n.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|for_each_n"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/generate.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__algorithm/generate_n.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|generate_n"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/half_positive.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__half_positive"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/inplace_merge.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__inplace_merge",
            "std::_LIBCPP_ABI_NAMESPACE|None|__invert<_Predicate>",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/is_heap.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|is_heap"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/is_heap_until.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|is_heap_until"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/is_sorted.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|is_sorted"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/is_sorted_until.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|is_sorted_until"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/iter_swap.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|iter_swap"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/lexicographical_compare.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|lexicographical_compare"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/max.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|max"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/max_element.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|max_element"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/merge.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__merge",
            "std::_LIBCPP_ABI_NAMESPACE|None|merge"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/min.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|min"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/min_element.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|min_element"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/minmax.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|minmax"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/mismatch.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|mismatch"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/move_backward.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|move_backward"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/next_permutation.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|next_permutation"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/none_of.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__algorithm/nth_element.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__nth_element"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/partial_sort.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|partial_sort"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/partial_sort_copy.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|partial_sort_copy"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/partition.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|partition"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/partition_point.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|partition_point"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/prev_permutation.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|prev_permutation"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/ranges_rotate_copy.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__algorithm/remove.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|remove"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/remove_copy.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__algorithm/remove_copy_if.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__algorithm/remove_if.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|remove_if"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/replace.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__algorithm/replace_copy.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__algorithm/replace_copy_if.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__algorithm/replace_if.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__algorithm/reverse.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__reverse_impl",
            "std::_LIBCPP_ABI_NAMESPACE|None|reverse"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/reverse_copy.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__algorithm/rotate.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__algo_gcd",
            "std::_LIBCPP_ABI_NAMESPACE|None|__rotate_gcd",
            "std::_LIBCPP_ABI_NAMESPACE|None|__rotate_impl",
            "std::_LIBCPP_ABI_NAMESPACE|None|__rotate_left",
            "std::_LIBCPP_ABI_NAMESPACE|None|__rotate_right",
            "std::_LIBCPP_ABI_NAMESPACE|None|rotate"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/rotate_copy.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|rotate_copy"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/sample.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__sample",
            "std::_LIBCPP_ABI_NAMESPACE|None|sample"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/search.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|search"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/shift_left.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__algorithm/shift_right.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__algorithm/sift_down.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__sift_down"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/stable_partition.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__stable_partition_impl",
            "std::_LIBCPP_ABI_NAMESPACE|None|stable_partition"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/stable_sort.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__algorithm/swap_ranges.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|swap_ranges"
        ]
    },
    {
        "filename": "/libcxx/include/__algorithm/transform.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__bit/blsr.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__bit/countl.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__libcpp_clz"
        ]
    },
    {
        "filename": "/libcxx/include/__bit/popcount.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__libcpp_popcount"
        ]
    },
    {
        "filename": "/libcxx/include/__chrono/duration.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|ceil",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|count",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|duration<_Rep, _Period>",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|duration_cast",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|floor",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|max",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|min",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator%",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator%=",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator*",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator*=",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator+",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator++",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator+=",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator-",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator--",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator-=",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator/",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator/=",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator<",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator<=",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator>",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator>=",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|round",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|zero"
        ]
    },
    {
        "filename": "/libcxx/include/__chrono/time_point.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|abs",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|ceil",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|floor",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|max",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|min",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator+",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator+=",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator-",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator-=",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator<",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator<=",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator>",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|operator>=",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|round",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|time_point<_Clock, _Duration>",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|time_point_cast",
            "std::_LIBCPP_ABI_NAMESPACE::chrono|None|time_since_epoch"
        ]
    },
    {
        "filename": "/libcxx/include/__chrono/year_month.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__compare/compare_partial_order_fallback.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__compare/compare_strong_order_fallback.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__compare/compare_three_way.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__compare/compare_weak_order_fallback.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__compare/partial_order.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__compare/strong_order.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__compare/weak_order.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__concepts/assignable.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__concepts/boolean_testable.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__concepts/invocable.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__concepts/swappable.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__coroutine/coroutine_handle.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__exception/nested_exception.h",
        "new_functions": [],
        "functions": [
            "std|None|__do_throw"
        ]
    },
    {
        "filename": "/libcxx/include/__filesystem/copy_options.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__filesystem/directory_entry.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|None|operator<<",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|__cached_data|__cached_data",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|__cached_data|__reset",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|__dir_element_proxy|__dir_element_proxy",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|__dir_element_proxy|operator*",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|__assign_iter_entry",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|__create_iter_result",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|__get_ft",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|__get_nlink",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|__get_size",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|__get_status",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|__get_sym_ft",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|__get_symlink_status",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|__get_write_time",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|__handle_error",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|__is_dne_error",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|__refresh",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|assign",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|directory_entry",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|exists",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|file_size",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|hard_link_count",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|is_block_file",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|is_character_file",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|is_directory",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|is_fifo",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|is_other",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|is_regular_file",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|is_socket",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|is_symlink",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|last_write_time",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|operator const std::filesystem::path &",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|operator<",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|operator<=",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|operator==",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|operator>",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|operator>=",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|path",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|refresh",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|replace_filename",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|status",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_entry|symlink_status"
        ]
    },
    {
        "filename": "/libcxx/include/__filesystem/directory_iterator.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|directory_iterator|operator="
        ]
    },
    {
        "filename": "/libcxx/include/__filesystem/directory_options.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__filesystem/file_status.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|file_status|file_status",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|file_status|permissions",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|file_status|type",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|file_status|~file_status"
        ]
    },
    {
        "filename": "/libcxx/include/__filesystem/filesystem_error.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|None|__throw_filesystem_error"
        ]
    },
    {
        "filename": "/libcxx/include/__filesystem/operations.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|None|exists"
        ]
    },
    {
        "filename": "/libcxx/include/__filesystem/path.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|None|operator<<",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|None|operator>>",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|path|generic_u16string",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|path|generic_u32string",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|path|generic_u8string",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|path|generic_wstring",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|path|make_preferred",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|path|u16string",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|path|u32string",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|path|u8string",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|path|wstring"
        ]
    },
    {
        "filename": "/libcxx/include/__filesystem/path_iterator.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|iterator|operator*",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|iterator|operator++",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|iterator|operator--",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|iterator|operator->"
        ]
    },
    {
        "filename": "/libcxx/include/__filesystem/perm_options.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__filesystem/perms.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__filesystem/recursive_directory_iterator.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|None|begin",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|None|end",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|recursive_directory_iterator|disable_recursion_pending",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|recursive_directory_iterator|increment",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|recursive_directory_iterator|operator*",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|recursive_directory_iterator|operator++",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|recursive_directory_iterator|operator->",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|recursive_directory_iterator|operator=",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|recursive_directory_iterator|pop",
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|recursive_directory_iterator|recursion_pending"
        ]
    },
    {
        "filename": "/libcxx/include/__filesystem/u8path.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE::__fs::filesystem|None|u8path"
        ]
    },
    {
        "filename": "/libcxx/include/__format/buffer.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__format/escaped_output_table.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__format/extended_grapheme_cluster_table.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__format/format_arg.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__format/format_arg_store.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__format/format_context.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__format/format_functions.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__format/formatter_floating_point.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__format/formatter_integral.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__format/formatter_output.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__format/parser_std_format_spec.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__format/write_escaped.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__functional/binary_negate.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|binary_negate<_Predicate>",
            "std::_LIBCPP_ABI_NAMESPACE|None|not2",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()"
        ]
    },
    {
        "filename": "/libcxx/include/__functional/bind.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__apply_functor",
            "std::_LIBCPP_ABI_NAMESPACE|None|__bind<_Fp, _BoundArgs...>",
            "std::_LIBCPP_ABI_NAMESPACE|None|__bind_r<_Rp, _Fp, _BoundArgs...>",
            "std::_LIBCPP_ABI_NAMESPACE|None|__mu",
            "std::_LIBCPP_ABI_NAMESPACE|None|__mu_expand",
            "std::_LIBCPP_ABI_NAMESPACE|None|bind",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()"
        ]
    },
    {
        "filename": "/libcxx/include/__functional/bind_back.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__functional/bind_front.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__functional/binder1st.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__functional/binder2nd.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__functional/compose.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__functional/default_searcher.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|default_searcher<_ForwardIterator, _BinaryPredicate>",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()"
        ]
    },
    {
        "filename": "/libcxx/include/__functional/function.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|__alloc_func<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2 (type-parameter-0-3...)>",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|__base<type-parameter-0-0 (type-parameter-0-1...)>",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|__call_impl",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|__create",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|__default_alloc_func<type-parameter-0-0, type-parameter-0-1 (type-parameter-0-2...)>",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|__func<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2 (type-parameter-0-3...)>",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|__get_allocator",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|__not_null",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|__policy_func<type-parameter-0-0 (type-parameter-0-1...)>",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|__policy_invoker<type-parameter-0-0 (type-parameter-0-1...)>",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|__target",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|__value_func<type-parameter-0-0 (type-parameter-0-1...)>",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|operator bool",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|operator=",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|swap",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|target",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|target_type",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|~__policy_func<type-parameter-0-0 (type-parameter-0-1...)>",
            "std::_LIBCPP_ABI_NAMESPACE::__function|None|~__value_func<type-parameter-0-0 (type-parameter-0-1...)>",
            "std::_LIBCPP_ABI_NAMESPACE::__function|__policy|__choose_policy",
            "std::_LIBCPP_ABI_NAMESPACE::__function|__policy|__create",
            "std::_LIBCPP_ABI_NAMESPACE::__function|__policy|__create_empty",
            "std::_LIBCPP_ABI_NAMESPACE|None|__throw_bad_function_call",
            "std::_LIBCPP_ABI_NAMESPACE|None|function<type-parameter-0-0 (type-parameter-0-1...)>",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator bool",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|swap"
        ]
    },
    {
        "filename": "/libcxx/include/__functional/hash.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__loadword"
        ]
    },
    {
        "filename": "/libcxx/include/__functional/identity.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__functional/invoke.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|invoke"
        ]
    },
    {
        "filename": "/libcxx/include/__functional/mem_fn.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__mem_fn<_Tp>",
            "std::_LIBCPP_ABI_NAMESPACE|None|mem_fn",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()"
        ]
    },
    {
        "filename": "/libcxx/include/__functional/mem_fun_ref.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__functional/not_fn.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|not_fn",
            "std::_LIBCPP_ABI_NAMESPACE|__not_fn_op|operator()"
        ]
    },
    {
        "filename": "/libcxx/include/__functional/operations.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|bit_and|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|bit_not|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|bit_or|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|bit_xor|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|divides|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|equal_to|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|greater_equal|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|greater|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|less_equal|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|less|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|logical_and|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|logical_not|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|logical_or|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|minus|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|modulus|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|multiplies|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|negate|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|not_equal_to|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|plus|operator()"
        ]
    },
    {
        "filename": "/libcxx/include/__functional/perfect_forward.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__functional/pointer_to_binary_function.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__functional/pointer_to_unary_function.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__functional/ranges_operations.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__functional/reference_wrapper.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|cref",
            "std::_LIBCPP_ABI_NAMESPACE|None|get",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator type-parameter-0-0 &",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|ref",
            "std::_LIBCPP_ABI_NAMESPACE|None|reference_wrapper<_Tp>"
        ]
    },
    {
        "filename": "/libcxx/include/__functional/unary_negate.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|not1",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|unary_negate<_Predicate>"
        ]
    },
    {
        "filename": "/libcxx/include/__functional/weak_result_type.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__fwd/get.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__iterator/access.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__iterator/advance.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|advance"
        ]
    },
    {
        "filename": "/libcxx/include/__iterator/back_insert_iterator.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|back_insert_iterator<_Container>",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator="
        ]
    },
    {
        "filename": "/libcxx/include/__iterator/common_iterator.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__iterator/concepts.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__iterator/counted_iterator.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__iterator/data.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__iterator/distance.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__distance",
            "std::_LIBCPP_ABI_NAMESPACE|None|distance"
        ]
    },
    {
        "filename": "/libcxx/include/__iterator/empty.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__iterator/front_insert_iterator.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|front_insert_iterator<_Container>",
            "std::_LIBCPP_ABI_NAMESPACE|None|front_inserter",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator*",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator++",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator="
        ]
    },
    {
        "filename": "/libcxx/include/__iterator/insert_iterator.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|insert_iterator<_Container>",
            "std::_LIBCPP_ABI_NAMESPACE|None|inserter",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator*",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator++",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator="
        ]
    },
    {
        "filename": "/libcxx/include/__iterator/istream_iterator.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|istream_iterator<_Tp, _CharT, _Traits, _Distance>",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator*",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator++",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator->",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator=="
        ]
    },
    {
        "filename": "/libcxx/include/__iterator/istreambuf_iterator.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__test_for_eof",
            "std::_LIBCPP_ABI_NAMESPACE|None|equal",
            "std::_LIBCPP_ABI_NAMESPACE|None|istreambuf_iterator<_CharT, _Traits>",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator*",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator++",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|__proxy|__proxy",
            "std::_LIBCPP_ABI_NAMESPACE|__proxy|operator*"
        ]
    },
    {
        "filename": "/libcxx/include/__iterator/iter_swap.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__iterator/next.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|next"
        ]
    },
    {
        "filename": "/libcxx/include/__iterator/ostream_iterator.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|operator*",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator++",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator=",
            "std::_LIBCPP_ABI_NAMESPACE|None|ostream_iterator<_Tp, _CharT, _Traits>"
        ]
    },
    {
        "filename": "/libcxx/include/__iterator/ostreambuf_iterator.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|failed",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator*",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator++",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator=",
            "std::_LIBCPP_ABI_NAMESPACE|None|ostreambuf_iterator<_CharT, _Traits>"
        ]
    },
    {
        "filename": "/libcxx/include/__iterator/prev.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|prev"
        ]
    },
    {
        "filename": "/libcxx/include/__iterator/reverse_access.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|crbegin",
            "std::_LIBCPP_ABI_NAMESPACE|None|crend",
            "std::_LIBCPP_ABI_NAMESPACE|None|rbegin",
            "std::_LIBCPP_ABI_NAMESPACE|None|rend"
        ]
    },
    {
        "filename": "/libcxx/include/__iterator/reverse_iterator.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|base",
            "std::_LIBCPP_ABI_NAMESPACE|None|make_reverse_iterator",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator*",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator+",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator++",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator+=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator-",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator--",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator-=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator->",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator<",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator<=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator>",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator>=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator[]",
            "std::_LIBCPP_ABI_NAMESPACE|None|reverse_iterator<_Iter>"
        ]
    },
    {
        "filename": "/libcxx/include/__iterator/size.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|size"
        ]
    },
    {
        "filename": "/libcxx/include/__iterator/wrap_iter.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|operator->",
            "std::_LIBCPP_ABI_NAMESPACE|None|to_address"
        ]
    },
    {
        "filename": "/libcxx/include/__locale_dir/locale_base_api/bsd_locale_fallbacks.h",
        "new_functions": [],
        "functions": [
            "None|None|__libcpp_mbtowc_l",
            "None|None|__libcpp_wctob_l"
        ]
    },
    {
        "filename": "/libcxx/include/__locale_dir/locale_base_api/locale_guard.h",
        "new_functions": [],
        "functions": [
            "None|__libcpp_locale_guard|~__libcpp_locale_guard"
        ]
    },
    {
        "filename": "/libcxx/include/__mdspan/mdspan.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__memory/addressof.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__memory/allocation_guard.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__memory/allocator.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__non_trivial_if<true, type-parameter-0-0>",
            "std::_LIBCPP_ABI_NAMESPACE|None|address",
            "std::_LIBCPP_ABI_NAMESPACE|None|allocate",
            "std::_LIBCPP_ABI_NAMESPACE|None|allocator<const type-parameter-0-0>",
            "std::_LIBCPP_ABI_NAMESPACE|None|allocator<type-parameter-0-0>",
            "std::_LIBCPP_ABI_NAMESPACE|None|construct",
            "std::_LIBCPP_ABI_NAMESPACE|None|deallocate",
            "std::_LIBCPP_ABI_NAMESPACE|None|destroy",
            "std::_LIBCPP_ABI_NAMESPACE|None|max_size",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator=="
        ]
    },
    {
        "filename": "/libcxx/include/__memory/allocator_arg_t.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__user_alloc_construct_impl"
        ]
    },
    {
        "filename": "/libcxx/include/__memory/allocator_destructor.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__allocator_destructor<_Alloc>",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()"
        ]
    },
    {
        "filename": "/libcxx/include/__memory/allocator_traits.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|allocate",
            "std::_LIBCPP_ABI_NAMESPACE|None|construct",
            "std::_LIBCPP_ABI_NAMESPACE|None|deallocate",
            "std::_LIBCPP_ABI_NAMESPACE|None|destroy",
            "std::_LIBCPP_ABI_NAMESPACE|None|max_size",
            "std::_LIBCPP_ABI_NAMESPACE|None|select_on_container_copy_construction"
        ]
    },
    {
        "filename": "/libcxx/include/__memory/auto_ptr.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__memory/builtin_new_allocator.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|__builtin_new_allocator|__allocate_bytes",
            "std::_LIBCPP_ABI_NAMESPACE|__builtin_new_allocator|__deallocate_bytes",
            "std::_LIBCPP_ABI_NAMESPACE|__builtin_new_deleter|operator()"
        ]
    },
    {
        "filename": "/libcxx/include/__memory/destruct_n.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|__destruct_n|__destruct_n",
            "std::_LIBCPP_ABI_NAMESPACE|__destruct_n|__incr",
            "std::_LIBCPP_ABI_NAMESPACE|__destruct_n|__process",
            "std::_LIBCPP_ABI_NAMESPACE|__destruct_n|__set",
            "std::_LIBCPP_ABI_NAMESPACE|__destruct_n|operator()"
        ]
    },
    {
        "filename": "/libcxx/include/__memory/pointer_traits.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__call",
            "std::_LIBCPP_ABI_NAMESPACE|None|__to_address",
            "std::_LIBCPP_ABI_NAMESPACE|None|pointer_to"
        ]
    },
    {
        "filename": "/libcxx/include/__memory/ranges_construct_at.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__memory/ranges_uninitialized_algorithms.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__memory/raw_storage_iterator.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|base",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator*",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator++",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator=",
            "std::_LIBCPP_ABI_NAMESPACE|None|raw_storage_iterator<_OutputIterator, _Tp>"
        ]
    },
    {
        "filename": "/libcxx/include/__memory/shared_ptr.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__get_deleter",
            "std::_LIBCPP_ABI_NAMESPACE|None|__libcpp_acquire_load",
            "std::_LIBCPP_ABI_NAMESPACE|None|__libcpp_atomic_refcount_decrement",
            "std::_LIBCPP_ABI_NAMESPACE|None|__libcpp_atomic_refcount_increment",
            "std::_LIBCPP_ABI_NAMESPACE|None|__libcpp_relaxed_load",
            "std::_LIBCPP_ABI_NAMESPACE|None|__shared_ptr_emplace<_Tp, _Alloc>",
            "std::_LIBCPP_ABI_NAMESPACE|None|__shared_ptr_pointer<_Tp, _Dp, _Alloc>",
            "std::_LIBCPP_ABI_NAMESPACE|None|__throw_bad_weak_ptr",
            "std::_LIBCPP_ABI_NAMESPACE|None|allocate_shared",
            "std::_LIBCPP_ABI_NAMESPACE|None|atomic_compare_exchange_strong",
            "std::_LIBCPP_ABI_NAMESPACE|None|atomic_compare_exchange_strong_explicit",
            "std::_LIBCPP_ABI_NAMESPACE|None|atomic_compare_exchange_weak",
            "std::_LIBCPP_ABI_NAMESPACE|None|atomic_compare_exchange_weak_explicit",
            "std::_LIBCPP_ABI_NAMESPACE|None|atomic_exchange_explicit",
            "std::_LIBCPP_ABI_NAMESPACE|None|atomic_is_lock_free",
            "std::_LIBCPP_ABI_NAMESPACE|None|atomic_load_explicit",
            "std::_LIBCPP_ABI_NAMESPACE|None|atomic_store_explicit",
            "std::_LIBCPP_ABI_NAMESPACE|None|dynamic_pointer_cast",
            "std::_LIBCPP_ABI_NAMESPACE|None|enable_shared_from_this<_Tp>",
            "std::_LIBCPP_ABI_NAMESPACE|None|expired",
            "std::_LIBCPP_ABI_NAMESPACE|None|get_deleter",
            "std::_LIBCPP_ABI_NAMESPACE|None|make_shared",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator<",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator<=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator>",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator>=",
            "std::_LIBCPP_ABI_NAMESPACE|None|owner_before",
            "std::_LIBCPP_ABI_NAMESPACE|None|shared_from_this",
            "std::_LIBCPP_ABI_NAMESPACE|None|static_pointer_cast",
            "std::_LIBCPP_ABI_NAMESPACE|None|swap",
            "std::_LIBCPP_ABI_NAMESPACE|None|use_count",
            "std::_LIBCPP_ABI_NAMESPACE|None|weak_from_this",
            "std::_LIBCPP_ABI_NAMESPACE|None|~enable_shared_from_this<_Tp>",
            "std::_LIBCPP_ABI_NAMESPACE|_Storage|_Storage",
            "std::_LIBCPP_ABI_NAMESPACE|__shared_count|__add_shared",
            "std::_LIBCPP_ABI_NAMESPACE|__shared_count|__release_shared",
            "std::_LIBCPP_ABI_NAMESPACE|__shared_count|__shared_count",
            "std::_LIBCPP_ABI_NAMESPACE|__shared_count|use_count",
            "std::_LIBCPP_ABI_NAMESPACE|__shared_weak_count|__add_shared",
            "std::_LIBCPP_ABI_NAMESPACE|__shared_weak_count|__add_weak",
            "std::_LIBCPP_ABI_NAMESPACE|__shared_weak_count|__release_shared",
            "std::_LIBCPP_ABI_NAMESPACE|__shared_weak_count|__shared_weak_count",
            "std::_LIBCPP_ABI_NAMESPACE|__shared_weak_count|use_count",
            "std::_LIBCPP_ABI_NAMESPACE|owner_less|operator()"
        ]
    },
    {
        "filename": "/libcxx/include/__memory/swap_allocator.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__swap_allocator"
        ]
    },
    {
        "filename": "/libcxx/include/__memory/temporary_buffer.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|return_temporary_buffer",
            "std::_LIBCPP_ABI_NAMESPACE|__return_temporary_buffer|operator()"
        ]
    },
    {
        "filename": "/libcxx/include/__memory/uninitialized_algorithms.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__uninitialized_copy",
            "std::_LIBCPP_ABI_NAMESPACE|None|__uninitialized_copy_n",
            "std::_LIBCPP_ABI_NAMESPACE|None|__uninitialized_default_construct",
            "std::_LIBCPP_ABI_NAMESPACE|None|__uninitialized_default_construct_n",
            "std::_LIBCPP_ABI_NAMESPACE|None|__uninitialized_fill",
            "std::_LIBCPP_ABI_NAMESPACE|None|__uninitialized_fill_n",
            "std::_LIBCPP_ABI_NAMESPACE|None|__uninitialized_move",
            "std::_LIBCPP_ABI_NAMESPACE|None|__uninitialized_move_n",
            "std::_LIBCPP_ABI_NAMESPACE|None|__uninitialized_value_construct",
            "std::_LIBCPP_ABI_NAMESPACE|None|__uninitialized_value_construct_n",
            "std::_LIBCPP_ABI_NAMESPACE|None|uninitialized_copy",
            "std::_LIBCPP_ABI_NAMESPACE|None|uninitialized_copy_n",
            "std::_LIBCPP_ABI_NAMESPACE|None|uninitialized_default_construct",
            "std::_LIBCPP_ABI_NAMESPACE|None|uninitialized_default_construct_n",
            "std::_LIBCPP_ABI_NAMESPACE|None|uninitialized_fill",
            "std::_LIBCPP_ABI_NAMESPACE|None|uninitialized_fill_n",
            "std::_LIBCPP_ABI_NAMESPACE|None|uninitialized_move",
            "std::_LIBCPP_ABI_NAMESPACE|None|uninitialized_move_n",
            "std::_LIBCPP_ABI_NAMESPACE|None|uninitialized_value_construct",
            "std::_LIBCPP_ABI_NAMESPACE|None|uninitialized_value_construct_n"
        ]
    },
    {
        "filename": "/libcxx/include/__memory/unique_ptr.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|default_delete<_Tp>",
            "std::_LIBCPP_ABI_NAMESPACE|None|default_delete<type-parameter-0-0[]>",
            "std::_LIBCPP_ABI_NAMESPACE|None|get",
            "std::_LIBCPP_ABI_NAMESPACE|None|get_deleter",
            "std::_LIBCPP_ABI_NAMESPACE|None|make_unique",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator bool",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator*",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator->",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator<",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator<=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator>",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator>=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator[]",
            "std::_LIBCPP_ABI_NAMESPACE|None|release",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|None|swap",
            "std::_LIBCPP_ABI_NAMESPACE|None|unique_ptr<_Tp, _Dp>",
            "std::_LIBCPP_ABI_NAMESPACE|None|unique_ptr<type-parameter-0-0[], type-parameter-0-1>",
            "std::_LIBCPP_ABI_NAMESPACE|None|~unique_ptr<_Tp, _Dp>",
            "std::_LIBCPP_ABI_NAMESPACE|None|~unique_ptr<type-parameter-0-0[], type-parameter-0-1>"
        ]
    },
    {
        "filename": "/libcxx/include/__memory/voidify.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__voidify"
        ]
    },
    {
        "filename": "/libcxx/include/__mutex/once_flag.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__execute",
            "std::_LIBCPP_ABI_NAMESPACE|None|call_once"
        ]
    },
    {
        "filename": "/libcxx/include/__numeric/accumulate.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|accumulate"
        ]
    },
    {
        "filename": "/libcxx/include/__numeric/adjacent_difference.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|adjacent_difference"
        ]
    },
    {
        "filename": "/libcxx/include/__numeric/exclusive_scan.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|exclusive_scan"
        ]
    },
    {
        "filename": "/libcxx/include/__numeric/gcd_lcm.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__gcd",
            "std::_LIBCPP_ABI_NAMESPACE|None|gcd",
            "std::_LIBCPP_ABI_NAMESPACE|None|lcm",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()"
        ]
    },
    {
        "filename": "/libcxx/include/__numeric/inclusive_scan.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|inclusive_scan"
        ]
    },
    {
        "filename": "/libcxx/include/__numeric/inner_product.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|inner_product"
        ]
    },
    {
        "filename": "/libcxx/include/__numeric/iota.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__numeric/midpoint.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__numeric/partial_sum.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|partial_sum"
        ]
    },
    {
        "filename": "/libcxx/include/__numeric/reduce.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|reduce"
        ]
    },
    {
        "filename": "/libcxx/include/__numeric/transform_exclusive_scan.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__numeric/transform_inclusive_scan.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|transform_inclusive_scan"
        ]
    },
    {
        "filename": "/libcxx/include/__numeric/transform_reduce.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|transform_reduce"
        ]
    },
    {
        "filename": "/libcxx/include/__random/bernoulli_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|bernoulli_distribution|bernoulli_distribution",
            "std::_LIBCPP_ABI_NAMESPACE|bernoulli_distribution|max",
            "std::_LIBCPP_ABI_NAMESPACE|bernoulli_distribution|min",
            "std::_LIBCPP_ABI_NAMESPACE|bernoulli_distribution|p",
            "std::_LIBCPP_ABI_NAMESPACE|bernoulli_distribution|param",
            "std::_LIBCPP_ABI_NAMESPACE|bernoulli_distribution|reset",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|p",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|param_type"
        ]
    },
    {
        "filename": "/libcxx/include/__random/binomial_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__libcpp_lgamma",
            "std::_LIBCPP_ABI_NAMESPACE|None|binomial_distribution<_IntType>",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|p",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|None|t",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|p",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|param_type",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|t"
        ]
    },
    {
        "filename": "/libcxx/include/__random/cauchy_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|a",
            "std::_LIBCPP_ABI_NAMESPACE|None|b",
            "std::_LIBCPP_ABI_NAMESPACE|None|cauchy_distribution<_RealType>",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|a",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|b",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|param_type"
        ]
    },
    {
        "filename": "/libcxx/include/__random/chi_squared_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|chi_squared_distribution<_RealType>",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|n",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|n",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|param_type"
        ]
    },
    {
        "filename": "/libcxx/include/__random/clamp_to_integral.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__random/discard_block_engine.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|base",
            "std::_LIBCPP_ABI_NAMESPACE|None|discard",
            "std::_LIBCPP_ABI_NAMESPACE|None|discard_block_engine<_Engine, __p, __r>",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|seed"
        ]
    },
    {
        "filename": "/libcxx/include/__random/discrete_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|discrete_distribution<_IntType>",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|probabilities",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|__init",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|probabilities"
        ]
    },
    {
        "filename": "/libcxx/include/__random/exponential_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|exponential_distribution<_RealType>",
            "std::_LIBCPP_ABI_NAMESPACE|None|lambda",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|lambda",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|param_type"
        ]
    },
    {
        "filename": "/libcxx/include/__random/extreme_value_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|a",
            "std::_LIBCPP_ABI_NAMESPACE|None|b",
            "std::_LIBCPP_ABI_NAMESPACE|None|extreme_value_distribution<_RealType>",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|a",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|b",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|param_type"
        ]
    },
    {
        "filename": "/libcxx/include/__random/fisher_f_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|fisher_f_distribution<_RealType>",
            "std::_LIBCPP_ABI_NAMESPACE|None|m",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|n",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|m",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|n",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|param_type"
        ]
    },
    {
        "filename": "/libcxx/include/__random/gamma_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|alpha",
            "std::_LIBCPP_ABI_NAMESPACE|None|beta",
            "std::_LIBCPP_ABI_NAMESPACE|None|gamma_distribution<_RealType>",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|alpha",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|beta",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|param_type"
        ]
    },
    {
        "filename": "/libcxx/include/__random/geometric_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|geometric_distribution<_IntType>",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|p",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|p",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|param_type"
        ]
    },
    {
        "filename": "/libcxx/include/__random/independent_bits_engine.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__lshift",
            "std::_LIBCPP_ABI_NAMESPACE|None|base",
            "std::_LIBCPP_ABI_NAMESPACE|None|discard",
            "std::_LIBCPP_ABI_NAMESPACE|None|independent_bits_engine<_Engine, __w, _UIntType>",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|seed"
        ]
    },
    {
        "filename": "/libcxx/include/__random/is_valid.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__random/linear_congruential_engine.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|discard",
            "std::_LIBCPP_ABI_NAMESPACE|None|linear_congruential_engine<_UIntType, __a, __c, __m>",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|next",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator<<",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|seed"
        ]
    },
    {
        "filename": "/libcxx/include/__random/lognormal_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|lognormal_distribution<_RealType>",
            "std::_LIBCPP_ABI_NAMESPACE|None|m",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator<<",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator>>",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|None|s",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|m",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|param_type",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|s"
        ]
    },
    {
        "filename": "/libcxx/include/__random/mersenne_twister_engine.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__lshift",
            "std::_LIBCPP_ABI_NAMESPACE|None|__rshift",
            "std::_LIBCPP_ABI_NAMESPACE|None|discard",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|seed"
        ]
    },
    {
        "filename": "/libcxx/include/__random/negative_binomial_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|k",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|negative_binomial_distribution<_IntType>",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|p",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|k",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|p",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|param_type"
        ]
    },
    {
        "filename": "/libcxx/include/__random/normal_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|mean",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|normal_distribution<_RealType>",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|None|stddev",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|mean",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|param_type",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|stddev"
        ]
    },
    {
        "filename": "/libcxx/include/__random/piecewise_constant_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|densities",
            "std::_LIBCPP_ABI_NAMESPACE|None|intervals",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|piecewise_constant_distribution<_RealType>",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|__init",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|densities",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|intervals"
        ]
    },
    {
        "filename": "/libcxx/include/__random/piecewise_linear_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|densities",
            "std::_LIBCPP_ABI_NAMESPACE|None|intervals",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|piecewise_linear_distribution<_RealType>",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|densities",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|intervals"
        ]
    },
    {
        "filename": "/libcxx/include/__random/poisson_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|mean",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|poisson_distribution<_IntType>",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|mean",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|param_type"
        ]
    },
    {
        "filename": "/libcxx/include/__random/random_device.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__random/seed_seq.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|seed_seq|_Tp",
            "std::_LIBCPP_ABI_NAMESPACE|seed_seq|generate",
            "std::_LIBCPP_ABI_NAMESPACE|seed_seq|param",
            "std::_LIBCPP_ABI_NAMESPACE|seed_seq|seed_seq",
            "std::_LIBCPP_ABI_NAMESPACE|seed_seq|size"
        ]
    },
    {
        "filename": "/libcxx/include/__random/shuffle_order_engine.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__eval",
            "std::_LIBCPP_ABI_NAMESPACE|None|__eval2",
            "std::_LIBCPP_ABI_NAMESPACE|None|__evalf",
            "std::_LIBCPP_ABI_NAMESPACE|None|__init",
            "std::_LIBCPP_ABI_NAMESPACE|None|base",
            "std::_LIBCPP_ABI_NAMESPACE|None|discard",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|seed",
            "std::_LIBCPP_ABI_NAMESPACE|None|shuffle_order_engine<_Engine, __k>"
        ]
    },
    {
        "filename": "/libcxx/include/__random/student_t_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|n",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|None|student_t_distribution<_RealType>",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|n",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|param_type"
        ]
    },
    {
        "filename": "/libcxx/include/__random/subtract_with_carry_engine.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|discard",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|subtract_with_carry_engine<_UIntType, __w, __s, __r>"
        ]
    },
    {
        "filename": "/libcxx/include/__random/uniform_real_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|a",
            "std::_LIBCPP_ABI_NAMESPACE|None|b",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|None|uniform_real_distribution<_RealType>",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|a",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|b",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|param_type"
        ]
    },
    {
        "filename": "/libcxx/include/__random/weibull_distribution.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|a",
            "std::_LIBCPP_ABI_NAMESPACE|None|b",
            "std::_LIBCPP_ABI_NAMESPACE|None|max",
            "std::_LIBCPP_ABI_NAMESPACE|None|min",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator!=",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator==",
            "std::_LIBCPP_ABI_NAMESPACE|None|param",
            "std::_LIBCPP_ABI_NAMESPACE|None|reset",
            "std::_LIBCPP_ABI_NAMESPACE|None|weibull_distribution<_RealType>",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|a",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|b",
            "std::_LIBCPP_ABI_NAMESPACE|param_type|param_type"
        ]
    },
    {
        "filename": "/libcxx/include/__ranges/join_view.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__string/char_traits.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__do_string_hash",
            "std::_LIBCPP_ABI_NAMESPACE|None|__str_find",
            "std::_LIBCPP_ABI_NAMESPACE|None|__str_find_first_not_of",
            "std::_LIBCPP_ABI_NAMESPACE|None|__str_find_first_of",
            "std::_LIBCPP_ABI_NAMESPACE|None|__str_find_last_not_of",
            "std::_LIBCPP_ABI_NAMESPACE|None|__str_find_last_of",
            "std::_LIBCPP_ABI_NAMESPACE|None|__str_rfind",
            "std::_LIBCPP_ABI_NAMESPACE|None|assign",
            "std::_LIBCPP_ABI_NAMESPACE|None|copy",
            "std::_LIBCPP_ABI_NAMESPACE|None|find",
            "std::_LIBCPP_ABI_NAMESPACE|None|length",
            "std::_LIBCPP_ABI_NAMESPACE|char_traits|assign",
            "std::_LIBCPP_ABI_NAMESPACE|char_traits|copy",
            "std::_LIBCPP_ABI_NAMESPACE|char_traits|move"
        ]
    },
    {
        "filename": "/libcxx/include/__string/extern_template_lists.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__thread/this_thread.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE::this_thread|None|sleep_until",
            "std::_LIBCPP_ABI_NAMESPACE::this_thread|None|yield"
        ]
    },
    {
        "filename": "/libcxx/include/__thread/thread.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__thread_execute",
            "std::_LIBCPP_ABI_NAMESPACE|None|__thread_proxy",
            "std::_LIBCPP_ABI_NAMESPACE|None|get",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator*",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator->",
            "std::_LIBCPP_ABI_NAMESPACE|None|operator<<",
            "std::_LIBCPP_ABI_NAMESPACE|None|swap",
            "std::_LIBCPP_ABI_NAMESPACE|hash|operator()",
            "std::_LIBCPP_ABI_NAMESPACE|thread|get_id",
            "std::_LIBCPP_ABI_NAMESPACE|thread|joinable",
            "std::_LIBCPP_ABI_NAMESPACE|thread|native_handle",
            "std::_LIBCPP_ABI_NAMESPACE|thread|operator=",
            "std::_LIBCPP_ABI_NAMESPACE|thread|swap",
            "std::_LIBCPP_ABI_NAMESPACE|thread|thread"
        ]
    },
    {
        "filename": "/libcxx/include/__thread/timed_backoff_policy.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|__libcpp_timed_backoff_policy|operator()"
        ]
    },
    {
        "filename": "/libcxx/include/__type_traits/integral_constant.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__type_traits/invoke.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__invoke"
        ]
    },
    {
        "filename": "/libcxx/include/__type_traits/is_constant_evaluated.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__type_traits/is_nothrow_constructible.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__type_traits/is_nothrow_convertible.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__type_traits/is_swappable.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__utility/cmp.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/include/__utility/convert_to_integral.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__convert_to_integral"
        ]
    },
    {
        "filename": "/libcxx/include/__utility/exchange.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|exchange"
        ]
    },
    {
        "filename": "/libcxx/include/__utility/integer_sequence.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|size"
        ]
    },
    {
        "filename": "/libcxx/include/__utility/rel_ops.h",
        "new_functions": [],
        "functions": [
            "rel_ops|None|operator!=",
            "rel_ops|None|operator<=",
            "rel_ops|None|operator>",
            "rel_ops|None|operator>="
        ]
    },
    {
        "filename": "/libcxx/include/__utility/swap.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|swap"
        ]
    },
    {
        "filename": "/libcxx/include/__utility/to_underlying.h",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|None|__to_underlying"
        ]
    },
    {
        "filename": "/libcxx/include/stdlib.h",
        "new_functions": [],
        "functions": [
            "None|None|abs",
            "None|None|div"
        ]
    },
    {
        "filename": "/libcxx/include/wchar.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/src/chrono.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/src/condition_variable_destructor.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/src/hash.cpp",
        "new_functions": [],
        "functions": [
            "None|None|__check_for_overflow"
        ]
    },
    {
        "filename": "/libcxx/src/include/atomic_support.h",
        "new_functions": [],
        "functions": [
            "|None|__libcpp_atomic_compare_exchange",
            "|None|__libcpp_atomic_store",
            "|None|__libcpp_relaxed_store"
        ]
    },
    {
        "filename": "/libcxx/src/include/sso_allocator.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/src/include/to_chars_floating_point.h",
        "new_functions": [],
        "functions": [
            "None|None|_Floating_to_chars",
            "None|None|_Floating_to_chars_general_precision",
            "None|None|_Floating_to_chars_hex_precision",
            "None|None|_Floating_to_chars_hex_shortest"
        ]
    },
    {
        "filename": "/libcxx/src/ios.cpp",
        "new_functions": [],
        "functions": [
            "None|None|__ios_new_cap"
        ]
    },
    {
        "filename": "/libcxx/src/iostream.cpp",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|DoIOSInit|DoIOSInit"
        ]
    },
    {
        "filename": "/libcxx/src/locale.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/src/mutex_destructor.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/src/regex.cpp",
        "new_functions": [],
        "functions": [
            "None|None|__get_classname",
            "None|None|__get_collation_name"
        ]
    },
    {
        "filename": "/libcxx/src/std_stream.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/src/strstream.cpp",
        "new_functions": [],
        "functions": [
            "std::_LIBCPP_ABI_NAMESPACE|strstreambuf|seekoff",
            "std::_LIBCPP_ABI_NAMESPACE|strstreambuf|seekpos",
            "std::_LIBCPP_ABI_NAMESPACE|strstreambuf|swap"
        ]
    },
    {
        "filename": "/libcxx/src/support/win32/thread_win32.cpp",
        "new_functions": [],
        "functions": [
            "None|None|__libcpp_condvar_timedwait"
        ]
    },
    {
        "filename": "/libcxx/src/vector.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/libcxx/atomics/atomics.types.generic/atomics.types.float/lockfree.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_left/assert.conversion.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_left/assert.ctor.extents.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_left/assert.index_operator.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_left/assert.stride.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_right/assert.conversion.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_right/assert.ctor.extents.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_right/assert.index_operator.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_right/assert.stride.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_stride/assert.conversion.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_stride/assert.ctor.extents_array.non_unique.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_stride/assert.ctor.extents_array.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_stride/assert.ctor.extents_span.non_unique.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_stride/assert.ctor.extents_span.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_stride/assert.index_operator.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_stride/assert.stride.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/containers/views/mdspan/mdspan/assert.conversion.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/containers/views/mdspan/mdspan/assert.size.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/libcxx/numerics/bit.ops.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/libcxx/ranges/range.adaptors/range.join/segmented_iterator.compile.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/libcxx/selftest/stdin-is-piped.sh.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/libcxx/utilities/memory/ptr.align/assume_aligned.power2.verify.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.copy/ranges.copy.segmented.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.copy/ranges.copy_backward.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.copy/ranges.copy_backward.segmented.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.copy/ranges.copy_n.segmented.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.move/move.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.move/move_backward.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.move/ranges.move.segmented.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.move/ranges.move_backward.segmented.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.random.shuffle/random_shuffle.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_with_iterator"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.replace/pstl.replace.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|operator()"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.replace/pstl.replace_copy.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|operator()"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.replace/pstl.replace_copy_if.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|operator()"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.replace/pstl.replace_if.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|operator()"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.rotate/ranges.rotate_copy.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.transform/ranges.transform.binary.iterator.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_iterators"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.transform/ranges.transform.binary.range.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_iterators"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.transform/ranges.transform.unary.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_iterators"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.unique/ranges_unique_copy.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.count/count.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.ends_with/ranges.ends_with.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_iterators"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.equal/ranges.equal.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_iterators"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.find.end/ranges.find_end.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_iterators"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.foreach/ranges.for_each.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_iterator"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.foreach/ranges.for_each_n.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_iterator"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.search/ranges.search.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_iterators"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.search/ranges.search_n.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_iterators"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.starts_with/ranges.starts_with.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_iterators"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.sorting/alg.heap.operations/sort.heap/ranges_sort_heap.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_complexity"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.sorting/alg.merge/pstl.merge.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|operator()"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.sorting/alg.partitions/ranges.is_partitioned.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_iterators"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.sorting/alg.sort/is.sorted/ranges.is_sorted.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_iterators"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.sorting/alg.sort/is.sorted/ranges.is_sorted_until.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_iterators"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.sorting/alg.three.way/lexicographical_compare_three_way.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_lexicographical_compare"
        ]
    },
    {
        "filename": "/libcxx/test/std/algorithms/alg.sorting/alg.three.way/lexicographical_compare_three_way_comp.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_lexicographical_compare"
        ]
    },
    {
        "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/assign.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main",
            "None|None|test_impl"
        ]
    },
    {
        "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/compare_exchange_strong.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|testBasic",
            "None|None|test_impl"
        ]
    },
    {
        "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/compare_exchange_weak.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main",
            "None|None|testBasic",
            "None|None|test_impl"
        ]
    },
    {
        "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/ctor.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/exchange.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main",
            "None|None|test_impl"
        ]
    },
    {
        "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/fetch_add.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main",
            "None|None|test_impl"
        ]
    },
    {
        "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/fetch_sub.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main",
            "None|None|test_impl"
        ]
    },
    {
        "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/load.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main",
            "None|None|test_impl"
        ]
    },
    {
        "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/lockfree.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/notify_all.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main",
            "None|None|test_impl"
        ]
    },
    {
        "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/notify_one.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main",
            "None|None|test_impl"
        ]
    },
    {
        "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/operator.float.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main",
            "None|None|test_impl"
        ]
    },
    {
        "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/operator.minus_equals.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main",
            "None|None|test_impl"
        ]
    },
    {
        "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/operator.plus_equals.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main",
            "None|None|test_impl"
        ]
    },
    {
        "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/store.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main",
            "None|None|test_impl"
        ]
    },
    {
        "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/test_helper.h",
        "new_functions": [],
        "functions": [
            "None|None|approximately_equals"
        ]
    },
    {
        "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/wait.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main",
            "None|None|test_impl"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/from_range_helpers.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/containers/sequences/deque/deque.modifiers/insert_iter_iter.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/containers/sequences/forwardlist/forwardlist.spec/equal.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/containers/sequences/forwardlist/forwardlist.spec/member_swap.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/containers/sequences/forwardlist/forwardlist.spec/non_member_swap.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/containers/sequences/forwardlist/forwardlist.spec/relational.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/containers/sequences/forwardlist/forwardlist.spec/swap_noexcept.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/containers/sequences/insert_range_sequence_containers.h",
        "new_functions": [],
        "functions": [
            "None|None|test_sequence_insert_range"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/unord/unord.map/eq.different_hash.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|hash_scale"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/unord/unord.multimap/eq.different_hash.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|hash_scale"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/unord/unord.multiset/eq.different_hash.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|hash_scale"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/unord/unord.set/eq.different_hash.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|hash_even",
            "None|None|hash_scale"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/ConvertibleToIntegral.h",
        "new_functions": [],
        "functions": [
            "None|IntTypeNC|operator char",
            "None|IntTypeNC|operator unsigned int",
            "None|IntType|operator signed char",
            "None|IntType|operator unsigned char"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/layout_left/ctor.layout_right.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/layout_left/ctor.layout_stride.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/layout_left/ctor.mapping.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/layout_left/properties.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_layout_mapping_left"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/layout_right/ctor.layout_left.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/layout_right/ctor.layout_stride.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/layout_right/ctor.mapping.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/layout_right/properties.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_layout_mapping_right"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/layout_stride/comparison.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/layout_stride/ctor.strided_mapping.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/layout_stride/deduction.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/layout_stride/index_operator.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|iterate_stride",
            "None|None|test",
            "None|None|test_large"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/layout_stride/is_exhaustive_corner_case.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_layout_mapping_stride"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/layout_stride/properties.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_layout_mapping_stride"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/assign.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|mixin_layout"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.copy.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|mixin_layout"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.default.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|mixin_layout"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.dh_array.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|mixin_layout",
            "None|None|test_mdspan_ctor_array"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.dh_extents.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|mixin_layout",
            "None|None|test_mdspan_types"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.dh_integers.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|mixin_layout"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.dh_map.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_mdspan_types"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.dh_map_acc.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_mdspan_types"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.dh_span.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|mixin_layout",
            "None|None|test_mdspan_ctor_span"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.move.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|mixin_layout"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/mapping.verify.cpp",
        "new_functions": [],
        "functions": [
            "None|None|not_layout_policy"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/move.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|mixin_layout"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/properties.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_mdspan_types"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/swap.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/containers/views/views.span/span.cons/iterator_sentinel.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/depr/depr.c.headers/fenv_h.compile.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/diagnostics/syserr/syserr.errcat/syserr.errcat.objects/generic_category.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/diagnostics/syserr/syserr.errcat/syserr.errcat.objects/system_category.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/experimental/simd/simd.class/simd_ctor_broadcast.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/experimental/simd/simd.class/simd_ctor_conversion.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/experimental/simd/simd.class/simd_ctor_generator.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/experimental/simd/simd.class/simd_subscr.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/experimental/simd/simd.reference/reference_assignment.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/experimental/simd/simd.reference/reference_value_type.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/input.output/file.streams/fstreams/ifstream.members/buffered_reads.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_read",
            "None|None|test_read_codecvt"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/file.streams/fstreams/ofstream.members/buffered_writes.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_write",
            "None|None|test_write_codecvt"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/filesystems/class.path/path.member/path.assign/source.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|RunStringMoveTest"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/filesystems/fs.enum/enum.copy_options.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/filesystems/fs.enum/enum.directory_options.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/filesystems/fs.enum/enum.file_type.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/filesystems/fs.enum/enum.path.format.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/filesystems/fs.enum/enum.perm_options.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/filesystems/fs.enum/enum.perms.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.absolute/absolute.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|basic_test"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.canonical/canonical.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_exception_contains_paths"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.permissions/permissions.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_signatures"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.temp_dir_path/temp_directory_path.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|basic_tests"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/iostream.format/print.fun/no_file_description.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_vprint_nonunicode",
            "None|None|test_vprint_unicode"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/iostream.format/print.fun/vprint_nonunicode.sh.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/iostream.format/print.fun/vprint_unicode.sh.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/iostream.objects/narrow.stream.objects/cin.sh.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/input.output/string.streams/stringbuf/stringbuf.assign/member_swap_noexcept.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|deallocate",
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/string.streams/stringbuf/stringbuf.assign/nonmember_swap_noexcept.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|deallocate",
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/input.output/syncstream/syncbuf/syncstream.syncbuf.assign/swap.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_short_write_after_swap"
        ]
    },
    {
        "filename": "/libcxx/test/std/iterators/iterator.primitives/iterator.traits/cxx20_iterator_traits.compile.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/iterators/iterator.requirements/iterator.cust/iterator.cust.move/iter_move.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/language.support/support.dynamic/destroying_delete_t.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/language.support/support.dynamic/destroying_delete_t_declaration.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/language.support/support.dynamic/new.delete/new.delete.array/new.size.replace.indirect.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|operator new"
        ]
    },
    {
        "filename": "/libcxx/test/std/language.support/support.dynamic/new.delete/new.delete.array/new.size.replace.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|operator new[]"
        ]
    },
    {
        "filename": "/libcxx/test/std/language.support/support.dynamic/new.delete/new.delete.array/new.size_nothrow.replace.indirect.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|operator new[]"
        ]
    },
    {
        "filename": "/libcxx/test/std/language.support/support.dynamic/new.delete/new.delete.single/new.size.replace.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|operator new"
        ]
    },
    {
        "filename": "/libcxx/test/std/language.support/support.dynamic/new.delete/new.delete.single/new.size_align_nothrow.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/language.support/support.dynamic/new.delete/new.delete.single/new.size_nothrow.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/language.support/support.dynamic/new.delete/new.delete.single/new.size_nothrow.replace.indirect.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|operator new"
        ]
    },
    {
        "filename": "/libcxx/test/std/language.support/support.dynamic/nothrow_t.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/language.support/support.dynamic/nothrow_t.verify.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/language.support/support.limits/support.limits.general/latch.version.compile.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/language.support/support.limits/support.limits.general/new.version.compile.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/language.support/support.limits/support.limits.general/semaphore.version.compile.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/language.support/support.limits/support.limits.general/source_location.version.compile.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/language.support/support.limits/support.limits.general/stop_token.version.compile.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/language.support/support.limits/support.limits.general/thread.version.compile.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/language.support/support.limits/support.limits.general/version.version.compile.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/library/description/conventions/customization.point.object/cpo.compile.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/numerics/bit/bit.pow.two/bit_ceil.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/numerics/bit/bit.pow.two/bit_ceil.verify.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/numerics/bit/bit.pow.two/bit_floor.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/numerics/bit/bit.pow.two/bit_width.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/numerics/bit/bit.pow.two/has_single_bit.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/numerics/bit/bitops.count/countl_one.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/numerics/bit/bitops.count/countl_zero.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/numerics/bit/bitops.count/countr_one.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/numerics/bit/bitops.count/countr_zero.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/numerics/bit/bitops.count/popcount.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/numerics/bit/bitops.rot/rotl.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/numerics/bit/bitops.rot/rotr.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/numerics/cfenv/cfenv.syn/cfenv.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/numerics/rand/rand.device/ctor.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/numerics/rand/rand.dist/rand.dist.bern/rand.dist.bern.negbin/eval.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/ranges/iterator_robust_against_adl.compile.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/ranges/range.adaptors/range.chunk.by/range.chunk.by.iter/compare.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/ranges/range.adaptors/range.chunk.by/range.chunk.by.iter/decrement.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/ranges/range.adaptors/range.chunk.by/range.chunk.by.iter/deref.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/ranges/range.adaptors/range.chunk.by/range.chunk.by.iter/increment.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/ranges/range.adaptors/range.elements/general.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/ranges/range.adaptors/range.elements/iterator/base.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/ranges/range.adaptors/range.elements/iterator/deref.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/ranges/range.adaptors/range.elements/iterator/member_types.compile.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/ranges/range.adaptors/range.filter/iterator/arrow.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/ranges/range.factories/range.repeat.view/size.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/ranges/range.utility/range.utility.conv/container.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/re/re.iter/re.regiter/iterator_concept_conformance.compile.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/re/re.iter/re.regiter/types.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/re/re.iter/re.tokiter/iterator_concept_conformance.compile.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/re/re.iter/re.tokiter/types.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.capacity/reserve.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.capacity/reserve_size.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.capacity/shrink_to_fit.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.cons/copy_assignment.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.cons/move_assignment.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.cons/pointer_assignment.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.cons/string_view_assignment.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_append/T_size_size.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_append/push_back.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_append/size_char.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_append/string.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_append/string_size_size.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_append/string_view.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_assign/pointer.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_assign/pointer_size.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_copy/copy.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_insert/iter_char.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_op_plus_equal/char.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_op_plus_equal/pointer.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_op_plus_equal/string.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.nonmembers/string.special/swap.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/basic.string/string.ops/string_substr/substr.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_string"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/string.view/string.view.comparison/equal.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/string.view/string.view.comparison/greater.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/string.view/string.view.comparison/greater_equal.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/string.view/string.view.comparison/less.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/string.view/string.view.comparison/less_equal.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/strings/string.view/string.view.comparison/not_equal.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/thread/thread.mutex/thread.lock/thread.lock.scoped/mutex.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/thread/thread.mutex/thread.lock/types.verify.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/thread/thread.mutex/thread.mutex.requirements/thread.shared_mutex.requirements/thread.shared_mutex.class/default.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/thread/thread.threads/thread.thread.class/thread.thread.constr/F.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|operator new"
        ]
    },
    {
        "filename": "/libcxx/test/std/time/time.cal/time.cal.ym/time.cal.ym.members/plus_minus_equal_month.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/time/time.cal/time.cal.ym/time.cal.ym.nonmembers/minus.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/time/time.cal/time.cal.ym/time.cal.ym.nonmembers/plus.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test_ym_plus_m",
            "None|None|test_ym_plus_y"
        ]
    },
    {
        "filename": "/libcxx/test/std/time/time.cal/time.cal.ymd/time.cal.ymd.members/plus_minus_equal_month.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/time/time.cal/time.cal.ymd/time.cal.ymd.nonmembers/plus.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/time/time.cal/time.cal.ymdlast/time.cal.ymdlast.members/plus_minus_equal_month.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/time/time.cal/time.cal.ymdlast/time.cal.ymdlast.nonmembers/minus.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/time/time.cal/time.cal.ymdlast/time.cal.ymdlast.nonmembers/plus.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/time/time.cal/time.cal.ymwd/time.cal.ymwd.members/plus_minus_equal_month.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/time/time.cal/time.cal.ymwd/time.cal.ymwd.nonmembers/minus.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/time/time.cal/time.cal.ymwd/time.cal.ymwd.nonmembers/plus.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/time/time.cal/time.cal.ymwdlast/time.cal.ymwdlast.members/plus_minus_equal_month.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/time/time.cal/time.cal.ymwdlast/time.cal.ymwdlast.nonmembers/minus.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/time/time.cal/time.cal.ymwdlast/time.cal.ymwdlast.nonmembers/plus.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/time/time.syn/formatter_tests.h",
        "new_functions": [],
        "functions": [
            "None|None|check",
            "None|None|check_exception"
        ]
    },
    {
        "filename": "/libcxx/test/std/utilities/format/format.arguments/format.arg.store/make_format_args.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/utilities/format/format.arguments/format.arg.store/make_format_args.sh.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/utilities/format/format.arguments/format.arg.store/make_wformat_args.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/utilities/format/format.arguments/format.args/ctad.compile.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/utilities/format/format.arguments/format.args/ctor.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/utilities/format/format.formatter/format.context/format.context/arg.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/utilities/format/format.formatter/format.context/format.context/ctor.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/utilities/format/format.formatter/format.context/format.context/locale.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/utilities/format/format.formatter/format.formatter.spec/formatter.string.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|test"
        ]
    },
    {
        "filename": "/libcxx/test/std/utilities/format/format.functions/escaped_output.unicode.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/utilities/function.objects/func.wrap/func.wrap.func/func.wrap.func.con/deduct_F.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/utilities/function.objects/func.wrap/func.wrap.func/func.wrap.func.con/deduct_F.verify.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/utilities/function.objects/func.wrap/func.wrap.func/func.wrap.func.con/deduct_ptr.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/utilities/function.objects/func.wrap/func.wrap.func/noncopyable_return_type.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/utilities/function.objects/refwrap/refwrap.const/type_conv_ctor.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/libcxx/test/std/utilities/memory/util.smartptr/util.smartptr.shared/util.smartptr.shared.create/allocate_shared_for_overwrite.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/utilities/memory/util.smartptr/util.smartptr.shared/util.smartptr.shared.create/make_shared_for_overwrite.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|operator new"
        ]
    },
    {
        "filename": "/libcxx/test/std/utilities/memory/util.smartptr/util.smartptr.shared/util.smartptr.shared.spec/swap.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/utilities/memory/util.smartptr/util.smartptr.weak/util.smartptr.weak.spec/swap.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/utilities/meta/meta.trans/meta.trans.other/common_reference.compile.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/utilities/smartptr/unique.ptr/unique.ptr.class/unique.ptr.observers/op_subscript.runtime.pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/std/utilities/smartptr/unique.ptr/unique.ptr.create/make_unique_for_overwrite.default_init.pass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|operator new"
        ]
    },
    {
        "filename": "/libcxx/test/support/allocators.h",
        "new_functions": [],
        "functions": [
            "None|None|MaybePOCCAAllocator<T, POCCAValue>"
        ]
    },
    {
        "filename": "/libcxx/test/support/concat_macros.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/support/container_debug_tests.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/support/msvc_stdlib_force_include.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/support/test_macros.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/tools/clang_tidy_checks/header_exportable_declarations.cpp",
        "new_functions": [
            "libcpp|None|is_reserved_name"
        ],
        "functions": [
            "clang::tidy|OptionEnumMapping|getEnumMapping",
            "libcpp|None|get_qualified_name",
            "libcpp|None|is_viable_declaration",
            "libcpp|header_exportable_declarations|check",
            "libcpp|header_exportable_declarations|header_exportable_declarations",
            "libcpp|header_exportable_declarations|registerMatchers"
        ]
    },
    {
        "filename": "/libcxx/test/tools/clang_tidy_checks/header_exportable_declarations.hpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/libcxx/test/tools/clang_tidy_checks/uglify_attributes.cpp",
        "new_functions": [],
        "functions": [
            "|None|get_standard_attributes"
        ]
    },
    {
        "filename": "/libcxxabi/src/cxa_personality.cpp",
        "new_functions": [],
        "functions": [
            "__cxxabiv1|None|scan_eh_tab"
        ]
    },
    {
        "filename": "/libcxxabi/src/demangle/DemangleConfig.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lld/COFF/Config.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lld/COFF/Driver.cpp",
        "new_functions": [],
        "functions": [
            "lld::coff|LinkerDriver|linkerMain"
        ]
    },
    {
        "filename": "/lld/COFF/InputFiles.cpp",
        "new_functions": [],
        "functions": [
            "lld::coff|BitcodeFile|parse"
        ]
    },
    {
        "filename": "/lld/COFF/PDB.cpp",
        "new_functions": [],
        "functions": [
            "|PDBLinker|pdbMakeAbsolute"
        ]
    },
    {
        "filename": "/lld/COFF/Writer.cpp",
        "new_functions": [],
        "functions": [
            "|Writer|createECCodeMap",
            "|Writer|createMiscChunks",
            "|Writer|mergeSections",
            "|Writer|run",
            "|Writer|sortExceptionTable",
            "|Writer|sortExceptionTables",
            "|Writer|writeBuildId",
            "|Writer|writeHeader"
        ]
    },
    {
        "filename": "/lld/ELF/Arch/RISCV.cpp",
        "new_functions": [],
        "functions": [
            "None|None|relaxCall"
        ]
    },
    {
        "filename": "/lld/ELF/DWARF.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lld/ELF/InputFiles.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lld/ELF/InputSection.cpp",
        "new_functions": [],
        "functions": [
            "lld::elf|InputSection|relocateNonAlloc"
        ]
    },
    {
        "filename": "/lld/ELF/Relocations.cpp",
        "new_functions": [],
        "functions": [
            "|RelocationScanner|processAux"
        ]
    },
    {
        "filename": "/lld/MachO/InputFiles.cpp",
        "new_functions": [],
        "functions": [
            "lld::macho|ObjFile|sourceFile"
        ]
    },
    {
        "filename": "/lld/MinGW/Driver.cpp",
        "new_functions": [],
        "functions": [
            "lld::mingw|None|link"
        ]
    },
    {
        "filename": "/lld/wasm/Driver.cpp",
        "new_functions": [],
        "functions": [
            "lld::wasm|None|setConfigs"
        ]
    },
    {
        "filename": "/lldb/include/lldb/Core/Address.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/include/lldb/Core/Debugger.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/include/lldb/Core/PluginManager.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/include/lldb/Expression/DiagnosticManager.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/include/lldb/Host/netbsd/HostInfoNetBSD.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/include/lldb/Symbol/Symbol.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/include/lldb/Symbol/SymbolContext.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/include/lldb/Target/Process.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/include/lldb/Utility/Stream.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/source/Commands/CommandCompletions.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/source/Commands/CommandObjectTarget.cpp",
        "new_functions": [],
        "functions": [
            "None|None|DumpAddress",
            "None|None|LookupSymbolInModule"
        ]
    },
    {
        "filename": "/lldb/source/Core/Address.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private|Address|Dump"
        ]
    },
    {
        "filename": "/lldb/source/Core/Debugger.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private|Debugger|Clear"
        ]
    },
    {
        "filename": "/lldb/source/Core/FormatEntity.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private::FormatEntity|None|Format"
        ]
    },
    {
        "filename": "/lldb/source/Core/PluginManager.cpp",
        "new_functions": [],
        "functions": [
            "None|SymbolLocatorInstance|SymbolLocatorInstance",
            "lldb_private|PluginManager|DebuggerInitialize"
        ]
    },
    {
        "filename": "/lldb/source/Host/common/Host.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/source/Host/common/SocketAddress.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private|SocketAddress|GetLength",
            "lldb_private|SocketAddress|SetFamily"
        ]
    },
    {
        "filename": "/lldb/source/Host/netbsd/HostInfoNetBSD.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private|HostInfoNetBSD|GetOSBuildString"
        ]
    },
    {
        "filename": "/lldb/source/Host/netbsd/HostNetBSD.cpp",
        "new_functions": [],
        "functions": [
            "None|None|GetNetBSDProcessCPUType"
        ]
    },
    {
        "filename": "/lldb/source/Host/openbsd/HostInfoOpenBSD.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private|HostInfoOpenBSD|GetOSBuildString",
            "lldb_private|HostInfoOpenBSD|GetOSVersion"
        ]
    },
    {
        "filename": "/lldb/source/Host/posix/DomainSocket.cpp",
        "new_functions": [],
        "functions": [
            "None|None|SetSockAddr"
        ]
    },
    {
        "filename": "/lldb/source/Host/posix/PipePosix.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/source/Initialization/SystemInitializerCommon.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private|SystemInitializerCommon|Initialize"
        ]
    },
    {
        "filename": "/lldb/source/Interpreter/OptionArgParser.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private|OptionArgParser|DoToAddress"
        ]
    },
    {
        "filename": "/lldb/source/Plugins/DynamicLoader/POSIX-DYLD/DYLDRendezvous.cpp",
        "new_functions": [],
        "functions": [
            "None|DYLDRendezvous|SOEntryIsMainExecutable"
        ]
    },
    {
        "filename": "/lldb/source/Plugins/DynamicLoader/POSIX-DYLD/DynamicLoaderPOSIXDYLD.cpp",
        "new_functions": [],
        "functions": [
            "None|DynamicLoaderPOSIXDYLD|CreateInstance"
        ]
    },
    {
        "filename": "/lldb/source/Plugins/Process/MacOSX-Kernel/ProcessKDP.cpp",
        "new_functions": [],
        "functions": [
            "None|ProcessKDP|~ProcessKDP"
        ]
    },
    {
        "filename": "/lldb/source/Plugins/Process/NetBSD/NativeProcessNetBSD.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private::process_netbsd|NativeProcessNetBSD|Halt",
            "lldb_private::process_netbsd|NativeProcessNetBSD|Interrupt"
        ]
    },
    {
        "filename": "/lldb/source/Plugins/Process/NetBSD/NativeProcessNetBSD.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/source/Plugins/Process/Utility/NetBSDSignals.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/source/Plugins/Process/Utility/RegisterContextNetBSD_i386.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/source/Plugins/Process/Utility/RegisterContextNetBSD_x86_64.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/source/Plugins/Process/elf-core/ProcessElfCore.cpp",
        "new_functions": [],
        "functions": [
            "None|ProcessElfCore|~ProcessElfCore"
        ]
    },
    {
        "filename": "/lldb/source/Plugins/Process/gdb-remote/ProcessGDBRemote.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private::process_gdb_remote|ProcessGDBRemote|~ProcessGDBRemote"
        ]
    },
    {
        "filename": "/lldb/source/Plugins/Process/mach-core/ProcessMachCore.cpp",
        "new_functions": [],
        "functions": [
            "None|ProcessMachCore|~ProcessMachCore"
        ]
    },
    {
        "filename": "/lldb/source/Plugins/Process/minidump/ProcessMinidump.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private::minidump|ProcessMinidump|~ProcessMinidump"
        ]
    },
    {
        "filename": "/lldb/source/Plugins/Process/scripted/ScriptedProcess.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private|ScriptedProcess|~ScriptedProcess"
        ]
    },
    {
        "filename": "/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp",
        "new_functions": [
            "None|DWARFASTParserClang|FindConstantOnVariableDefinition"
        ],
        "functions": [
            "None|DWARFASTParserClang|CreateStaticMemberVariable"
        ]
    },
    {
        "filename": "/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/source/Plugins/SymbolFile/DWARF/DWARFDeclContext.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private::plugin::dwarf|DWARFDeclContext|GetQualifiedName"
        ]
    },
    {
        "filename": "/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private::plugin::dwarf|SymbolFileDWARF|FindCompleteObjCDefinitionTypeForDIE",
            "lldb_private::plugin::dwarf|SymbolFileDWARF|FindDefinitionTypeForDWARFDeclContext",
            "lldb_private::plugin::dwarf|SymbolFileDWARF|GetDwpSymbolFile"
        ]
    },
    {
        "filename": "/lldb/source/Symbol/Symbol.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private|Symbol|GetDescription"
        ]
    },
    {
        "filename": "/lldb/source/Symbol/SymbolContext.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private|SymbolContext|DumpStopContext",
            "lldb_private|SymbolContext|GetDescription"
        ]
    },
    {
        "filename": "/lldb/source/Symbol/Variable.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private|Variable|LocationIsValidForFrame"
        ]
    },
    {
        "filename": "/lldb/source/Target/Process.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private|Process|Finalize",
            "lldb_private|Process|Process",
            "lldb_private|Process|SetPrivateState"
        ]
    },
    {
        "filename": "/lldb/source/Target/ProcessTrace.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private|ProcessTrace|~ProcessTrace"
        ]
    },
    {
        "filename": "/lldb/source/Target/StackFrame.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private|StackFrame|GetValueForVariableExpressionPath"
        ]
    },
    {
        "filename": "/lldb/source/Target/Target.cpp",
        "new_functions": [],
        "functions": [
            "lldb_private|Target|DeleteCurrentProcess"
        ]
    },
    {
        "filename": "/lldb/source/Utility/ConstString.cpp",
        "new_functions": [
            "None|Pool|hash"
        ],
        "functions": [
            "None|Pool|GetConstCStringAndSetMangledCounterPart",
            "None|Pool|GetConstCStringWithStringRef",
            "None|Pool|GetMangledCounterpart"
        ]
    },
    {
        "filename": "/lldb/source/Utility/Stream.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/lldb/test/API/api/multithreaded/common.h",
        "new_functions": [],
        "functions": [
            "None|None|get_working_dir"
        ]
    },
    {
        "filename": "/lldb/test/API/tools/lldb-server/thread-name/main.cpp",
        "new_functions": [],
        "functions": [
            "None|None|set_thread_name"
        ]
    },
    {
        "filename": "/lldb/tools/lldb-dap/JSONUtils.cpp",
        "new_functions": [],
        "functions": [
            "lldb_dap|None|CreateStackFrame",
            "lldb_dap|None|CreateVariable"
        ]
    },
    {
        "filename": "/llvm/examples/Kaleidoscope/Chapter8/toy.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/llvm/include/llvm-c/Core.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm-c/LLJIT.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm-c/Types.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ADT/PostOrderIterator.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ADT/SmallString.h",
        "new_functions": [
            "llvm|None|endswith",
            "llvm|None|startswith"
        ],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ADT/SparseBitVector.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ADT/StringMap.h",
        "new_functions": [],
        "functions": [
            "llvm|None|find",
            "llvm|None|try_emplace"
        ]
    },
    {
        "filename": "/llvm/include/llvm/ADT/StringRef.h",
        "new_functions": [
            "llvm|StringRef|endswith_insensitive",
            "llvm|StringRef|startswith_insensitive"
        ],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ADT/bit.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Analysis/BasicAliasAnalysis.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Analysis/DemandedBits.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Analysis/InlineModelFeatureMaps.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Analysis/LazyValueInfo.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Analysis/ObjCARCAnalysisUtils.h",
        "new_functions": [],
        "functions": [
            "llvm::objcarc|None|IsObjCIdentifiedObject"
        ]
    },
    {
        "filename": "/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Analysis/SimplifyQuery.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Analysis/TargetTransformInfo.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Analysis/ValueTracking.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Analysis/VectorUtils.h",
        "new_functions": [],
        "functions": [
            "llvm|VFDatabase|getVFABIMappings",
            "llvm|VFDatabase|getVectorizedFunction",
            "llvm|VFShape|get",
            "llvm|VFShape|getScalarShape"
        ]
    },
    {
        "filename": "/llvm/include/llvm/AsmParser/LLParser.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/AsmParser/LLToken.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/BinaryFormat/ELF.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Bitcode/LLVMBitCodes.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/AccelTable.h",
        "new_functions": [],
        "functions": [
            "llvm|DWARF5AccelTable|getTypeUnitsSymbols"
        ]
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/BasicTTIImpl.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/CallingConvLower.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h",
        "new_functions": [],
        "functions": [
            "llvm|None|addIRPasses",
            "llvm|None|addISelPrepare",
            "llvm|None|addPassesToHandleExceptions",
            "llvm|None|buildPipeline"
        ]
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/FunctionLoweringInfo.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/IndirectThunks.h",
        "new_functions": [],
        "functions": [
            "llvm|None|createThunkFunction",
            "llvm|None|run"
        ]
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/MIRYamlMapping.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/MachineBasicBlock.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/MacroFusion.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/Passes.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/PseudoSourceValue.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/SchedulerRegistry.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/SelectionDAGISel.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/TargetInstrInfo.h",
        "new_functions": [],
        "functions": [
            "llvm|TargetInstrInfo|isTriviallyReMaterializable",
            "llvm|TargetInstrInfo|shouldClusterMemOps"
        ]
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/TargetLowering.h",
        "new_functions": [
            "llvm|TargetLowering|lowerAtomicLoadAsLoadSDNode",
            "llvm|TargetLowering|lowerAtomicStoreAsStoreSDNode"
        ],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/CodeGen/TargetSchedule.h",
        "new_functions": [],
        "functions": [
            "llvm|TargetSchedModel|TargetSchedModel"
        ]
    },
    {
        "filename": "/llvm/include/llvm/DWARFLinkerParallel/StringPool.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/DWP/DWP.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/DebugInfo/CodeView/CodeView.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/DebugInfo/GSYM/ExtractRanges.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/DebugInfo/PDB/Native/FormatUtil.h",
        "new_functions": [],
        "functions": [
            "llvm::pdb|None|formatUnknownEnum"
        ]
    },
    {
        "filename": "/llvm/include/llvm/Debuginfod/Debuginfod.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h",
        "new_functions": [],
        "functions": [
            "llvm::jitlink::aarch64|None|createPointerJumpStubBlock"
        ]
    },
    {
        "filename": "/llvm/include/llvm/ExecutionEngine/Orc/CompileOnDemandLayer.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ExecutionEngine/Orc/EPCDebugObjectRegistrar.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ExecutionEngine/Orc/ExecutionUtils.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ExecutionEngine/Orc/Shared/ObjectFormats.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ExecutionEngine/Orc/Shared/OrcRTBridge.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ExecutionEngine/Orc/SpeculateAnalyses.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Frontend/HLSL/HLSLResource.h",
        "new_functions": [],
        "functions": [
            "llvm::hlsl|FrontendResource|FrontendResource"
        ]
    },
    {
        "filename": "/llvm/include/llvm/Frontend/Offloading/Utility.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/IR/BasicBlock.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/IR/Constants.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/IR/DebugInfo.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/IR/DebugProgramInstruction.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/IR/DerivedTypes.h",
        "new_functions": [
            "llvm|PointerType|getWithSamePointeeType",
            "llvm|PointerType|hasSameElementTypeAs",
            "llvm|PointerType|isOpaque",
            "llvm|PointerType|isOpaqueOrPointeeTypeMatches"
        ],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/IR/Dominators.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/IR/GetElementPtrTypeIterator.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/IR/GlobalObject.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/IR/GlobalVariable.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/IR/IRBuilder.h",
        "new_functions": [
            "llvm|IRBuilderBase|getInt8PtrTy"
        ],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/IR/InstrTypes.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/IR/IntrinsicInst.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/IR/ModuleSummaryIndex.h",
        "new_functions": [],
        "functions": [
            "llvm|CalleeInfo|CalleeInfo"
        ]
    },
    {
        "filename": "/llvm/include/llvm/IR/OperandTraits.h",
        "new_functions": [],
        "functions": [
            "llvm|None|op_begin",
            "llvm|None|op_end"
        ]
    },
    {
        "filename": "/llvm/include/llvm/IR/PatternMatch.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/IR/ReplaceConstant.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/IRReader/IRReader.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/MC/MCAsmBackend.h",
        "new_functions": [],
        "functions": [
            "llvm|MCAsmBackend|evaluateTargetFixup",
            "llvm|MCAsmBackend|shouldForceRelocation"
        ]
    },
    {
        "filename": "/llvm/include/llvm/MC/MCAssembler.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/MC/MCInstrItineraries.h",
        "new_functions": [],
        "functions": [
            "llvm|InstrItineraryData|getOperandCycle",
            "llvm|InstrItineraryData|getOperandLatency"
        ]
    },
    {
        "filename": "/llvm/include/llvm/MC/MCSchedule.h",
        "new_functions": [
            "llvm|MCSchedModel|GetDefaultSchedModel"
        ],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/MC/MCSectionCOFF.h",
        "new_functions": [],
        "functions": [
            "llvm|MCSectionCOFF|isImplicitlyDiscardable"
        ]
    },
    {
        "filename": "/llvm/include/llvm/MC/MCSectionXCOFF.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/MC/MCSymbolXCOFF.h",
        "new_functions": [],
        "functions": [
            "llvm|MCSymbolXCOFF|hasRename",
            "llvm|MCSymbolXCOFF|setSymbolTableName"
        ]
    },
    {
        "filename": "/llvm/include/llvm/MC/MCXCOFFStreamer.h",
        "new_functions": [
            "llvm|MCXCOFFStreamer|emitXCOFFRenameDirective"
        ],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ObjCopy/ELF/ELFConfig.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Object/ELF.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Object/ELFObjectFile.h",
        "new_functions": [],
        "functions": [
            "llvm::object|None|getSymbolFlags",
            "llvm::object|None|isDebugSection"
        ]
    },
    {
        "filename": "/llvm/include/llvm/Object/ELFTypes.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Object/XCOFFObjectFile.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/ObjectYAML/ELFYAML.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Option/Option.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Passes/PassBuilder.h",
        "new_functions": [],
        "functions": [
            "llvm|None|parseAnalysisUtilityPasses"
        ]
    },
    {
        "filename": "/llvm/include/llvm/ProfileData/SampleProf.h",
        "new_functions": [],
        "functions": [
            "llvm::sampleprof|SampleContext|SampleContext"
        ]
    },
    {
        "filename": "/llvm/include/llvm/Support/Automaton.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Support/Compiler.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Support/GenericDomTreeConstruction.h",
        "new_functions": [],
        "functions": [
            "llvm::DomTreeBuilder|None|doFullDFSWalk",
            "llvm::DomTreeBuilder|None|runDFS",
            "llvm::DomTreeBuilder|None|runSemiNCA"
        ]
    },
    {
        "filename": "/llvm/include/llvm/Support/LLVMDriver.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Support/TypeSize.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/TableGen/Parser.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Target/CGPassBuilderOption.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/TargetParser/AArch64TargetParser.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/TargetParser/RISCVTargetParser.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/TextAPI/Symbol.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Transforms/HipStdPar/HipStdPar.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Transforms/IPO.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Transforms/IPO/Attributor.h",
        "new_functions": [],
        "functions": [
            "llvm|Attributor|emitRemark"
        ]
    },
    {
        "filename": "/llvm/include/llvm/Transforms/IPO/BlockExtractor.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h",
        "new_functions": [
            "llvm|EmbedBitcodeOptions|EmbedBitcodeOptions"
        ],
        "functions": [
            "llvm|EmbedBitcodePass|EmbedBitcodePass"
        ]
    },
    {
        "filename": "/llvm/include/llvm/Transforms/IPO/MemProfContextDisambiguation.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Transforms/IPO/ProfiledCallGraph.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h",
        "new_functions": [],
        "functions": [
            "llvm|InstCombiner|InstCombiner",
            "llvm|InstCombiner|canFreelyInvertAllUsersOf",
            "llvm|InstCombiner|getFreelyInverted",
            "llvm|InstCombiner|isFreeToInvert"
        ]
    },
    {
        "filename": "/llvm/include/llvm/Transforms/Instrumentation.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Transforms/Instrumentation/InstrProfiling.h",
        "new_functions": [
            "llvm|InstrProfiling|InstrProfiling",
            "llvm|PerFunctionProfileData|PerFunctionProfileData"
        ],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Transforms/Instrumentation/MemProfiler.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Transforms/Scalar/Reassociate.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Transforms/Scalar/Scalarizer.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Transforms/Scalar/SimpleLoopUnswitch.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/Transforms/Utils/ValueMapper.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/include/llvm/XRay/BlockVerifier.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Analysis/AliasSetTracker.cpp",
        "new_functions": [],
        "functions": [
            "llvm|AliasSetTracker|getAliasSetFor"
        ]
    },
    {
        "filename": "/llvm/lib/Analysis/BranchProbabilityInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|BranchProbabilityInfo|printEdgeProbability"
        ]
    },
    {
        "filename": "/llvm/lib/Analysis/CaptureTracking.cpp",
        "new_functions": [],
        "functions": [
            "llvm|None|DetermineUseCaptureKind"
        ]
    },
    {
        "filename": "/llvm/lib/Analysis/IVDescriptors.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Analysis/InstructionSimplify.cpp",
        "new_functions": [],
        "functions": [
            "None|None|isDivZero",
            "None|None|simplifyAndInst",
            "None|None|simplifyDiv",
            "None|None|simplifyDivRem",
            "None|None|simplifyICmpWithBinOpOnLHS",
            "None|None|simplifyICmpWithZero",
            "None|None|simplifyLShrInst",
            "None|None|simplifyRightShift",
            "None|None|simplifyShift",
            "None|None|simplifySubInst",
            "None|None|simplifyWithOpReplaced"
        ]
    },
    {
        "filename": "/llvm/lib/Analysis/LazyValueInfo.cpp",
        "new_functions": [
            "None|None|getConstantRangeOrFull",
            "None|None|getValueFromConditionImpl"
        ],
        "functions": [
            "None|None|getEdgeValueLocal",
            "None|None|getValueFromCondition",
            "llvm|LazyValueInfoImpl|getEdgeValue",
            "llvm|LazyValueInfoImpl|getRangeFor",
            "llvm|LazyValueInfoImpl|solveBlockValueCast",
            "llvm|LazyValueInfoImpl|solveBlockValueSelect",
            "llvm|LazyValueInfo|getConstantRange",
            "llvm|LazyValueInfo|getConstantRangeAtUse",
            "llvm|LazyValueInfo|getConstantRangeOnEdge"
        ]
    },
    {
        "filename": "/llvm/lib/Analysis/LoopAccessAnalysis.cpp",
        "new_functions": [],
        "functions": [
            "None|None|getDependenceDistanceStrideAndSize",
            "llvm|RuntimePointerChecking|tryToCreateDiffCheck"
        ]
    },
    {
        "filename": "/llvm/lib/Analysis/LoopInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|None|makePostTransformationMetadata"
        ]
    },
    {
        "filename": "/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp",
        "new_functions": [],
        "functions": [
            "None|None|computeFunctionSummary"
        ]
    },
    {
        "filename": "/llvm/lib/Analysis/ScalarEvolution.cpp",
        "new_functions": [],
        "functions": [
            "None|None|MatchBinaryOp",
            "llvm|ScalarEvolution|howManyLessThans"
        ]
    },
    {
        "filename": "/llvm/lib/Analysis/VFABIDemangling.cpp",
        "new_functions": [],
        "functions": [
            "llvm::VFABI|None|tryDemangleForVFABI",
            "|None|tryParseISA"
        ]
    },
    {
        "filename": "/llvm/lib/Analysis/ValueTracking.cpp",
        "new_functions": [],
        "functions": [
            "None|None|computeKnownBitsFromCmp",
            "None|None|computeKnownBitsFromOperator",
            "None|None|computeKnownBitsMul",
            "None|None|isImpliedCondICmps",
            "None|None|isKnownNonNullFromDominatingCondition",
            "None|None|isKnownNonZeroFromOperator",
            "llvm|None|computeKnownBitsFromContext",
            "llvm|None|computeOverflowForSignedSub",
            "llvm|None|computeOverflowForUnsignedSub",
            "llvm|None|haveNoCommonBitsSet"
        ]
    },
    {
        "filename": "/llvm/lib/Analysis/VectorUtils.cpp",
        "new_functions": [],
        "functions": [
            "llvm::VFABI|None|getVectorVariantNames"
        ]
    },
    {
        "filename": "/llvm/lib/AsmParser/LLLexer.cpp",
        "new_functions": [],
        "functions": [
            "llvm|LLLexer|LexIdentifier"
        ]
    },
    {
        "filename": "/llvm/lib/AsmParser/LLParser.cpp",
        "new_functions": [],
        "functions": [
            "llvm|LLParser|addGlobalValueToIndex",
            "llvm|LLParser|convertValIDToValue",
            "llvm|LLParser|parseAliasSummary",
            "llvm|LLParser|parseConstantValue",
            "llvm|LLParser|parseFunctionSummary",
            "llvm|LLParser|parseGVEntry",
            "llvm|LLParser|parseGVReference",
            "llvm|LLParser|parseGlobal",
            "llvm|LLParser|parseOptionalCalls",
            "llvm|LLParser|parseValID",
            "llvm|LLParser|parseVariableSummary"
        ]
    },
    {
        "filename": "/llvm/lib/BinaryFormat/AMDGPUMetadataVerifier.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/BinaryFormat/Magic.cpp",
        "new_functions": [],
        "functions": [
            "None|None|startswith"
        ]
    },
    {
        "filename": "/llvm/lib/Bitcode/Reader/BitcodeReader.cpp",
        "new_functions": [],
        "functions": [
            "|BitcodeReader|parseFunctionBody",
            "|BitcodeReader|parseGlobalVarRecord",
            "|ModuleSummaryIndexBitcodeReader|makeCallList"
        ]
    },
    {
        "filename": "/llvm/lib/Bitcode/Reader/MetadataLoader.cpp",
        "new_functions": [],
        "functions": [
            "llvm|MetadataLoaderImpl|parseOneMetadata"
        ]
    },
    {
        "filename": "/llvm/lib/Bitcode/Reader/ValueList.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp",
        "new_functions": [],
        "functions": [
            "|IndexBitcodeWriter|writeCombinedGlobalValueSummary",
            "|ModuleBitcodeWriterBase|writePerModuleFunctionSummaryRecord",
            "|ModuleBitcodeWriterBase|writePerModuleGlobalValueSummary",
            "|ModuleBitcodeWriter|writeModuleInfo"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp",
        "new_functions": [],
        "functions": [
            "llvm|DWARF5AccelTable|addTypeUnitSymbol",
            "llvm|None|emitDWARF5AccelTable",
            "|Header|Header",
            "|None|Dwarf5AccelTableWriter<DataT>",
            "|None|emitTUList"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp",
        "new_functions": [],
        "functions": [
            "llvm|AsmPrinter|doInitialization"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp",
        "new_functions": [],
        "functions": [
            "None|None|computeAccelTableKind",
            "llvm|DwarfDebug|DwarfDebug",
            "llvm|DwarfDebug|addDwarfTypeUnitType"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp",
        "new_functions": [],
        "functions": [
            "None|None|removeRedundantDbgLocsUsingBackwardScan"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/BasicBlockSectionsProfileReader.cpp",
        "new_functions": [],
        "functions": [
            "llvm|BasicBlockSectionsProfileReader|ReadV0Profile"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/CodeGenPrepare.cpp",
        "new_functions": [],
        "functions": [
            "|CodeGenPrepare|optimizeInst",
            "|CodeGenPrepare|optimizeSelectInst",
            "|CodeGenPrepare|splitLargeGEPOffsets"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/DwarfEHPrepare.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/CodeGen/GCMetadata.cpp",
        "new_functions": [
            "llvm|None|createGCInfoPrinter",
            "|Printer|Printer",
            "|Printer|doFinalization",
            "|Printer|getAnalysisUsage",
            "|Printer|getPassName",
            "|Printer|runOnFunction"
        ],
        "functions": []
    },
    {
        "filename": "/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp",
        "new_functions": [],
        "functions": [
            "llvm|IRTranslator|translateKnownIntrinsic"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp",
        "new_functions": [],
        "functions": [
            "llvm|LegalizerHelper|lower",
            "llvm|LegalizerHelper|lowerDynStackAlloc",
            "llvm|LegalizerHelper|widenScalar"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/GlobalISel/LegalizerInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|LegalityQuery|print"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/GlobalISel/MachineIRBuilder.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/CodeGen/GlobalMerge.cpp",
        "new_functions": [],
        "functions": [
            "|GlobalMerge|doInitialization"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/InlineSpiller.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/CodeGen/InterleavedAccessPass.cpp",
        "new_functions": [
            "|InterleavedAccess|lowerDeinterleaveIntrinsic",
            "|InterleavedAccess|lowerInterleaveIntrinsic",
            "|InterleavedAccess|lowerInterleavedLoad",
            "|InterleavedAccess|lowerInterleavedStore",
            "|InterleavedAccess|replaceBinOpShuffles",
            "|InterleavedAccess|tryReplaceExtracts"
        ],
        "functions": [
            "|InterleavedAccess|runOnFunction"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/JMCInstrumenter.cpp",
        "new_functions": [],
        "functions": [
            "|JMCInstrumenter|runOnModule"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/LiveRangeEdit.cpp",
        "new_functions": [],
        "functions": [
            "llvm|LiveRangeEdit|rematerializeAt"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/MIRParser/MILexer.cpp",
        "new_functions": [],
        "functions": [
            "None|None|maybeLexIRBlock",
            "None|None|maybeLexIRValue",
            "None|None|maybeLexIndex",
            "None|None|maybeLexIndexAndName",
            "None|None|maybeLexMCSymbol",
            "None|None|maybeLexMachineBasicBlock",
            "None|None|maybeLexSubRegisterIndex"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/MIRParser/MIParser.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/CodeGen/MachineCSE.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/CodeGen/MachineFunction.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/CodeGen/MachineOperand.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/CodeGen/MachinePipeliner.cpp",
        "new_functions": [],
        "functions": [
            "llvm|SwingSchedulerDAG|isLoopCarriedDep"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/MachineScheduler.cpp",
        "new_functions": [],
        "functions": [
            "|BaseMemOpClusterMutation|clusterNeighboringMemOps",
            "|BaseMemOpClusterMutation|collectMemOpRecords",
            "|MemOpInfo|MemOpInfo"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/MachineVerifier.cpp",
        "new_functions": [],
        "functions": [
            "|MachineVerifier|verifyPreISelGenericInstruction"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/MacroFusion.cpp",
        "new_functions": [],
        "functions": [
            "llvm|None|createBranchMacroFusionDAGMutation",
            "llvm|None|createMacroFusionDAGMutation",
            "|MacroFusion|MacroFusion"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/PseudoSourceValue.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/CodeGen/RegAllocFast.cpp",
        "new_functions": [],
        "functions": [
            "|RegAllocFast|allocateInstruction",
            "|RegAllocFast|useVirtReg"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/RegisterCoalescer.cpp",
        "new_functions": [],
        "functions": [
            "|RegisterCoalescer|eliminateUndefCopy"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/SafeStack.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/CodeGen/SanitizerBinaryMetadata.cpp",
        "new_functions": [],
        "functions": [
            "|MachineSanitizerBinaryMetadata|runOnMachineFunction"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/SelectOptimize.cpp",
        "new_functions": [
            "|SelectOptimize|checkLoopHeuristics",
            "|SelectOptimize|collectSelectGroups",
            "|SelectOptimize|computeInstCost",
            "|SelectOptimize|computeLoopCosts",
            "|SelectOptimize|convertProfitableSIGroups",
            "|SelectOptimize|findProfitableSIGroupsBase",
            "|SelectOptimize|findProfitableSIGroupsInnerLoops",
            "|SelectOptimize|getExclBackwardsSlice",
            "|SelectOptimize|getMispredictionCost",
            "|SelectOptimize|getPredictedPathCost",
            "|SelectOptimize|getSIset",
            "|SelectOptimize|hasExpensiveColdOperand",
            "|SelectOptimize|isConvertToBranchProfitableBase",
            "|SelectOptimize|isSelectHighlyPredictable",
            "|SelectOptimize|isSelectKindSupported",
            "|SelectOptimize|optimizeSelects",
            "|SelectOptimize|optimizeSelectsBase",
            "|SelectOptimize|optimizeSelectsInnerLoops"
        ],
        "functions": [
            "None|None|initializeSelectOptimizePassOnce",
            "|SelectOptimize|getAnalysisUsage",
            "|SelectOptimize|runOnFunction"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp",
        "new_functions": [],
        "functions": [
            "|DAGCombiner|replaceStoreOfFPConstant",
            "|DAGCombiner|visitEXTRACT_VECTOR_ELT"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp",
        "new_functions": [],
        "functions": [
            "None|None|getPreferredExtendForValue",
            "llvm|FunctionLoweringInfo|clear"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp",
        "new_functions": [],
        "functions": [
            "|SelectionDAGLegalize|OptimizeFloatStore"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp",
        "new_functions": [],
        "functions": [
            "llvm|DAGTypeLegalizer|SoftPromoteHalfResult"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp",
        "new_functions": [],
        "functions": [
            "llvm|DAGTypeLegalizer|ExpandIntOp_STORE",
            "llvm|DAGTypeLegalizer|ExpandIntRes_LOAD"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp",
        "new_functions": [],
        "functions": [
            "llvm|ScheduleDAGSDNodes|computeOperandLatency"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp",
        "new_functions": [],
        "functions": [
            "llvm|SelectionDAGBuilder|visitAtomicLoad",
            "llvm|SelectionDAGBuilder|visitAtomicStore",
            "llvm|SelectionDAGBuilder|visitDbgInfo",
            "llvm|SelectionDAGBuilder|visitIntrinsicCall"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp",
        "new_functions": [],
        "functions": [
            "None|None|CheckChildType",
            "None|None|CheckCondCode",
            "None|None|CheckOpcode",
            "None|None|CheckType",
            "None|None|CheckValueType",
            "None|None|IsPredicateKnownToFail",
            "None|None|processDbgDeclares",
            "llvm|SelectionDAGISel|MorphNode",
            "llvm|SelectionDAGISel|SelectCodeCommon"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/SjLjEHPrepare.cpp",
        "new_functions": [
            "|SjLjEHPrepare|getAnalysisUsage",
            "|SjLjEHPrepare|insertCallSiteStore",
            "|SjLjEHPrepare|lowerAcrossUnwindEdges",
            "|SjLjEHPrepare|lowerIncomingArguments",
            "|SjLjEHPrepare|setupEntryBlockAndCallSites",
            "|SjLjEHPrepare|setupFunctionContext",
            "|SjLjEHPrepare|substituteLPadValues"
        ],
        "functions": [
            "|SjLjEHPrepare|SjLjEHPrepare",
            "|SjLjEHPrepare|doInitialization",
            "|SjLjEHPrepare|runOnFunction"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/StackColoring.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/CodeGen/StackSlotColoring.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/CodeGen/TargetInstrInfo.cpp",
        "new_functions": [],
        "functions": [
            "None|None|foldInlineAsmMemOperand",
            "llvm|TargetInstrInfo|getOperandLatency",
            "llvm|TargetInstrInfo|hasLowDefLatency"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp",
        "new_functions": [],
        "functions": [
            "None|None|calcUniqueIDUpdateFlagsAndSize",
            "None|None|getELFKindForNamedSection",
            "None|None|getELFSectionType",
            "llvm|TargetLoweringObjectFileELF|getSectionForMachineBasicBlock",
            "llvm|TargetLoweringObjectFileXCOFF|getEHInfoTableSymbol",
            "llvm|TargetLoweringObjectFileXCOFF|getSectionForTOCEntry"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/TargetPassConfig.cpp",
        "new_functions": [],
        "functions": [
            "llvm|None|getCGPassBuilderOption",
            "llvm|TargetPassConfig|addMachinePasses"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/TargetSchedule.cpp",
        "new_functions": [],
        "functions": [
            "llvm|TargetSchedModel|computeOperandLatency"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/WasmEHPrepare.cpp",
        "new_functions": [
            "|WasmEHPrepare|prepareEHPad",
            "|WasmEHPrepare|prepareEHPads",
            "|WasmEHPrepare|prepareThrows"
        ],
        "functions": [
            "|WasmEHPrepare|doInitialization",
            "|WasmEHPrepare|runOnFunction"
        ]
    },
    {
        "filename": "/llvm/lib/CodeGen/WinEHPrepare.cpp",
        "new_functions": [
            "|WinEHPrepare|cleanupPreparedFunclets",
            "|WinEHPrepare|cloneCommonBlocks",
            "|WinEHPrepare|colorFunclets",
            "|WinEHPrepare|demotePHIsOnFunclets",
            "|WinEHPrepare|doFinalization",
            "|WinEHPrepare|getAnalysisUsage",
            "|WinEHPrepare|insertPHILoads",
            "|WinEHPrepare|insertPHIStore",
            "|WinEHPrepare|insertPHIStores",
            "|WinEHPrepare|prepareExplicitEH",
            "|WinEHPrepare|removeImplausibleInstructions",
            "|WinEHPrepare|replaceUseWithLoad",
            "|WinEHPrepare|verifyPreparedFunclets"
        ],
        "functions": [
            "llvm|None|calculateSEHStateForAsynchEH",
            "|WinEHPrepare|runOnFunction"
        ]
    },
    {
        "filename": "/llvm/lib/DWARFLinker/DWARFLinker.cpp",
        "new_functions": [],
        "functions": [
            "llvm|None|analyzeImportedModule"
        ]
    },
    {
        "filename": "/llvm/lib/DWARFLinkerParallel/DWARFLinkerCompileUnit.cpp",
        "new_functions": [],
        "functions": [
            "llvm::dwarflinker_parallel|CompileUnit|analyzeImportedModule"
        ]
    },
    {
        "filename": "/llvm/lib/DWARFLinkerParallel/DWARFLinkerGlobalData.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/DWARFLinkerParallel/SyntheticTypeNameBuilder.cpp",
        "new_functions": [],
        "functions": [
            "llvm::dwarflinker_parallel|SyntheticTypeNameBuilder|addTypeName"
        ]
    },
    {
        "filename": "/llvm/lib/DWP/DWP.cpp",
        "new_functions": [],
        "functions": [
            "None|None|addAllTypesFromDWP",
            "None|None|addAllTypesFromTypesSection",
            "None|None|sectionOverflowErrorOrWarning",
            "llvm|None|write"
        ]
    },
    {
        "filename": "/llvm/lib/DebugInfo/DWARF/DWARFDie.cpp",
        "new_functions": [],
        "functions": [
            "llvm|DWARFDie|getTypeSize"
        ]
    },
    {
        "filename": "/llvm/lib/DebugInfo/PDB/Native/FormatUtil.cpp",
        "new_functions": [],
        "functions": [
            "llvm::pdb|None|formatTypeLeafKind"
        ]
    },
    {
        "filename": "/llvm/lib/Debuginfod/Debuginfod.cpp",
        "new_functions": [],
        "functions": [
            "llvm|None|getDefaultDebuginfodUrls"
        ]
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/JITLink/ELF_x86_64.cpp",
        "new_functions": [],
        "functions": [
            "llvm::jitlink|None|identifyELFSectionStartAndEndSymbols"
        ]
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/JITLink/MachOLinkGraphBuilder.cpp",
        "new_functions": [],
        "functions": [
            "llvm::jitlink|MachOLinkGraphBuilder|getScope"
        ]
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/Orc/Debugging/DebugInfoSupport.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/Orc/Debugging/DebuggerSupport.cpp",
        "new_functions": [],
        "functions": [
            "llvm::orc|None|enableDebuggerSupport"
        ]
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.cpp",
        "new_functions": [],
        "functions": [
            "|MachODebugObjectSynthesizerBase|isDebugSection"
        ]
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/Orc/ExecutionUtils.cpp",
        "new_functions": [],
        "functions": [
            "llvm::orc|DLLImportDefinitionGenerator|tryToGenerate",
            "llvm::orc|StaticInitGVIterator|isStaticInitGlobal",
            "llvm::orc|StaticLibraryDefinitionGenerator|Create",
            "llvm::orc|StaticLibraryDefinitionGenerator|Load"
        ]
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/Orc/IndirectionUtils.cpp",
        "new_functions": [],
        "functions": [
            "llvm::orc|SymbolLinkagePromoter|operator()"
        ]
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp",
        "new_functions": [
            "|ORCPlatformSupport|ORCPlatformSupport",
            "|ORCPlatformSupport|deinitialize",
            "|ORCPlatformSupport|initialize"
        ],
        "functions": [
            "|GenericLLVMIRPlatformSupport|notifyAdding"
        ]
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp",
        "new_functions": [
            "llvm::orc|MachOPlatform|rt_lookupSymbol",
            "llvm::orc|RtLookupNotifyComplete|RtLookupNotifyComplete",
            "llvm::orc|RtLookupNotifyComplete|operator()",
            "|MachOHeaderMaterializationUnit|MachOHeaderMaterializationUnit",
            "|MachOHeaderMaterializationUnit|addMachOHeader",
            "|MachOHeaderMaterializationUnit|createHeaderBlock",
            "|MachOHeaderMaterializationUnit|createHeaderInterface",
            "|MachOHeaderMaterializationUnit|discard",
            "|MachOHeaderMaterializationUnit|getName",
            "|MachOHeaderMaterializationUnit|materialize"
        ],
        "functions": [
            "llvm::orc|MachOPlatformPlugin|bootstrapPipelineRecordRuntimeFunctions",
            "llvm::orc|MachOPlatformPlugin|modifyPassConfig",
            "llvm::orc|MachOPlatformPlugin|populateObjCRuntimeObject",
            "llvm::orc|MachOPlatformPlugin|registerObjectPlatformSections",
            "llvm::orc|MachOPlatform|Create",
            "llvm::orc|MachOPlatform|MachOPlatform",
            "llvm::orc|MachOPlatform|associateRuntimeSupportFunctions",
            "llvm::orc|MachOPlatform|setupJITDylib",
            "|MachOPlatformCompleteBootstrapMaterializationUnit|MachOPlatformCompleteBootstrapMaterializationUnit",
            "|MachOPlatformCompleteBootstrapMaterializationUnit|materialize"
        ]
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/Orc/ObjectFileInterface.cpp",
        "new_functions": [],
        "functions": [
            "llvm::orc|None|getMachOObjectFileSymbolInfo"
        ]
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/Orc/Shared/ObjectFormats.cpp",
        "new_functions": [],
        "functions": [
            "llvm::orc|None|isCOFFInitializerSection"
        ]
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/RuntimeDyld/JITSymbol.cpp",
        "new_functions": [],
        "functions": [
            "llvm|JITSymbolFlags|fromGlobalValue"
        ]
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldCOFF.cpp",
        "new_functions": [],
        "functions": [
            "llvm|RuntimeDyldCOFF|getDLLImportOffset"
        ]
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldChecker.cpp",
        "new_functions": [],
        "functions": [
            "llvm|RuntimeDyldCheckerExprEval|evalDecodeOperand",
            "llvm|RuntimeDyldCheckerExprEval|evalIdentifierExpr",
            "llvm|RuntimeDyldCheckerExprEval|evalLoadExpr",
            "llvm|RuntimeDyldCheckerExprEval|evalNextPC",
            "llvm|RuntimeDyldCheckerExprEval|evalParensExpr",
            "llvm|RuntimeDyldCheckerExprEval|evalSectionAddr",
            "llvm|RuntimeDyldCheckerExprEval|evalSimpleExpr",
            "llvm|RuntimeDyldCheckerExprEval|evalSliceExpr",
            "llvm|RuntimeDyldCheckerExprEval|evalStubOrGOTAddr",
            "llvm|RuntimeDyldCheckerExprEval|getTokenForError",
            "llvm|RuntimeDyldCheckerExprEval|parseBinOpToken",
            "llvm|RuntimeDyldCheckerExprEval|parseNumberString",
            "llvm|RuntimeDyldCheckerImpl|checkAllRulesInBuffer"
        ]
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFAArch64.h",
        "new_functions": [],
        "functions": [
            "llvm|RuntimeDyldCOFFAArch64|processRelocationRef"
        ]
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFI386.h",
        "new_functions": [],
        "functions": [
            "llvm|RuntimeDyldCOFFI386|processRelocationRef"
        ]
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFThumb.h",
        "new_functions": [],
        "functions": [
            "llvm|RuntimeDyldCOFFThumb|processRelocationRef"
        ]
    },
    {
        "filename": "/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFX86_64.h",
        "new_functions": [],
        "functions": [
            "llvm|RuntimeDyldCOFFX86_64|processRelocationRef"
        ]
    },
    {
        "filename": "/llvm/lib/FileCheck/FileCheck.cpp",
        "new_functions": [],
        "functions": [
            "llvm|Pattern|FindRegexVarEnd",
            "llvm|Pattern|parseCallExpr",
            "llvm|Pattern|parseNumericOperand",
            "llvm|Pattern|parseParenExpr",
            "llvm|Pattern|parsePattern"
        ]
    },
    {
        "filename": "/llvm/lib/Frontend/HLSL/HLSLResource.cpp",
        "new_functions": [],
        "functions": [
            "llvm::hlsl|FrontendResource|FrontendResource",
            "llvm::hlsl|FrontendResource|getResourceIndex",
            "llvm::hlsl|FrontendResource|getResourceKind",
            "llvm::hlsl|FrontendResource|getSpace"
        ]
    },
    {
        "filename": "/llvm/lib/Frontend/Offloading/Utility.cpp",
        "new_functions": [],
        "functions": [
            "llvm::offloading|None|emitOffloadingEntry"
        ]
    },
    {
        "filename": "/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp",
        "new_functions": [],
        "functions": [
            "llvm|OpenMPIRBuilder|applyWorkshareLoop",
            "llvm|OpenMPIRBuilder|createAtomicWrite",
            "llvm|OpenMPIRBuilder|createOffloadEntry"
        ]
    },
    {
        "filename": "/llvm/lib/FuzzMutate/FuzzerCLI.cpp",
        "new_functions": [],
        "functions": [
            "llvm|None|handleExecNameEncodedBEOpts",
            "llvm|None|runFuzzerOnInputs"
        ]
    },
    {
        "filename": "/llvm/lib/IR/AsmWriter.cpp",
        "new_functions": [],
        "functions": [
            "None|None|printMetadataIdentifier",
            "llvm|SlotTracker|processIndex",
            "|AssemblyWriter|printFunctionSummary",
            "|AssemblyWriter|printGlobal",
            "|AssemblyWriter|printModuleSummaryIndex"
        ]
    },
    {
        "filename": "/llvm/lib/IR/AutoUpgrade.cpp",
        "new_functions": [],
        "functions": [
            "None|None|ShouldUpgradeNVPTXBF16Intrinsic",
            "None|None|UpgradeIntrinsicFunction1",
            "None|None|UpgradeX86IntrinsicFunction"
        ]
    },
    {
        "filename": "/llvm/lib/IR/BasicBlock.cpp",
        "new_functions": [],
        "functions": [
            "llvm|BasicBlock|flushTerminatorDbgValues",
            "llvm|BasicBlock|spliceDebugInfo",
            "llvm|BasicBlock|spliceDebugInfoEmptyBlock"
        ]
    },
    {
        "filename": "/llvm/lib/IR/Constants.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/IR/ConstantsContext.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/IR/Core.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/IR/DebugInfo.cpp",
        "new_functions": [
            "llvm|None|FindDbgDeclareUses"
        ],
        "functions": [
            "None|None|findDbgIntrinsics",
            "llvm|None|StripDebugInfo",
            "llvm|None|findDbgUsers",
            "llvm|None|findDbgValues"
        ]
    },
    {
        "filename": "/llvm/lib/IR/DebugProgramInstruction.cpp",
        "new_functions": [],
        "functions": [
            "llvm|DPValue|DPValue",
            "llvm|DPValue|createDebugIntrinsic"
        ]
    },
    {
        "filename": "/llvm/lib/IR/EHPersonalities.cpp",
        "new_functions": [],
        "functions": [
            "llvm|None|colorEHFunclets"
        ]
    },
    {
        "filename": "/llvm/lib/IR/Function.cpp",
        "new_functions": [],
        "functions": [
            "None|None|findTargetSubtable",
            "llvm|Function|Function",
            "llvm|Function|updateAfterNameChange"
        ]
    },
    {
        "filename": "/llvm/lib/IR/Globals.cpp",
        "new_functions": [],
        "functions": [
            "llvm|GlobalVariable|copyAttributesFrom"
        ]
    },
    {
        "filename": "/llvm/lib/IR/Instruction.cpp",
        "new_functions": [],
        "functions": [
            "llvm|Instruction|isAssociative",
            "llvm|Instruction|moveBeforeImpl"
        ]
    },
    {
        "filename": "/llvm/lib/IR/LLVMContextImpl.h",
        "new_functions": [
            "llvm|DenseMapAPFloatKeyInfo|getEmptyKey",
            "llvm|DenseMapAPFloatKeyInfo|getHashValue",
            "llvm|DenseMapAPFloatKeyInfo|getTombstoneKey",
            "llvm|DenseMapAPFloatKeyInfo|isEqual"
        ],
        "functions": []
    },
    {
        "filename": "/llvm/lib/IR/Mangler.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/IR/Metadata.cpp",
        "new_functions": [],
        "functions": [
            "llvm|ReplaceableMetadataImpl|getAllDPValueUsers"
        ]
    },
    {
        "filename": "/llvm/lib/IR/PassInstrumentation.cpp",
        "new_functions": [],
        "functions": [
            "llvm|None|isSpecialPass"
        ]
    },
    {
        "filename": "/llvm/lib/IR/Type.cpp",
        "new_functions": [],
        "functions": [
            "None|None|getTargetTypeInfo",
            "llvm|Type|canLosslesslyBitCastTo"
        ]
    },
    {
        "filename": "/llvm/lib/IR/Verifier.cpp",
        "new_functions": [],
        "functions": [
            "|Verifier|verifyFunctionAttrs",
            "|Verifier|visitIntrinsicCall",
            "|Verifier|visitNamedMDNode"
        ]
    },
    {
        "filename": "/llvm/lib/InterfaceStub/IFSHandler.cpp",
        "new_functions": [],
        "functions": [
            "None|None|usesTriple"
        ]
    },
    {
        "filename": "/llvm/lib/LTO/LTOModule.cpp",
        "new_functions": [],
        "functions": [
            "llvm|LTOModule|addDefinedDataSymbol",
            "llvm|LTOModule|isBitcodeForTarget"
        ]
    },
    {
        "filename": "/llvm/lib/Linker/IRMover.cpp",
        "new_functions": [],
        "functions": [
            "|IRLinker|run"
        ]
    },
    {
        "filename": "/llvm/lib/MC/ELFObjectWriter.cpp",
        "new_functions": [],
        "functions": [
            "|ELFObjectWriter|executePostLayoutBinding",
            "|ELFWriter|writeSectionData",
            "|None|isDwoSection"
        ]
    },
    {
        "filename": "/llvm/lib/MC/MCAsmStreamer.cpp",
        "new_functions": [],
        "functions": [
            "|MCAsmStreamer|addExplicitComment"
        ]
    },
    {
        "filename": "/llvm/lib/MC/MCAssembler.cpp",
        "new_functions": [],
        "functions": [
            "llvm|MCAssembler|evaluateFixup",
            "llvm|MCAssembler|fixupNeedsRelaxation",
            "llvm|MCAssembler|handleFixup",
            "llvm|MCAssembler|layout"
        ]
    },
    {
        "filename": "/llvm/lib/MC/MCContext.cpp",
        "new_functions": [],
        "functions": [
            "llvm|MCContext|createSymbol",
            "llvm|MCContext|createXCOFFSymbolImpl",
            "llvm|MCContext|isELFImplicitMergeableSectionNamePrefix"
        ]
    },
    {
        "filename": "/llvm/lib/MC/MCDisassembler/Disassembler.cpp",
        "new_functions": [],
        "functions": [
            "None|None|getItineraryLatency"
        ]
    },
    {
        "filename": "/llvm/lib/MC/MCDwarf.cpp",
        "new_functions": [],
        "functions": [
            "llvm|MCGenDwarfLabelEntry|Make"
        ]
    },
    {
        "filename": "/llvm/lib/MC/MCELFStreamer.cpp",
        "new_functions": [],
        "functions": [
            "llvm|MCELFStreamer|finalizeCGProfileEntry"
        ]
    },
    {
        "filename": "/llvm/lib/MC/MCObjectFileInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|MCObjectFileInfo|initXCOFFMCObjectFileInfo"
        ]
    },
    {
        "filename": "/llvm/lib/MC/MCObjectStreamer.cpp",
        "new_functions": [],
        "functions": [
            "llvm|MCObjectStreamer|emitRelocDirective"
        ]
    },
    {
        "filename": "/llvm/lib/MC/MCParser/AsmLexer.cpp",
        "new_functions": [],
        "functions": [
            "llvm|AsmLexer|AsmLexer",
            "llvm|AsmLexer|LexSingleQuote"
        ]
    },
    {
        "filename": "/llvm/lib/MC/MCParser/AsmParser.cpp",
        "new_functions": [],
        "functions": [
            "|AsmParser|parseStatement"
        ]
    },
    {
        "filename": "/llvm/lib/MC/MCParser/COFFMasmParser.cpp",
        "new_functions": [],
        "functions": [
            "|COFFMasmParser|ParseDirectiveSegment"
        ]
    },
    {
        "filename": "/llvm/lib/MC/MCParser/ELFAsmParser.cpp",
        "new_functions": [],
        "functions": [
            "None|None|allowSectionTypeMismatch",
            "|ELFAsmParser|ParseSectionArguments"
        ]
    },
    {
        "filename": "/llvm/lib/MC/MCParser/MasmParser.cpp",
        "new_functions": [],
        "functions": [
            "|MasmParser|parseDirectiveEcho",
            "|MasmParser|parseStatement"
        ]
    },
    {
        "filename": "/llvm/lib/MC/MCSchedule.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/MC/MCStreamer.cpp",
        "new_functions": [],
        "functions": [
            "llvm|MCStreamer|emitXCOFFRenameDirective"
        ]
    },
    {
        "filename": "/llvm/lib/MC/MCSubtargetInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|MCSubtargetInfo|InitMCProcessorInfo",
            "llvm|MCSubtargetInfo|getSchedModelForCPU"
        ]
    },
    {
        "filename": "/llvm/lib/MC/MCXCOFFStreamer.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/MC/StringTableBuilder.cpp",
        "new_functions": [],
        "functions": [
            "llvm|StringTableBuilder|finalizeStringTable"
        ]
    },
    {
        "filename": "/llvm/lib/MC/WasmObjectWriter.cpp",
        "new_functions": [],
        "functions": [
            "|None|isDwoSection",
            "|WasmObjectWriter|recordRelocation",
            "|WasmObjectWriter|writeOneObject"
        ]
    },
    {
        "filename": "/llvm/lib/MC/WinCOFFObjectWriter.cpp",
        "new_functions": [],
        "functions": [
            "None|None|isDwoSection"
        ]
    },
    {
        "filename": "/llvm/lib/ObjCopy/COFF/COFFObjcopy.cpp",
        "new_functions": [],
        "functions": [
            "llvm::objcopy::coff|None|isDebugSection"
        ]
    },
    {
        "filename": "/llvm/lib/ObjCopy/CommonConfig.cpp",
        "new_functions": [],
        "functions": [
            "llvm::objcopy|NameOrPattern|create"
        ]
    },
    {
        "filename": "/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp",
        "new_functions": [],
        "functions": [
            "None|None|handleArgs",
            "None|None|isAArch64MappingSymbol",
            "None|None|isArmMappingSymbol",
            "None|None|isCompressable",
            "None|None|isDWOSection",
            "None|None|isDebugSection",
            "None|None|replaceAndRemoveSections",
            "None|None|updateAndRemoveSymbols"
        ]
    },
    {
        "filename": "/llvm/lib/ObjCopy/MachO/MachOObject.h",
        "new_functions": [],
        "functions": [
            "llvm::objcopy::macho|SymbolEntry|isSwiftSymbol"
        ]
    },
    {
        "filename": "/llvm/lib/ObjCopy/XCOFF/XCOFFWriter.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/ObjCopy/wasm/WasmObjcopy.cpp",
        "new_functions": [],
        "functions": [
            "llvm::objcopy::wasm|None|isDebugSection",
            "llvm::objcopy::wasm|None|isLinkerSection"
        ]
    },
    {
        "filename": "/llvm/lib/Object/Archive.cpp",
        "new_functions": [],
        "functions": [
            "llvm::object|ArchiveMemberHeader|getName",
            "llvm::object|Archive|Archive",
            "llvm::object|Archive|create",
            "llvm::object|BigArchiveMemberHeader|getRawName",
            "llvm::object|Child|Child"
        ]
    },
    {
        "filename": "/llvm/lib/Object/COFFImportFile.cpp",
        "new_functions": [],
        "functions": [
            "llvm::object|None|getNameType",
            "llvm::object|None|replace"
        ]
    },
    {
        "filename": "/llvm/lib/Object/COFFModuleDefinition.cpp",
        "new_functions": [],
        "functions": [
            "llvm::object|Lexer|lex",
            "llvm::object|None|isDecorated"
        ]
    },
    {
        "filename": "/llvm/lib/Object/COFFObjectFile.cpp",
        "new_functions": [],
        "functions": [
            "llvm::object|COFFObjectFile|getSectionName",
            "llvm::object|COFFObjectFile|isDebugSection"
        ]
    },
    {
        "filename": "/llvm/lib/Object/ELF.cpp",
        "new_functions": [],
        "functions": [
            "llvm::object|None|decodeBBAddrMap",
            "llvm::object|None|getELFSectionTypeName"
        ]
    },
    {
        "filename": "/llvm/lib/Object/ELFObjectFile.cpp",
        "new_functions": [],
        "functions": [
            "None|None|readBBAddrMapImpl"
        ]
    },
    {
        "filename": "/llvm/lib/Object/MachOObjectFile.cpp",
        "new_functions": [],
        "functions": [
            "llvm::object|MachOObjectFile|guessLibraryShortName",
            "llvm::object|MachOObjectFile|isDebugSection"
        ]
    },
    {
        "filename": "/llvm/lib/Object/ModuleSymbolTable.cpp",
        "new_functions": [],
        "functions": [
            "llvm|ModuleSymbolTable|getSymbolFlags"
        ]
    },
    {
        "filename": "/llvm/lib/Object/RecordStreamer.cpp",
        "new_functions": [],
        "functions": [
            "llvm|RecordStreamer|flushSymverDirectives"
        ]
    },
    {
        "filename": "/llvm/lib/Object/RelocationResolver.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Object/WasmObjectFile.cpp",
        "new_functions": [],
        "functions": [
            "llvm::object|WasmObjectFile|parseCustomSection"
        ]
    },
    {
        "filename": "/llvm/lib/ObjectYAML/ELFEmitter.cpp",
        "new_functions": [],
        "functions": [
            "|None|initImplicitHeader"
        ]
    },
    {
        "filename": "/llvm/lib/ObjectYAML/ELFYAML.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/ObjectYAML/XCOFFYAML.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Option/ArgList.cpp",
        "new_functions": [],
        "functions": [
            "llvm::opt|ArgList|GetOrMakeJoinedArgString"
        ]
    },
    {
        "filename": "/llvm/lib/Option/OptTable.cpp",
        "new_functions": [],
        "functions": [
            "None|None|isInput",
            "None|None|matchOption",
            "None|None|optionMatches",
            "llvm::opt|OptTable|findByPrefix",
            "llvm::opt|OptTable|suggestValueCompletions"
        ]
    },
    {
        "filename": "/llvm/lib/Passes/PassBuilder.cpp",
        "new_functions": [
            "|None|parseEmbedBitcodePassOptions"
        ],
        "functions": [
            "None|None|checkParametrizedPassName",
            "None|None|startsWithDefaultPipelineAliasPrefix"
        ]
    },
    {
        "filename": "/llvm/lib/Passes/PassBuilderPipelines.cpp",
        "new_functions": [],
        "functions": [
            "llvm|PassBuilder|addPGOInstrPasses",
            "llvm|PassBuilder|addPGOInstrPassesForO0",
            "llvm|PassBuilder|buildFatLTODefaultPipeline"
        ]
    },
    {
        "filename": "/llvm/lib/Passes/StandardInstrumentations.cpp",
        "new_functions": [],
        "functions": [
            "llvm|VerifyInstrumentation|registerCallbacks"
        ]
    },
    {
        "filename": "/llvm/lib/ProfileData/GCOV.cpp",
        "new_functions": [],
        "functions": [
            "llvm|GCOVFunction|getName"
        ]
    },
    {
        "filename": "/llvm/lib/ProfileData/InstrProf.cpp",
        "new_functions": [],
        "functions": [
            "llvm|None|getFuncNameWithoutPrefix"
        ]
    },
    {
        "filename": "/llvm/lib/ProfileData/InstrProfCorrelator.cpp",
        "new_functions": [],
        "functions": [
            "llvm|None|isDIEOfProbe"
        ]
    },
    {
        "filename": "/llvm/lib/ProfileData/InstrProfReader.cpp",
        "new_functions": [],
        "functions": [
            "llvm|None|extractName",
            "llvm|TextInstrProfReader|readHeader",
            "llvm|TextInstrProfReader|readNextRecord"
        ]
    },
    {
        "filename": "/llvm/lib/ProfileData/ItaniumManglingCanonicalizer.cpp",
        "new_functions": [],
        "functions": [
            "None|None|parseMaybeMangledName",
            "llvm|ItaniumManglingCanonicalizer|addEquivalence"
        ]
    },
    {
        "filename": "/llvm/lib/ProfileData/SampleProfReader.cpp",
        "new_functions": [],
        "functions": [
            "None|None|parseMetadata"
        ]
    },
    {
        "filename": "/llvm/lib/ProfileData/SymbolRemappingReader.cpp",
        "new_functions": [],
        "functions": [
            "llvm|SymbolRemappingReader|read"
        ]
    },
    {
        "filename": "/llvm/lib/Remarks/YAMLRemarkParser.cpp",
        "new_functions": [],
        "functions": [
            "llvm::remarks|None|createYAMLParserFromMeta"
        ]
    },
    {
        "filename": "/llvm/lib/Support/ARMBuildAttrs.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Support/CommandLine.cpp",
        "new_functions": [],
        "functions": [
            "|HelpPrinter|printHelp"
        ]
    },
    {
        "filename": "/llvm/lib/Support/Regex.cpp",
        "new_functions": [],
        "functions": [
            "llvm|Regex|match"
        ]
    },
    {
        "filename": "/llvm/lib/Support/SpecialCaseList.cpp",
        "new_functions": [],
        "functions": [
            "llvm|SpecialCaseList|parse"
        ]
    },
    {
        "filename": "/llvm/lib/Support/StringMap.cpp",
        "new_functions": [],
        "functions": [
            "llvm|StringMapImpl|FindKey",
            "llvm|StringMapImpl|LookupBucketFor"
        ]
    },
    {
        "filename": "/llvm/lib/TableGen/JSONBackend.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/TableGen/Main.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp",
        "new_functions": [],
        "functions": [
            "None|None|findScratchNonCalleeSaveRegister",
            "llvm|AArch64FrameLowering|canUseAsPrologue",
            "llvm|AArch64FrameLowering|eliminateCallFramePseudoInstr"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp",
        "new_functions": [],
        "functions": [
            "None|None|shouldTagGlobal"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp",
        "new_functions": [
            "|AArch64DAGToDAGISel|ImmToTile"
        ],
        "functions": [
            "|AArch64DAGToDAGISel|Select"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp",
        "new_functions": [],
        "functions": [
            "None|None|EmitVectorComparison",
            "None|None|createGPRPairNode",
            "llvm|AArch64TargetLowering|AArch64TargetLowering",
            "llvm|AArch64TargetLowering|EmitInstrWithCustomInserter",
            "llvm|AArch64TargetLowering|LowerDYNAMIC_STACKALLOC",
            "llvm|AArch64TargetLowering|LowerWindowsDYNAMIC_STACKALLOC",
            "llvm|AArch64TargetLowering|getTargetNodeName",
            "llvm|AArch64TargetLowering|shouldExpandAtomicRMWInIR"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AArch64/AArch64ISelLowering.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|AArch64InstrInfo|probedStackAlloc",
            "llvm|AArch64InstrInfo|shouldClusterMemOps"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AArch64/AArch64InstrInfo.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AArch64/AArch64MachineFunctionInfo.cpp",
        "new_functions": [],
        "functions": [
            "None|None|ShouldSignWithBKey",
            "llvm|AArch64FunctionInfo|AArch64FunctionInfo"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AArch64/AArch64RegisterInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|AArch64RegisterInfo|getStrictlyReservedRegs"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AArch64/AArch64SLSHardening.cpp",
        "new_functions": [],
        "functions": [
            "|SLSBLRThunkInserter|populateThunk"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AArch64/AArch64Subtarget.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp",
        "new_functions": [
            "|AArch64Operand|addLSLImm3ShifterOperands",
            "|AArch64Operand|isLSLImm3Shift"
        ],
        "functions": [
            "|AArch64AsmParser|MatchAndEmitInstruction",
            "|AArch64AsmParser|parseAuthExpr",
            "|AArch64AsmParser|showMatchError",
            "|AArch64AsmParser|tryParseFPImm"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|AArch64LegalizerInfo|AArch64LegalizerInfo",
            "llvm|AArch64LegalizerInfo|legalizeCustom",
            "llvm|AArch64LegalizerInfo|legalizeIntrinsic"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AsmBackend.cpp",
        "new_functions": [],
        "functions": [
            "|AArch64AsmBackend|shouldForceRelocation"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AArch64/SMEABIPass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPU.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPUArgumentUsageInfo.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp",
        "new_functions": [],
        "functions": [
            "llvm|AMDGPUAsmPrinter|getSIProgramInfo"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPUGlobalISelUtils.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPUHSAMetadataStreamer.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp",
        "new_functions": [],
        "functions": [
            "llvm|None|createIGroupLPDAGMutation",
            "|IGroupLPDAGMutation|IGroupLPDAGMutation",
            "|IGroupLPDAGMutation|initIGLPOpt",
            "|MFMASmallGemmOpt|applyIGLPStrategy",
            "|MFMASmallGemmSingleWaveOpt|applyIGLPStrategy"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp",
        "new_functions": [],
        "functions": [
            "None|AMDGPUDAGToDAGISel|SelectBRCOND",
            "None|None|combineBallotPattern"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp",
        "new_functions": [],
        "functions": [
            "llvm|AMDGPUTargetLowering|AMDGPUTargetLowering",
            "llvm|AMDGPUTargetLowering|LowerOperation",
            "llvm|AMDGPUTargetLowering|ReplaceNodeResults",
            "llvm|AMDGPUTargetLowering|lowerFEXP"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|AMDGPULegalizerInfo|AMDGPULegalizerInfo",
            "llvm|AMDGPULegalizerInfo|legalizeCustom",
            "llvm|AMDGPULegalizerInfo|legalizeFExp"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPULibFunc.cpp",
        "new_functions": [],
        "functions": [
            "|None|eatTerm"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPUMachineFunction.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPURemoveIncompatibleFunctions.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPUSubtarget.cpp",
        "new_functions": [],
        "functions": [
            "llvm|GCNSubtarget|getConstantBusLimit",
            "llvm|GCNSubtarget|getNSAThreshold"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp",
        "new_functions": [],
        "functions": [
            "None|None|mustPreserveGV"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPUTargetObjectFile.cpp",
        "new_functions": [],
        "functions": [
            "llvm|AMDGPUTargetObjectFile|getExplicitSectionGlobal"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|GCNTTIImpl|isReadRegisterSourceOfDivergence"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp",
        "new_functions": [],
        "functions": [
            "None|None|getRegularRegInfo",
            "|AMDGPUAsmParser|ParseInstruction",
            "|AMDGPUAsmParser|getCPolKind",
            "|AMDGPUAsmParser|getConstantBusLimit",
            "|AMDGPUAsmParser|getNSAMaxSize",
            "|AMDGPUAsmParser|parseCPol",
            "|AMDGPUAsmParser|parseCnt",
            "|AMDGPUAsmParser|parseDimId",
            "|AMDGPUAsmParser|parseInterpAttr",
            "|AMDGPUAsmParser|parseMnemonicSuffix",
            "|AMDGPUAsmParser|validateBLGP",
            "|AMDGPUAsmParser|validateCoherencyBits",
            "|AMDGPUAsmParser|validateMIMGAddrSize",
            "|AMDGPUAsmParser|validateMIMGAtomicDMask",
            "|AMDGPUAsmParser|validateMIMGD16",
            "|AMDGPUAsmParser|validateMIMGDataSize",
            "|AMDGPUAsmParser|validateMIMGMSAA",
            "|AMDGPUAsmParser|validateSMEMOffset",
            "|AMDGPUAsmParser|validateVOPDRegBankConstraints"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/Disassembler/AMDGPUDisassembler.cpp",
        "new_functions": [],
        "functions": [
            "None|None|decodeSMEMOffset",
            "llvm|AMDGPUDisassembler|convertEXPInst",
            "llvm|AMDGPUDisassembler|convertMIMGInst",
            "llvm|AMDGPUDisassembler|convertVINTERPInst",
            "llvm|AMDGPUDisassembler|getInstruction",
            "llvm|AMDGPUDisassembler|onSymbolStart"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/Disassembler/AMDGPUDisassembler.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/GCNCreateVOPD.cpp",
        "new_functions": [],
        "functions": [
            "|GCNCreateVOPD|doReplace"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp",
        "new_functions": [
            "None|None|isVALUSPF",
            "llvm|GCNHazardRecognizer|checkBranchHazards",
            "llvm|GCNHazardRecognizer|checkVALUSPFHazards"
        ],
        "functions": [
            "llvm|GCNHazardRecognizer|PreEmitNoopsCommon",
            "llvm|GCNHazardRecognizer|getHazardType"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/GCNRegPressure.cpp",
        "new_functions": [],
        "functions": [
            "llvm|GCNUpwardRPTracker|recede"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/GCNRegPressure.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/GCNSchedStrategy.cpp",
        "new_functions": [],
        "functions": [
            "llvm|GCNSchedStage|initGCNRegion"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/GCNSubtarget.h",
        "new_functions": [
            "llvm|GCNSubtarget|hasGFX926Insts"
        ],
        "functions": [
            "llvm|GCNSubtarget|getNSAMaxSize"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/GCNVOPDUtils.cpp",
        "new_functions": [],
        "functions": [
            "llvm|None|checkVOPDRegConstraints",
            "|VOPDPairingMutation|VOPDPairingMutation"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUAsmBackend.cpp",
        "new_functions": [],
        "functions": [
            "|AMDGPUAsmBackend|shouldForceRelocation"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUInstPrinter.cpp",
        "new_functions": [],
        "functions": [
            "llvm|AMDGPUInstPrinter|printCPol",
            "llvm|AMDGPUInstPrinter|printRegularOperand",
            "llvm|AMDGPUInstPrinter|printVOPDst"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUInstPrinter.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/R600OpenCLImageTypeLoweringPass.cpp",
        "new_functions": [],
        "functions": [
            "|R600OpenCLImageTypeLoweringPass|replaceImageUses"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/SIAnnotateControlFlow.cpp",
        "new_functions": [],
        "functions": [
            "|SIAnnotateControlFlow|closeControlFlow",
            "|SIAnnotateControlFlow|handleLoop",
            "|SIAnnotateControlFlow|handleLoopCondition",
            "|SIAnnotateControlFlow|insertElse",
            "|SIAnnotateControlFlow|openIf"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/SIDefines.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/SIISelLowering.cpp",
        "new_functions": [],
        "functions": [
            "llvm|SITargetLowering|EmitInstrWithCustomInserter",
            "llvm|SITargetLowering|getRegForInlineAsmConstraint",
            "llvm|SITargetLowering|isLegalAddressingMode",
            "llvm|SITargetLowering|isLegalFlatAddressingMode",
            "llvm|SITargetLowering|isLegalGlobalAddressingMode",
            "llvm|SITargetLowering|lowerKernArgParameterPtr"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/SIISelLowering.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/SIInsertHardClauses.cpp",
        "new_functions": [],
        "functions": [
            "|SIInsertHardClauses|runOnMachineFunction"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp",
        "new_functions": [
            "llvm|SIInstrInfo|splitScalar64BitAddSub"
        ],
        "functions": [
            "llvm|SIInstrInfo|moveToVALUImpl",
            "llvm|SIInstrInfo|shouldClusterMemOps"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/SIInstrInfo.h",
        "new_functions": [],
        "functions": [
            "llvm|SIInstrInfo|isVMEM"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/SIMachineFunctionInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|SIMachineFunctionInfo|getScavengeFI",
            "llvm|SIMachineFunctionInfo|mayUseAGPRs"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|SIRegisterInfo|buildSpillLoadStore",
            "llvm|SIRegisterInfo|eliminateFrameIndex",
            "llvm|SIRegisterInfo|getFrameRegister",
            "llvm|SIRegisterInfo|getRegClassForSizeOnBank",
            "llvm|SIRegisterInfo|shouldRealignStack"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/Utils/AMDGPUAsmUtils.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm::AMDGPU::Exp|None|getTgtId",
            "llvm::AMDGPU::IsaInfo|AMDGPUTargetID|setTargetIDFromTargetIDStream",
            "llvm::AMDGPU::IsaInfo|None|getTargetIDSettingFromFeatureString",
            "llvm::AMDGPU::VOPD|InstInfo|getInvalidCompOperandIndex",
            "llvm::AMDGPU|None|getNSAMaxSize",
            "llvm::AMDGPU|None|getSMRDEncodedOffset",
            "llvm::AMDGPU|None|getVOPDFull",
            "llvm::AMDGPU|None|isLegalSMRDEncodedSignedOffset",
            "llvm::AMDGPU|None|isLegalSMRDEncodedUnsignedOffset",
            "llvm::AMDGPU|None|isMAC",
            "llvm::AMDGPU|None|isPermlane16"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.h",
        "new_functions": [],
        "functions": [
            "llvm::AMDGPU::VOPD|InstInfo|hasInvalidOperand"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AMDGPU/Utils/AMDGPUMemoryUtils.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/ARM/ARM.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|ARMBaseInstrInfo|getInstrLatency",
            "llvm|ARMBaseInstrInfo|getLDMDefCycle",
            "llvm|ARMBaseInstrInfo|getOperandLatency",
            "llvm|ARMBaseInstrInfo|getOperandLatencyImpl",
            "llvm|ARMBaseInstrInfo|getSTMUseCycle",
            "llvm|ARMBaseInstrInfo|getVLDMDefCycle",
            "llvm|ARMBaseInstrInfo|getVSTMUseCycle",
            "llvm|ARMBaseInstrInfo|hasLowDefLatency"
        ]
    },
    {
        "filename": "/llvm/lib/Target/ARM/ARMBaseInstrInfo.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/ARM/ARMBasicBlockInfo.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/ARM/ARMHazardRecognizer.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/ARM/ARMISelLowering.cpp",
        "new_functions": [],
        "functions": [
            "None|None|createGPRPairNode",
            "llvm|ARMTargetLowering|getSchedulingPreference"
        ]
    },
    {
        "filename": "/llvm/lib/Target/ARM/ARMMachineFunctionInfo.cpp",
        "new_functions": [],
        "functions": [
            "None|None|GetBranchTargetEnforcement"
        ]
    },
    {
        "filename": "/llvm/lib/Target/ARM/ARMSLSHardening.cpp",
        "new_functions": [],
        "functions": [
            "|SLSBLRThunkInserter|populateThunk"
        ]
    },
    {
        "filename": "/llvm/lib/Target/ARM/ARMSubtarget.cpp",
        "new_functions": [],
        "functions": [
            "llvm|ARMSubtarget|initSubtargetFeatures"
        ]
    },
    {
        "filename": "/llvm/lib/Target/ARM/ARMSubtarget.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/ARM/ARMTargetMachine.cpp",
        "new_functions": [],
        "functions": [
            "None|None|computeTargetABI"
        ]
    },
    {
        "filename": "/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|ARMTTIImpl|isLoweredToCall"
        ]
    },
    {
        "filename": "/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp",
        "new_functions": [],
        "functions": [
            "None|None|doesIgnoreDataTypeSuffix",
            "|ARMAsmParser|ParseInstruction",
            "|ARMAsmParser|getMnemonicAcceptInfo",
            "|ARMAsmParser|isMnemonicVPTPredicable",
            "|ARMAsmParser|parseOperand",
            "|ARMAsmParser|shouldOmitVectorPredicateOperand",
            "|ARMAsmParser|splitMnemonic",
            "|ARMMnemonicSets|isCDEDualRegInstr",
            "|ARMMnemonicSets|isCDEInstr",
            "|ARMMnemonicSets|isITPredicableCDEInstr",
            "|ARMMnemonicSets|isVPTPredicableCDEInstr"
        ]
    },
    {
        "filename": "/llvm/lib/Target/ARM/MCTargetDesc/ARMAsmBackend.cpp",
        "new_functions": [],
        "functions": [
            "llvm|ARMAsmBackend|getFixupKindInfo",
            "llvm|ARMAsmBackend|shouldForceRelocation"
        ]
    },
    {
        "filename": "/llvm/lib/Target/ARM/MCTargetDesc/ARMAsmBackend.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/ARM/MCTargetDesc/ARMELFObjectWriter.cpp",
        "new_functions": [],
        "functions": [
            "|ARMELFObjectWriter|GetRelocTypeInner"
        ]
    },
    {
        "filename": "/llvm/lib/Target/ARM/MCTargetDesc/ARMTargetStreamer.cpp",
        "new_functions": [],
        "functions": [
            "llvm|ARMTargetStreamer|emitTargetAttributes"
        ]
    },
    {
        "filename": "/llvm/lib/Target/ARM/MCTargetDesc/ARMUnwindOpAsm.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/ARM/MCTargetDesc/ARMWinCOFFObjectWriter.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/ARM/Thumb1FrameLowering.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AVR/AVRAsmPrinter.cpp",
        "new_functions": [],
        "functions": [
            "llvm|AVRAsmPrinter|doFinalization"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AVR/AVRFrameLowering.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/AVR/MCTargetDesc/AVRAsmBackend.cpp",
        "new_functions": [],
        "functions": [
            "llvm|AVRAsmBackend|shouldForceRelocation"
        ]
    },
    {
        "filename": "/llvm/lib/Target/AVR/MCTargetDesc/AVRAsmBackend.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/BPF/BPF.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp",
        "new_functions": [
            "|BPFAbstractMemberAccess|getConstant",
            "|BPFAbstractMemberAccess|replaceWithGEP"
        ],
        "functions": [
            "|BPFAbstractMemberAccess|IsPreserveDIAccessIndexCall",
            "|BPFAbstractMemberAccess|removePreserveAccessIndexIntrinsic"
        ]
    },
    {
        "filename": "/llvm/lib/Target/BPF/BPFCORE.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/BPF/BPFCheckAndAdjustIR.cpp",
        "new_functions": [],
        "functions": [
            "|BPFCheckAndAdjustIR|adjustIR",
            "|BPFCheckAndAdjustIR|removeCompareBuiltin",
            "|BPFCheckAndAdjustIR|removePassThroughBuiltin"
        ]
    },
    {
        "filename": "/llvm/lib/Target/BPF/BPFPreserveDIType.cpp",
        "new_functions": [],
        "functions": [
            "|None|BPFPreserveDITypeImpl"
        ]
    },
    {
        "filename": "/llvm/lib/Target/BPF/BPFSubtarget.cpp",
        "new_functions": [],
        "functions": [
            "llvm|BPFSubtarget|BPFSubtarget"
        ]
    },
    {
        "filename": "/llvm/lib/Target/BPF/BPFSubtarget.h",
        "new_functions": [],
        "functions": [
            "llvm|BPFSubtarget|getRegisterInfo"
        ]
    },
    {
        "filename": "/llvm/lib/Target/BPF/BPFTargetMachine.cpp",
        "new_functions": [],
        "functions": [
            "None|None|LLVMInitializeBPFTarget",
            "llvm|BPFTargetMachine|registerPassBuilderCallbacks"
        ]
    },
    {
        "filename": "/llvm/lib/Target/BPF/BTFDebug.cpp",
        "new_functions": [],
        "functions": [
            "llvm|BTFDebug|populateFileContent",
            "llvm|BTFDebug|processGlobals"
        ]
    },
    {
        "filename": "/llvm/lib/Target/BPF/MCTargetDesc/BPFInstPrinter.cpp",
        "new_functions": [],
        "functions": [
            "None|None|printExpr"
        ]
    },
    {
        "filename": "/llvm/lib/Target/BPF/MCTargetDesc/BPFMCTargetDesc.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/CSKY/MCTargetDesc/CSKYAsmBackend.cpp",
        "new_functions": [],
        "functions": [
            "llvm|CSKYAsmBackend|shouldForceRelocation"
        ]
    },
    {
        "filename": "/llvm/lib/Target/CSKY/MCTargetDesc/CSKYAsmBackend.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/DirectX/DXILResource.cpp",
        "new_functions": [],
        "functions": [
            "llvm::dxil|UAVResource|UAVResource",
            "llvm::dxil|UAVResource|parseSourceType"
        ]
    },
    {
        "filename": "/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|HexagonInstrInfo|getOperandLatency"
        ]
    },
    {
        "filename": "/llvm/lib/Target/Hexagon/HexagonInstrInfo.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/Hexagon/HexagonSubtarget.cpp",
        "new_functions": [],
        "functions": [
            "llvm|HexagonSubtarget|adjustSchedDependency",
            "llvm|HexagonSubtarget|initializeSubtargetDependencies",
            "llvm|HexagonSubtarget|restoreLatency"
        ]
    },
    {
        "filename": "/llvm/lib/Target/Hexagon/HexagonTargetMachine.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp",
        "new_functions": [],
        "functions": [
            "llvm|HexagonTargetObjectFile|SelectSectionForGlobal"
        ]
    },
    {
        "filename": "/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonAsmBackend.cpp",
        "new_functions": [],
        "functions": [
            "|HexagonAsmBackend|shouldForceRelocation"
        ]
    },
    {
        "filename": "/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCChecker.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCTargetDesc.cpp",
        "new_functions": [],
        "functions": [
            "|HexagonTargetAsmStreamer|prettyPrintAsm"
        ]
    },
    {
        "filename": "/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCTargetDesc.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/Lanai/AsmParser/LanaiAsmParser.cpp",
        "new_functions": [],
        "functions": [
            "|LanaiAsmParser|ParseInstruction",
            "|LanaiAsmParser|splitMnemonic"
        ]
    },
    {
        "filename": "/llvm/lib/Target/Lanai/LanaiTargetObjectFile.cpp",
        "new_functions": [],
        "functions": [
            "llvm|LanaiTargetObjectFile|isGlobalInSmallSectionImpl"
        ]
    },
    {
        "filename": "/llvm/lib/Target/LoongArch/LoongArchISelDAGToDAG.cpp",
        "new_functions": [],
        "functions": [
            "llvm|LoongArchDAGToDAGISel|Select"
        ]
    },
    {
        "filename": "/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp",
        "new_functions": [],
        "functions": [
            "None|None|performINTRINSIC_WO_CHAINCombine",
            "llvm|LoongArchTargetLowering|EmitInstrWithCustomInserter",
            "llvm|LoongArchTargetLowering|LoongArchTargetLowering",
            "llvm|LoongArchTargetLowering|LowerOperation",
            "llvm|LoongArchTargetLowering|getRegForInlineAsmConstraint"
        ]
    },
    {
        "filename": "/llvm/lib/Target/LoongArch/LoongArchISelLowering.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/LoongArch/MCTargetDesc/LoongArchAsmBackend.cpp",
        "new_functions": [],
        "functions": [
            "llvm|LoongArchAsmBackend|shouldForceRelocation"
        ]
    },
    {
        "filename": "/llvm/lib/Target/LoongArch/MCTargetDesc/LoongArchAsmBackend.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/M68k/AsmParser/M68kAsmParser.cpp",
        "new_functions": [],
        "functions": [
            "None|None|checkRegisterClass",
            "None|None|getRegisterIndex",
            "|M68kAsmParser|parseRegisterName"
        ]
    },
    {
        "filename": "/llvm/lib/Target/M68k/Disassembler/M68kDisassembler.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/M68k/M68kExpandPseudo.cpp",
        "new_functions": [],
        "functions": [
            "|M68kExpandPseudo|ExpandMI"
        ]
    },
    {
        "filename": "/llvm/lib/Target/M68k/MCTargetDesc/M68kMCCodeEmitter.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp",
        "new_functions": [],
        "functions": [
            "|MipsAsmParser|matchACRegisterName",
            "|MipsAsmParser|matchFCCRegisterName",
            "|MipsAsmParser|searchSymbolAlias"
        ]
    },
    {
        "filename": "/llvm/lib/Target/Mips/MCTargetDesc/MipsABIInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|MipsABIInfo|computeTargetABI"
        ]
    },
    {
        "filename": "/llvm/lib/Target/Mips/MCTargetDesc/MipsAsmBackend.cpp",
        "new_functions": [],
        "functions": [
            "llvm|MipsAsmBackend|shouldForceRelocation"
        ]
    },
    {
        "filename": "/llvm/lib/Target/Mips/MCTargetDesc/MipsAsmBackend.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/Mips/Mips16FrameLowering.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/Mips/MipsISelLowering.cpp",
        "new_functions": [],
        "functions": [
            "llvm|MipsTargetLowering|parseRegForInlineAsmConstraint"
        ]
    },
    {
        "filename": "/llvm/lib/Target/Mips/MipsISelLowering.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/Mips/MipsMCInstLower.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/Mips/MipsMachineFunction.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/Mips/MipsOptimizePICCall.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/Mips/MipsSEISelLowering.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/Mips/MipsSubtarget.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp",
        "new_functions": [],
        "functions": [
            "llvm|NVPTXAsmPrinter|printModuleLevelGV"
        ]
    },
    {
        "filename": "/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp",
        "new_functions": [],
        "functions": [
            "|GenericToNVVM|runOnModule"
        ]
    },
    {
        "filename": "/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp",
        "new_functions": [],
        "functions": [
            "llvm|NVPTXTargetLowering|LowerOperation",
            "llvm|NVPTXTargetLowering|NVPTXTargetLowering"
        ]
    },
    {
        "filename": "/llvm/lib/Target/NVPTX/NVPTXISelLowering.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/NVPTX/NVPTXReplaceImageHandles.cpp",
        "new_functions": [],
        "functions": [
            "|NVPTXReplaceImageHandles|findIndexForHandle"
        ]
    },
    {
        "filename": "/llvm/lib/Target/NVPTX/NVPTXSubtarget.cpp",
        "new_functions": [],
        "functions": [
            "llvm|NVPTXSubtarget|NVPTXSubtarget",
            "llvm|NVPTXSubtarget|initializeSubtargetDependencies"
        ]
    },
    {
        "filename": "/llvm/lib/Target/NVPTX/NVPTXSubtarget.h",
        "new_functions": [],
        "functions": [
            "llvm|NVPTXSubtarget|getSmVersion"
        ]
    },
    {
        "filename": "/llvm/lib/Target/PowerPC/AsmParser/PPCAsmParser.cpp",
        "new_functions": [],
        "functions": [
            "|PPCAsmParser|ParseDirective",
            "|PPCAsmParser|ProcessInstruction"
        ]
    },
    {
        "filename": "/llvm/lib/Target/PowerPC/MCTargetDesc/PPCAsmBackend.cpp",
        "new_functions": [],
        "functions": [
            "|PPCAsmBackend|shouldForceRelocation"
        ]
    },
    {
        "filename": "/llvm/lib/Target/PowerPC/MCTargetDesc/PPCELFStreamer.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCAsmInfo.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/PowerPC/MCTargetDesc/PPCPredicates.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/PowerPC/PPC.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp",
        "new_functions": [
            "None|None|hasTLSFlag"
        ],
        "functions": [
            "None|None|getTOCEntryTypeForMO",
            "|PPCAIXAsmPrinter|emitGlobalVariableHelper",
            "|PPCAsmPrinter|emitInstruction"
        ]
    },
    {
        "filename": "/llvm/lib/Target/PowerPC/PPCCTRLoopsVerify.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp",
        "new_functions": [],
        "functions": [
            "llvm|PPCFrameLowering|assignCalleeSavedSpillSlots"
        ]
    },
    {
        "filename": "/llvm/lib/Target/PowerPC/PPCISelLowering.cpp",
        "new_functions": [],
        "functions": [
            "None|None|getLabelAccessInfo",
            "None|None|isValidPCRelNode",
            "llvm|PPCTargetLowering|LowerGlobalAddress",
            "llvm|PPCTargetLowering|LowerGlobalTLSAddressLinux"
        ]
    },
    {
        "filename": "/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp",
        "new_functions": [
            "llvm|PPCInstrInfo|getSerializableBitmaskMachineOperandTargetFlags"
        ],
        "functions": [
            "llvm|PPCInstrInfo|decomposeMachineOperandsTargetFlags",
            "llvm|PPCInstrInfo|getInstrLatency",
            "llvm|PPCInstrInfo|getOperandLatency",
            "llvm|PPCInstrInfo|getSerializableDirectMachineOperandTargetFlags",
            "llvm|PPCInstrInfo|shouldClusterMemOps"
        ]
    },
    {
        "filename": "/llvm/lib/Target/PowerPC/PPCInstrInfo.h",
        "new_functions": [],
        "functions": [
            "llvm|PPCInstrInfo|getOperandLatency"
        ]
    },
    {
        "filename": "/llvm/lib/Target/PowerPC/PPCMCInstLower.cpp",
        "new_functions": [],
        "functions": [
            "None|None|GetSymbolRef"
        ]
    },
    {
        "filename": "/llvm/lib/Target/PowerPC/PPCPreEmitPeephole.cpp",
        "new_functions": [],
        "functions": [
            "|PPCPreEmitPeephole|isGOTPLDpc"
        ]
    },
    {
        "filename": "/llvm/lib/Target/PowerPC/PPCTOCRegDeps.cpp",
        "new_functions": [],
        "functions": [
            "|PPCTOCRegDeps|hasTOCLoReloc"
        ]
    },
    {
        "filename": "/llvm/lib/Target/PowerPC/PPCTargetMachine.cpp",
        "new_functions": [],
        "functions": [
            "None|None|computeTargetABI"
        ]
    },
    {
        "filename": "/llvm/lib/Target/PowerPC/PPCTargetTransformInfo.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp",
        "new_functions": [],
        "functions": [
            "|RISCVAsmParser|RISCVAsmParser"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/GISel/RISCVCallLowering.cpp",
        "new_functions": [],
        "functions": [
            "llvm|RISCVCallLowering|saveVarArgRegisters"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/GISel/RISCVInstructionSelector.cpp",
        "new_functions": [],
        "functions": [
            "|RISCVInstructionSelector|select",
            "|RISCVInstructionSelector|selectAddr"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/GISel/RISCVLegalizerInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|RISCVLegalizerInfo|RISCVLegalizerInfo",
            "llvm|RISCVLegalizerInfo|legalizeCustom",
            "llvm|RISCVLegalizerInfo|legalizeVAStart"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/GISel/RISCVLegalizerInfo.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp",
        "new_functions": [],
        "functions": [
            "llvm|RISCVAsmBackend|evaluateTargetFixup",
            "llvm|RISCVAsmBackend|shouldForceRelocation"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm::RISCVABI|None|computeTargetABI"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCV.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVDeadRegisterDefinitions.cpp",
        "new_functions": [],
        "functions": [
            "|RISCVDeadRegisterDefinitions|RISCVDeadRegisterDefinitions"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVExpandPseudoInsts.cpp",
        "new_functions": [],
        "functions": [
            "|RISCVExpandPseudo|RISCVExpandPseudo",
            "|RISCVExpandPseudo|expandRV32ZdinxStore",
            "|RISCVPreRAExpandPseudo|RISCVPreRAExpandPseudo"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVFoldMasks.cpp",
        "new_functions": [],
        "functions": [
            "|RISCVFoldMasks|RISCVFoldMasks"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp",
        "new_functions": [],
        "functions": [
            "llvm|RISCVFrameLowering|determineCalleeSaves"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVISelLowering.cpp",
        "new_functions": [],
        "functions": [
            "None|None|CC_RISCVAssign2XLen",
            "None|None|matchIndexAsWiderOp",
            "llvm::RISCV|None|CC_RISCV",
            "llvm|RISCVTargetLowering|LowerFormalArguments",
            "llvm|RISCVTargetLowering|allowsMisalignedMemoryAccesses",
            "llvm|RISCVTargetLowering|getOptimalMemOpType",
            "llvm|RISCVTargetLowering|isLegalStridedLoadStore",
            "llvm|RISCVTargetLowering|shouldConvertConstantLoadToIntImm"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVISelLowering.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVInsertReadWriteCSR.cpp",
        "new_functions": [],
        "functions": [
            "|RISCVInsertReadWriteCSR|RISCVInsertReadWriteCSR"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp",
        "new_functions": [],
        "functions": [
            "None|None|computeInfoForInstr",
            "|RISCVInsertVSETVLI|RISCVInsertVSETVLI",
            "|RISCVInsertVSETVLI|transferBefore"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVInsertWriteVXRM.cpp",
        "new_functions": [],
        "functions": [
            "|RISCVInsertWriteVXRM|RISCVInsertWriteVXRM"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|RISCVInstrInfo|getMemOperandWithOffsetWidth",
            "llvm|RISCVInstrInfo|shouldClusterMemOps"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVInstrInfo.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVMacroFusion.cpp",
        "new_functions": [],
        "functions": [
            "None|None|isLUIADDI",
            "None|None|shouldScheduleAdjacent"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVMakeCompressible.cpp",
        "new_functions": [],
        "functions": [
            "|RISCVMakeCompressibleOpt|RISCVMakeCompressibleOpt"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVMergeBaseOffset.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVMoveMerger.cpp",
        "new_functions": [],
        "functions": [
            "|RISCVMoveMerge|RISCVMoveMerge"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp",
        "new_functions": [],
        "functions": [
            "None|None|hasAllNBitUsers",
            "None|None|isSignExtendingOpW",
            "|RISCVOptWInstrs|RISCVOptWInstrs"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVPushPopOptimizer.cpp",
        "new_functions": [],
        "functions": [
            "|RISCVPushPopOpt|RISCVPushPopOpt"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVRVVInitUndef.cpp",
        "new_functions": [
            "|RISCVInitUndef|handleImplicitDef"
        ],
        "functions": [
            "|RISCVInitUndef|RISCVInitUndef",
            "|RISCVInitUndef|processBasicBlock"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVRegisterInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|RISCVRegisterInfo|lowerVRELOAD",
            "llvm|RISCVRegisterInfo|lowerVSPILL"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVSubtarget.h",
        "new_functions": [],
        "functions": [
            "llvm|RISCVSubtarget|hasMacroFusion"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVTargetMachine.cpp",
        "new_functions": [],
        "functions": [
            "llvm|RISCVTargetMachine|getSubtargetImpl",
            "|RISCVPassConfig|addMachineSSAOptimization"
        ]
    },
    {
        "filename": "/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.h",
        "new_functions": [],
        "functions": [
            "llvm|RISCVTTIImpl|isLegalMaskedGatherScatter",
            "llvm|RISCVTTIImpl|isLegalMaskedLoadStore"
        ]
    },
    {
        "filename": "/llvm/lib/Target/SPIRV/SPIRVEmitIntrinsics.cpp",
        "new_functions": [],
        "functions": [
            "|SPIRVEmitIntrinsics|runOnFunction"
        ]
    },
    {
        "filename": "/llvm/lib/Target/SPIRV/SPIRVGlobalRegistry.cpp",
        "new_functions": [],
        "functions": [
            "llvm|SPIRVGlobalRegistry|createSPIRVType"
        ]
    },
    {
        "filename": "/llvm/lib/Target/SPIRV/SPIRVUtils.cpp",
        "new_functions": [],
        "functions": [
            "llvm|None|getTypedPtrEltType"
        ]
    },
    {
        "filename": "/llvm/lib/Target/Sparc/MCTargetDesc/SparcAsmBackend.cpp",
        "new_functions": [],
        "functions": [
            "|SparcAsmBackend|shouldForceRelocation"
        ]
    },
    {
        "filename": "/llvm/lib/Target/SystemZ/AsmParser/SystemZAsmParser.cpp",
        "new_functions": [],
        "functions": [
            "|SystemZAsmParser|parseAddress",
            "|SystemZAsmParser|parseDirective"
        ]
    },
    {
        "filename": "/llvm/lib/Target/SystemZ/MCTargetDesc/SystemZInstPrinter.cpp",
        "new_functions": [],
        "functions": [
            "llvm|SystemZInstPrinter|printAddress"
        ]
    },
    {
        "filename": "/llvm/lib/Target/SystemZ/MCTargetDesc/SystemZMCAsmBackend.cpp",
        "new_functions": [],
        "functions": [
            "|SystemZMCAsmBackend|shouldForceRelocation"
        ]
    },
    {
        "filename": "/llvm/lib/Target/SystemZ/SystemZAsmPrinter.cpp",
        "new_functions": [],
        "functions": [
            "llvm|SystemZAsmPrinter|emitInstruction"
        ]
    },
    {
        "filename": "/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp",
        "new_functions": [],
        "functions": [
            "|SystemZDAGToDAGISel|Select"
        ]
    },
    {
        "filename": "/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp",
        "new_functions": [],
        "functions": [
            "llvm|SystemZTargetLowering|EmitInstrWithCustomInserter",
            "llvm|SystemZTargetLowering|LowerOperation",
            "llvm|SystemZTargetLowering|SystemZTargetLowering",
            "llvm|SystemZTargetLowering|emitAtomicLoadBinary",
            "llvm|SystemZTargetLowering|emitAtomicLoadMinMax",
            "llvm|SystemZTargetLowering|getTargetNodeName",
            "llvm|SystemZTargetLowering|lowerATOMIC_CMP_SWAP",
            "llvm|SystemZTargetLowering|lowerATOMIC_LOAD_OP",
            "llvm|SystemZTargetLowering|lowerATOMIC_LOAD_SUB",
            "llvm|SystemZTargetLowering|shouldExpandAtomicRMWInIR"
        ]
    },
    {
        "filename": "/llvm/lib/Target/SystemZ/SystemZISelLowering.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/TargetMachine.cpp",
        "new_functions": [],
        "functions": [
            "llvm|TargetMachine|isLargeGlobalObject"
        ]
    },
    {
        "filename": "/llvm/lib/Target/VE/AsmParser/VEAsmParser.cpp",
        "new_functions": [],
        "functions": [
            "|VEAsmParser|splitMnemonic"
        ]
    },
    {
        "filename": "/llvm/lib/Target/VE/MCTargetDesc/VEAsmBackend.cpp",
        "new_functions": [],
        "functions": [
            "|VEAsmBackend|shouldForceRelocation"
        ]
    },
    {
        "filename": "/llvm/lib/Target/WebAssembly/AsmParser/WebAssemblyAsmParser.cpp",
        "new_functions": [],
        "functions": [
            "|WebAssemblyAsmParser|doBeforeLabelEmit"
        ]
    },
    {
        "filename": "/llvm/lib/Target/WebAssembly/WebAssemblyAsmPrinter.cpp",
        "new_functions": [],
        "functions": [
            "None|None|isEmscriptenInvokeName",
            "llvm|WebAssemblyAsmPrinter|getOrCreateWasmSymbol"
        ]
    },
    {
        "filename": "/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp",
        "new_functions": [],
        "functions": [
            "None|None|canLongjmp",
            "|WebAssemblyLowerEmscriptenEHSjLj|handleLongjmpableCallsForEmscriptenSjLj"
        ]
    },
    {
        "filename": "/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp",
        "new_functions": [],
        "functions": [
            "|X86AsmParser|HandleAVX512Operand",
            "|X86AsmParser|MatchRegisterByName",
            "|X86AsmParser|ParseDirective",
            "|X86AsmParser|ParseInstruction",
            "|X86AsmParser|ParseIntelDotOperator",
            "|X86AsmParser|ParseIntelExpression",
            "|X86AsmParser|ParseRoundingModeOp"
        ]
    },
    {
        "filename": "/llvm/lib/Target/X86/GISel/X86InstructionSelector.cpp",
        "new_functions": [],
        "functions": [
            "|X86InstructionSelector|select"
        ]
    },
    {
        "filename": "/llvm/lib/Target/X86/GISel/X86LegalizerInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|X86LegalizerInfo|X86LegalizerInfo"
        ]
    },
    {
        "filename": "/llvm/lib/Target/X86/MCA/X86CustomBehaviour.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp",
        "new_functions": [],
        "functions": [
            "|X86AsmBackend|shouldForceRelocation"
        ]
    },
    {
        "filename": "/llvm/lib/Target/X86/MCTargetDesc/X86InstComments.cpp",
        "new_functions": [],
        "functions": [
            "llvm|None|EmitAnyX86InstComments"
        ]
    },
    {
        "filename": "/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp",
        "new_functions": [],
        "functions": [
            "|X86MCCodeEmitter|emitVEXOpcodePrefix"
        ]
    },
    {
        "filename": "/llvm/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp",
        "new_functions": [],
        "functions": [
            "llvm::X86_MC|None|createX86MCSubtargetInfo"
        ]
    },
    {
        "filename": "/llvm/lib/Target/X86/X86DomainReassignment.cpp",
        "new_functions": [],
        "functions": [
            "|X86DomainReassignment|initConverters"
        ]
    },
    {
        "filename": "/llvm/lib/Target/X86/X86FastISel.cpp",
        "new_functions": [],
        "functions": [
            "|X86FastISel|handleConstantAddresses"
        ]
    },
    {
        "filename": "/llvm/lib/Target/X86/X86FixupVectorConstants.cpp",
        "new_functions": [],
        "functions": [
            "None|None|rebuildSplatableConstant",
            "|X86FixupVectorConstantsPass|processInstruction"
        ]
    },
    {
        "filename": "/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/X86/X86ISelLowering.cpp",
        "new_functions": [
            "None|None|canonicalizeShuffleWithBinOps",
            "llvm|X86TargetLowering|lowerAtomicLoadAsLoadSDNode",
            "llvm|X86TargetLowering|lowerAtomicStoreAsStoreSDNode"
        ],
        "functions": [
            "None|None|canonicalizeBitSelect",
            "None|None|combineConcatVectorOps",
            "None|None|combineLoad",
            "None|None|combineShuffle",
            "None|None|combineStore",
            "llvm|X86TargetLowering|LowerBUILD_VECTOR",
            "llvm|X86TargetLowering|X86TargetLowering"
        ]
    },
    {
        "filename": "/llvm/lib/Target/X86/X86ISelLowering.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/X86/X86InsertPrefetch.cpp",
        "new_functions": [],
        "functions": [
            "|X86InsertPrefetch|findPrefetchInfo"
        ]
    },
    {
        "filename": "/llvm/lib/Target/X86/X86InstrInfo.cpp",
        "new_functions": [],
        "functions": [
            "None|None|ExpandMOVImmSExti8",
            "None|None|commuteVPTERNLOG",
            "None|None|expandLoadStackGuard",
            "None|None|getCommutedVPERMV3Opcode",
            "None|None|getLoadStoreRegOpcode",
            "None|None|isCommutableVPERMV3Instruction",
            "None|None|isDefConvertible",
            "None|None|isNonFoldablePartialRegisterLoad",
            "None|None|lookup",
            "None|None|lookupAVX512",
            "llvm::X86|None|getCMovOpcode",
            "llvm|None|createCleanupLocalDynamicTLSPass",
            "llvm|None|createX86GlobalBaseRegPass",
            "llvm|X86InstrInfo|FoldImmediateImpl",
            "llvm|X86InstrInfo|X86InstrInfo",
            "llvm|X86InstrInfo|buildOutlinedFrame",
            "llvm|X86InstrInfo|commuteInstructionImpl",
            "llvm|X86InstrInfo|copyPhysReg",
            "llvm|X86InstrInfo|expandPostRAPseudo",
            "llvm|X86InstrInfo|foldMemoryOperandImpl",
            "llvm|X86InstrInfo|getFMA3OpcodeToCommuteOperands",
            "llvm|X86InstrInfo|getGlobalBaseReg",
            "llvm|X86InstrInfo|insertOutlinedCall",
            "llvm|X86InstrInfo|isFunctionSafeToOutlineFrom",
            "llvm|X86InstrInfo|isReallyTriviallyReMaterializable",
            "llvm|X86InstrInfo|isSafeToMoveRegClassDefs",
            "llvm|X86InstrInfo|optimizeCompareInstr",
            "llvm|X86InstrInfo|reverseBranchCondition",
            "llvm|X86InstrInfo|setExecutionDomain",
            "llvm|X86InstrInfo|unfoldMemoryOperand",
            "|CGBR|runOnMachineFunction",
            "|LDTLSCleanup|SetRegister"
        ]
    },
    {
        "filename": "/llvm/lib/Target/X86/X86LoadValueInjectionRetHardening.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/X86/X86MCInstLower.cpp",
        "new_functions": [],
        "functions": [
            "None|None|addConstantComments"
        ]
    },
    {
        "filename": "/llvm/lib/Target/X86/X86RegisterInfo.cpp",
        "new_functions": [],
        "functions": [
            "llvm|X86RegisterInfo|getCallPreservedMask",
            "llvm|X86RegisterInfo|getCalleeSavedRegs"
        ]
    },
    {
        "filename": "/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/X86/X86Subtarget.cpp",
        "new_functions": [],
        "functions": [
            "llvm|X86Subtarget|initSubtargetFeatures"
        ]
    },
    {
        "filename": "/llvm/lib/Target/XCore/XCoreISelLowering.cpp",
        "new_functions": [
            "llvm|XCoreTargetLowering|LowerATOMIC_LOAD",
            "llvm|XCoreTargetLowering|LowerATOMIC_STORE",
            "llvm|XCoreTargetLowering|getTargetMMOFlags"
        ],
        "functions": [
            "llvm|XCoreTargetLowering|LowerOperation",
            "llvm|XCoreTargetLowering|XCoreTargetLowering",
            "llvm|XCoreTargetLowering|getGlobalAddressWrapper"
        ]
    },
    {
        "filename": "/llvm/lib/Target/XCore/XCoreISelLowering.h",
        "new_functions": [
            "llvm|XCoreTargetLowering|shouldInsertFencesForAtomic"
        ],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Target/XCore/XCoreTargetObjectFile.cpp",
        "new_functions": [],
        "functions": [
            "llvm|XCoreTargetObjectFile|getExplicitSectionGlobal"
        ]
    },
    {
        "filename": "/llvm/lib/TargetParser/AArch64TargetParser.cpp",
        "new_functions": [],
        "functions": [
            "llvm::AArch64|None|getArchExtFeature",
            "llvm::AArch64|None|parseArch"
        ]
    },
    {
        "filename": "/llvm/lib/TargetParser/ARMTargetParser.cpp",
        "new_functions": [],
        "functions": [
            "None|None|stripNegationPrefix",
            "llvm::ARM|None|parseArch"
        ]
    },
    {
        "filename": "/llvm/lib/TargetParser/ARMTargetParserCommon.cpp",
        "new_functions": [],
        "functions": [
            "llvm::ARM|None|getCanonicalArchName",
            "llvm::ARM|None|parseArchEndian"
        ]
    },
    {
        "filename": "/llvm/lib/TargetParser/CSKYTargetParser.cpp",
        "new_functions": [],
        "functions": [
            "None|None|stripNegationPrefix"
        ]
    },
    {
        "filename": "/llvm/lib/TargetParser/Host.cpp",
        "new_functions": [],
        "functions": [
            "llvm::sys::detail|None|getHostCPUNameForARM",
            "llvm::sys::detail|None|getHostCPUNameForRISCV",
            "llvm::sys::detail|None|getHostCPUNameForS390x"
        ]
    },
    {
        "filename": "/llvm/lib/TargetParser/Triple.cpp",
        "new_functions": [],
        "functions": [
            "None|None|parseARMArch",
            "None|None|parseArch",
            "None|None|parseSubArch",
            "llvm|Triple|getEnvironmentVersion",
            "llvm|Triple|getOSVersion",
            "llvm|Triple|normalize"
        ]
    },
    {
        "filename": "/llvm/lib/TargetParser/X86TargetParser.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Testing/Support/Error.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/TextAPI/Symbol.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/TextAPI/Target.cpp",
        "new_functions": [],
        "functions": [
            "llvm::MachO|Target|create"
        ]
    },
    {
        "filename": "/llvm/lib/TextAPI/TextStub.cpp",
        "new_functions": [],
        "functions": [
            "llvm::MachO|TextAPIReader|canRead",
            "llvm::yaml|NormalizedTBD|denormalize"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Coroutines/CoroFrame.cpp",
        "new_functions": [],
        "functions": [
            "None|None|buildFrameDebugInfo",
            "None|None|cacheDIVar",
            "None|None|insertSpills",
            "llvm::coro|None|salvageDebugInfo"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/IPO/AttributorAttributes.cpp",
        "new_functions": [],
        "functions": [
            "None|None|constructPointer",
            "|AAPrivatizablePtrArgument|createInitialization",
            "|AAPrivatizablePtrArgument|createReplacementValues",
            "|AAValueConstantRangeImpl|getConstantRangeFromLVI"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/IPO/EmbedBitcodePass.cpp",
        "new_functions": [],
        "functions": [
            "llvm|EmbedBitcodePass|run"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/IPO/Inliner.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Transforms/IPO/LowerTypeTests.cpp",
        "new_functions": [],
        "functions": [
            "|LowerTypeTestsModule|createJumpTable"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp",
        "new_functions": [],
        "functions": [
            "None|None|AddCalls"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp",
        "new_functions": [],
        "functions": [
            "None|None|foldBoxMultiply",
            "llvm|InstCombinerImpl|foldAddWithConstant",
            "llvm|InstCombinerImpl|visitAdd"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp",
        "new_functions": [],
        "functions": [
            "None|None|canFreelyInvert",
            "None|None|matchDeMorgansLaws",
            "llvm|InstCombinerImpl|foldBinOpOfDisplacedShifts",
            "llvm|InstCombinerImpl|visitAnd",
            "llvm|InstCombinerImpl|visitOr",
            "llvm|InstCombinerImpl|visitXor"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp",
        "new_functions": [],
        "functions": [
            "None|None|foldCttzCtlz"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp",
        "new_functions": [],
        "functions": [
            "llvm|InstCombinerImpl|foldGEPICmp",
            "llvm|InstCombinerImpl|foldICmpUsingKnownBits",
            "llvm|InstCombinerImpl|visitICmpInst"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/InstCombine/InstCombineInternal.h",
        "new_functions": [],
        "functions": [
            "llvm|InstCombinerImpl|eraseInstFromFunction"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp",
        "new_functions": [],
        "functions": [
            "None|None|simplifyAllocaArraySize"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp",
        "new_functions": [],
        "functions": [
            "llvm|InstCombinerImpl|visitMul"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/InstCombine/InstCombineNegator.cpp",
        "new_functions": [],
        "functions": [
            "llvm|Negator|Negate",
            "llvm|Negator|Negator",
            "llvm|Negator|visitImpl"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp",
        "new_functions": [],
        "functions": [
            "None|None|setShiftFlags"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp",
        "new_functions": [],
        "functions": [
            "llvm|InstCombinerImpl|SimplifyDemandedUseBits"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp",
        "new_functions": [],
        "functions": [
            "None|None|simplifyAssocCastAssoc",
            "llvm|InstCombinerImpl|visitBranchInst",
            "llvm|InstCombiner|getFreelyInvertedImpl"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp",
        "new_functions": [],
        "functions": [
            "|ModuleAddressSanitizer|CreateMetadataGlobal"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp",
        "new_functions": [
            "llvm|InstrProfiling|computeNumValueSiteCounts",
            "llvm|InstrProfiling|createDataVariable",
            "llvm|InstrProfiling|createRegionBitmaps",
            "llvm|InstrProfiling|createRegionCounters",
            "llvm|InstrProfiling|emitInitialization",
            "llvm|InstrProfiling|emitNameData",
            "llvm|InstrProfiling|emitRegistration",
            "llvm|InstrProfiling|emitRuntimeHook",
            "llvm|InstrProfiling|emitUses",
            "llvm|InstrProfiling|emitVNodes",
            "llvm|InstrProfiling|getBitmapAddress",
            "llvm|InstrProfiling|getCounterAddress",
            "llvm|InstrProfiling|getOrCreateRegionBitmaps",
            "llvm|InstrProfiling|getOrCreateRegionCounters",
            "llvm|InstrProfiling|isCounterPromotionEnabled",
            "llvm|InstrProfiling|isRuntimeCounterRelocationEnabled",
            "llvm|InstrProfiling|lowerCover",
            "llvm|InstrProfiling|lowerCoverageData",
            "llvm|InstrProfiling|lowerIncrement",
            "llvm|InstrProfiling|lowerIntrinsics",
            "llvm|InstrProfiling|lowerMCDCCondBitmapUpdate",
            "llvm|InstrProfiling|lowerMCDCTestVectorBitmapUpdate",
            "llvm|InstrProfiling|lowerTimestamp",
            "llvm|InstrProfiling|lowerValueProfileInst",
            "llvm|InstrProfiling|maybeSetComdat",
            "llvm|InstrProfiling|promoteCounterLoadStores",
            "llvm|InstrProfiling|run",
            "llvm|InstrProfiling|setupProfileSection"
        ],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Transforms/Instrumentation/Instrumentation.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp",
        "new_functions": [],
        "functions": [
            "None|None|readMemprof"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp",
        "new_functions": [],
        "functions": [
            "|ModuleSanitizerCoverage|CreateSecStartEnd",
            "|ModuleSanitizerCoverage|InjectTraceForSwitch"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Scalar/AlignmentFromAssumptions.cpp",
        "new_functions": [],
        "functions": [
            "None|None|getNewAlignment",
            "llvm|AlignmentFromAssumptionsPass|processAssumption"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Scalar/CallSiteSplitting.cpp",
        "new_functions": [],
        "functions": [
            "None|None|splitCallSite"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp",
        "new_functions": [],
        "functions": [
            "None|None|decompose",
            "None|None|decomposeGEP"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp",
        "new_functions": [],
        "functions": [
            "None|None|expandUDivOrURem",
            "None|None|processBinOp",
            "None|None|processICmp",
            "None|None|processSDivOrSRem",
            "None|None|processUDivOrURem",
            "None|None|willNotOverflow"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp",
        "new_functions": [],
        "functions": [
            "|LSRInstance|RewriteForPHI"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|shouldPragmaUnroll",
            "llvm|None|computeUnrollCount"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp",
        "new_functions": [],
        "functions": [
            "llvm|MemCpyOptPass|performCallSlotOptzn"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Scalar/Reassociate.cpp",
        "new_functions": [],
        "functions": [
            "None|None|LinearizeExprTree",
            "llvm|ReassociatePass|BuildPairMap",
            "llvm|ReassociatePass|OptimizeInst",
            "llvm|ReassociatePass|ReassociateExpression",
            "llvm|ReassociatePass|RemoveFactorFromExpression",
            "llvm|ReassociatePass|RewriteExprTree"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Scalar/SCCP.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Transforms/Scalar/SROA.cpp",
        "new_functions": [],
        "functions": [
            "|SROA|deleteDeadInstructions",
            "|SROA|splitAlloca"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp",
        "new_functions": [],
        "functions": [
            "None|None|canTransformAccumulatorRecursion",
            "|TailRecursionEliminator|insertAccumulator"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp",
        "new_functions": [],
        "functions": [
            "None|None|DPValuesRemoveRedundantDbgInstrsUsingBackwardScan",
            "None|None|DPValuesRemoveRedundantDbgInstrsUsingForwardScan"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Utils/Local.cpp",
        "new_functions": [
            "None|None|getDebugValueLocDPV"
        ],
        "functions": [
            "None|None|rewriteDebugUsers",
            "llvm|None|ConvertDebugDeclareToDebugValue",
            "llvm|None|LowerDbgDeclare",
            "llvm|None|TryToSimplifyUncondBranchFromEmptyBlock",
            "llvm|None|replaceDbgDeclare"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Utils/LoopPeel.cpp",
        "new_functions": [],
        "functions": [
            "None|None|countToEliminateCompares"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp",
        "new_functions": [],
        "functions": [
            "|LoopRotate|rotateLoop"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Utils/LowerSwitch.cpp",
        "new_functions": [],
        "functions": [
            "|None|ProcessSwitchInst"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Utils/MemoryOpRemark.cpp",
        "new_functions": [],
        "functions": [
            "llvm|MemoryOpRemark|visitVariable"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Utils/ModuleUtils.cpp",
        "new_functions": [],
        "functions": [
            "llvm::VFABI|None|setVectorVariantNames"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Utils/MoveAutoInit.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp",
        "new_functions": [],
        "functions": [
            "llvm|SCEVExpander|expand"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Utils/SimplifyCFG.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp",
        "new_functions": [],
        "functions": [
            "|WidenIV|widenLoopCompare"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Vectorize/LoadStoreVectorizer.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp",
        "new_functions": [
            "llvm|InnerLoopVectorizer|truncateToMinimalBitwidths"
        ],
        "functions": [
            "None|None|addCanonicalIVRecipes",
            "llvm|InnerLoopVectorizer|fixVectorizedLoop",
            "llvm|LoopVectorizationCostModel|setVectorizedCallDecision",
            "llvm|LoopVectorizationPlanner|adjustRecipesForReductions",
            "llvm|LoopVectorizationPlanner|buildVPlansWithVPRecipes",
            "llvm|VPRecipeBuilder|tryToCreateWidenRecipe"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp",
        "new_functions": [],
        "functions": [
            "None|None|getVectorCallCosts",
            "llvm::slpvectorizer|BoUpSLP|buildTree_rec",
            "llvm::slpvectorizer|BoUpSLP|findReusedOrderedScalars",
            "llvm::slpvectorizer|BoUpSLP|getEntryCost",
            "llvm::slpvectorizer|BoUpSLP|getScalarsVectorizationState",
            "llvm::slpvectorizer|BoUpSLP|getTreeCost",
            "llvm::slpvectorizer|BoUpSLP|isGatherShuffledSingleRegisterEntry",
            "llvm::slpvectorizer|BoUpSLP|newTreeEntry",
            "llvm::slpvectorizer|BoUpSLP|processBuildVector",
            "llvm::slpvectorizer|ShuffleCostEstimator|finalize",
            "llvm::slpvectorizer|ShuffleCostEstimator|gather",
            "llvm::slpvectorizer|ShuffleInstructionBuilder|adjustExtracts",
            "llvm::slpvectorizer|ShuffleInstructionBuilder|gather",
            "llvm::slpvectorizer|ShuffleInstructionBuilder|needToDelay"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Vectorize/VPlan.cpp",
        "new_functions": [],
        "functions": [
            "llvm|VPlanPrinter|dump",
            "llvm|VPlan|prepareToExecute",
            "llvm|VPlan|print"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Vectorize/VPlan.h",
        "new_functions": [
            "llvm|VPTransformState|hasAnyVectorValue"
        ],
        "functions": [
            "llvm|VPInstruction|onlyFirstLaneUsed",
            "llvm|VPRecipeWithIRFlags|classof",
            "llvm|VPRecipeWithIRFlags|dropPoisonGeneratingFlags",
            "llvm|VPRecipeWithIRFlags|setFlags",
            "llvm|VPWidenCastRecipe|VPWidenCastRecipe"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Vectorize/VPlanAnalysis.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp",
        "new_functions": [],
        "functions": [
            "llvm|VPInstruction|generateInstruction",
            "llvm|VPInstruction|print",
            "llvm|VPRecipeBase|mayHaveSideEffects",
            "llvm|VPRecipeWithIRFlags|printFlags",
            "llvm|VPWidenCastRecipe|execute",
            "llvm|VPWidenCastRecipe|print"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp",
        "new_functions": [],
        "functions": [
            "llvm|VPlanTransforms|VPInstructionsToVPRecipes"
        ]
    },
    {
        "filename": "/llvm/lib/Transforms/Vectorize/VPlanTransforms.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/lib/Transforms/Vectorize/VPlanValue.h",
        "new_functions": [],
        "functions": [
            "llvm|VPValue|removeUser"
        ]
    },
    {
        "filename": "/llvm/lib/XRay/BlockVerifier.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/dsymutil/BinaryHolder.cpp",
        "new_functions": [],
        "functions": [
            "llvm::dsymutil|None|isArchive"
        ]
    },
    {
        "filename": "/llvm/tools/dsymutil/DebugMap.cpp",
        "new_functions": [],
        "functions": [
            "llvm::yaml|YamlDMO|denormalize"
        ]
    },
    {
        "filename": "/llvm/tools/dsymutil/DwarfLinkerForBinary.cpp",
        "new_functions": [],
        "functions": [
            "llvm::dsymutil|DwarfLinkerForBinary|linkImpl",
            "llvm::dsymutil|None|remarksErrorHandler"
        ]
    },
    {
        "filename": "/llvm/tools/dsymutil/MachODebugMapParser.cpp",
        "new_functions": [],
        "functions": [
            "None|None|shouldLinkArch"
        ]
    },
    {
        "filename": "/llvm/tools/dsymutil/MachOUtils.cpp",
        "new_functions": [],
        "functions": [
            "llvm::dsymutil::MachOUtils|None|getArchName"
        ]
    },
    {
        "filename": "/llvm/tools/dsymutil/SymbolMap.cpp",
        "new_functions": [],
        "functions": [
            "llvm::dsymutil|SymbolMapLoader|Load",
            "llvm::dsymutil|SymbolMapTranslator|operator()"
        ]
    },
    {
        "filename": "/llvm/tools/llc/llc.cpp",
        "new_functions": [],
        "functions": [
            "None|None|GetOutputStream",
            "None|None|compileModule"
        ]
    },
    {
        "filename": "/llvm/tools/lli/ChildTarget/ChildTarget.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/lli/lli.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-ar/llvm-ar.cpp",
        "new_functions": [],
        "functions": [
            "None|None|matchFlagWithArg"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-as/llvm-as.cpp",
        "new_functions": [],
        "functions": [
            "None|None|WriteOutputFile"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-c-test/echo.cpp",
        "new_functions": [],
        "functions": [
            "None|FunCloner|CloneInstruction"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-cfi-verify/lib/FileAnalysis.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-cfi-verify/lib/GraphBuilder.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-config/llvm-config.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-cov/CodeCoverage.cpp",
        "new_functions": [],
        "functions": [
            "|CodeCoverageTool|remapPathNames"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-cov/CoverageReport.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-cov/SourceCoverageViewHTML.cpp",
        "new_functions": [],
        "functions": [
            "llvm|Reporter|buildRelLinkToFile"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-cxxdump/llvm-cxxdump.cpp",
        "new_functions": [],
        "functions": [
            "None|None|dumpCXXData"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-diff/llvm-diff.cpp",
        "new_functions": [],
        "functions": [
            "None|None|diffGlobal"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-dis/llvm-dis.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-dwarfutil/DebugInfoLinker.h",
        "new_functions": [],
        "functions": [
            "llvm::dwarfutil|None|isDebugSection"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-dwarfutil/Error.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-dwarfutil/Options.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-dwp/llvm-dwp.cpp",
        "new_functions": [],
        "functions": [
            "None|None|llvm_dwp_main"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/lib/Analysis.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/lib/Analysis.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp",
        "new_functions": [],
        "functions": [
            "llvm::exegesis::|InProcessFunctionExecutorImpl|runWithCounter",
            "llvm::exegesis::|SubProcessFunctionExecutorImpl|createSubProcessAndRunBenchmark",
            "llvm::exegesis::|SubProcessFunctionExecutorImpl|prepareAndRunBenchmark",
            "llvm::exegesis|BenchmarkRunner|runConfiguration"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/lib/Error.cpp",
        "new_functions": [
            "llvm::exegesis|SnippetCrash|convertToErrorCode",
            "llvm::exegesis|SnippetCrash|log"
        ],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/lib/Error.h",
        "new_functions": [
            "llvm::exegesis|SnippetCrash|SnippetCrash"
        ],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/lib/LatencyBenchmarkRunner.cpp",
        "new_functions": [],
        "functions": [
            "llvm::exegesis|LatencyBenchmarkRunner|LatencyBenchmarkRunner",
            "llvm::exegesis|LatencyBenchmarkRunner|runMeasurements"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/lib/LatencyBenchmarkRunner.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/lib/MCInstrDescView.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp",
        "new_functions": [],
        "functions": [
            "llvm::exegesis::|BenchmarkCodeStreamer|HandleComment"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/lib/SnippetRepetitor.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/lib/Target.cpp",
        "new_functions": [],
        "functions": [
            "llvm::exegesis|ExegesisTarget|createBenchmarkRunner",
            "llvm::exegesis|ExegesisTarget|createLatencyBenchmarkRunner"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/lib/Target.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/lib/X86/Target.cpp",
        "new_functions": [],
        "functions": [
            "llvm::exegesis|None|isInvalidOpcode"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-exegesis/llvm-exegesis.cpp",
        "new_functions": [],
        "functions": [
            "llvm::exegesis|None|benchmarkMain",
            "llvm::exegesis|None|runBenchmarkConfigurations"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-jitlink/llvm-jitlink.cpp",
        "new_functions": [],
        "functions": [
            "None|None|addAliases",
            "None|None|addLibraries",
            "None|None|addObjects",
            "None|None|createJITDylibs",
            "None|None|sanitizeArguments",
            "llvm|None|loadDylibs",
            "llvm|None|loadProcessSymbols",
            "llvm|Session|Session"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-jitlink/llvm-jitlink.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp",
        "new_functions": [],
        "functions": [
            "None|None|processCommandLineLibraries"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-lto/llvm-lto.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-ml/llvm-ml.cpp",
        "new_functions": [],
        "functions": [
            "None|None|GetTriple"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-nm/llvm-nm.cpp",
        "new_functions": [],
        "functions": [
            "None|None|getXCOFFExports"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp",
        "new_functions": [],
        "functions": [
            "None|None|getOutputTargetInfoByTargetName"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-objcopy/ObjcopyOptions.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-objcopy/llvm-objcopy.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-objdump/COFFDump.cpp",
        "new_functions": [],
        "functions": [
            "llvm::objdump|None|printCOFFSymbolTable"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-objdump/MachODump.cpp",
        "new_functions": [],
        "functions": [
            "None|None|CreateSymbolAddressMap",
            "None|None|getSectionsAndSymbols"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-objdump/SourcePrinter.cpp",
        "new_functions": [],
        "functions": [
            "llvm::objdump|SourcePrinter|printLines"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-objdump/llvm-objdump.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-pdbutil/DumpOutputStyle.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-pdbutil/ExplainOutputStyle.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-pdbutil/PrettyClassDefinitionDumper.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-profdata/llvm-profdata.cpp",
        "new_functions": [],
        "functions": [
            "None|None|parseInputFilenamesFile"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-profgen/CallContext.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-profgen/PerfReader.cpp",
        "new_functions": [],
        "functions": [
            "llvm::sampleprof|HybridPerfReader|parseSample",
            "llvm::sampleprof|PerfScriptReader|extractCallstack",
            "llvm::sampleprof|PerfScriptReader|isLBRSample",
            "llvm::sampleprof|UnsymbolizedProfileReader|readUnsymbolizedProfile"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-profgen/PerfReader.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-profgen/ProfiledBinary.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp",
        "new_functions": [],
        "functions": [
            "|Filter|parseLine"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-rc/ResourceScriptStmt.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-rc/ResourceScriptToken.cpp",
        "new_functions": [],
        "functions": [
            "|Tokenizer|canStartBlockComment",
            "|Tokenizer|canStartLineComment",
            "|Tokenizer|willNowRead"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-rc/ResourceScriptToken.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp",
        "new_functions": [],
        "functions": [
            "llvm::ARM::WinEH|Decoder|dumpProcedureData"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-readobj/COFFDumper.cpp",
        "new_functions": [],
        "functions": [
            "|COFFDumper|printCOFFResources"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-readobj/ELFDumper.cpp",
        "new_functions": [],
        "functions": [
            "None|None|getGNUPtType",
            "None|None|getNoteTypeName",
            "None|None|isRelocationSec",
            "None|None|printRelocHeaderFields",
            "|None|forEachRelocationDo",
            "|None|getDynamicEntry",
            "|None|parseDynamicTable",
            "|None|printDynamicRelocHeader",
            "|None|printNeededLibraries",
            "|None|printNotes",
            "|None|printRelocations"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-readobj/Win64EHDumper.cpp",
        "new_functions": [],
        "functions": [
            "llvm::Win64EH|Dumper|printData"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-readobj/llvm-readobj.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-readtapi/llvm-readtapi.cpp",
        "new_functions": [
            "|None|getInterfaceFile",
            "|None|handleCompareAction",
            "|None|handleMergeAction",
            "|None|handleSingleFileAction",
            "|None|handleWriteAction",
            "|None|reportError"
        ],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-reduce/ReducerWorkItem.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-reduce/deltas/Delta.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-reduce/deltas/Delta.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-reduce/deltas/ReduceDIMetadata.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-reduce/deltas/StripDebugInfo.cpp",
        "new_functions": [],
        "functions": [
            "None|None|stripDebugInfoImpl"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-reduce/llvm-reduce.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-remarkutil/RemarkCounter.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/llvm-stress/llvm-stress.cpp",
        "new_functions": [],
        "functions": [
            "llvm::|Modifier|Modifier"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-undname/llvm-undname.cpp",
        "new_functions": [],
        "functions": [
            "None|None|main"
        ]
    },
    {
        "filename": "/llvm/tools/llvm-xray/xray-account.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/tools/obj2yaml/archive2yaml.cpp",
        "new_functions": [],
        "functions": [
            "|ArchiveDumper|dump"
        ]
    },
    {
        "filename": "/llvm/tools/obj2yaml/elf2yaml.cpp",
        "new_functions": [],
        "functions": [
            "|None|dumpDWARFSections"
        ]
    },
    {
        "filename": "/llvm/tools/obj2yaml/macho2yaml.cpp",
        "new_functions": [],
        "functions": [
            "None|MachODumper|extractSections",
            "None|None|dumpDebugSection"
        ]
    },
    {
        "filename": "/llvm/tools/obj2yaml/wasm2yaml.cpp",
        "new_functions": [],
        "functions": [
            "|WasmDumper|dump"
        ]
    },
    {
        "filename": "/llvm/tools/obj2yaml/xcoff2yaml.cpp",
        "new_functions": [],
        "functions": [
            "|XCOFFDumper|dumpSymbols"
        ]
    },
    {
        "filename": "/llvm/tools/opt/opt.cpp",
        "new_functions": [],
        "functions": [
            "None|None|shouldPinPassToLegacyPM"
        ]
    },
    {
        "filename": "/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp",
        "new_functions": [],
        "functions": [
            "None|None|LLVMFuzzerTestOneInput"
        ]
    },
    {
        "filename": "/llvm/tools/yaml2obj/yaml2obj.cpp",
        "new_functions": [],
        "functions": [
            "None|None|preprocess"
        ]
    },
    {
        "filename": "/llvm/unittests/ADT/CombinationGeneratorTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/ADT/StringMapTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/Analysis/ValueLatticeTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/Analysis/ValueTrackingTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/Analysis/VectorFunctionABITest.cpp",
        "new_functions": [
            "|VFABIParserTest|IsMasked"
        ],
        "functions": [
            "None|None|TEST",
            "None|None|TEST_F",
            "|VFABIParserTest|invokeParser",
            "|VFABIParserTest|reset"
        ]
    },
    {
        "filename": "/llvm/unittests/Analysis/VectorUtilsTest.cpp",
        "new_functions": [],
        "functions": [
            "None|VFShapeAPITest|buildShape"
        ]
    },
    {
        "filename": "/llvm/unittests/DebugInfo/DWARF/DWARFDebugInfoTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/DebugInfo/DWARF/DwarfGenerator.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/ExecutionEngine/Orc/OrcCAPITest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp",
        "new_functions": [],
        "functions": [
            "|None|TEST_P"
        ]
    },
    {
        "filename": "/llvm/unittests/IR/BasicBlockDbgInfoTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/IR/DebugInfoTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/Object/ELFObjectFileTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/Object/ELFTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/Object/ELFTypesTest.cpp",
        "new_functions": [],
        "functions": [
            "None|None|TEST"
        ]
    },
    {
        "filename": "/llvm/unittests/Support/AddressRangeTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/Support/Chrono.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/Support/CommandLineTest.cpp",
        "new_functions": [],
        "functions": [
            "|None|TEST",
            "|None|runTest"
        ]
    },
    {
        "filename": "/llvm/unittests/Support/DivisionByConstantTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/Support/InstructionCostTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/Support/MemoryTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/Support/Path.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/Support/RegexTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/Support/SpecialCaseListTest.cpp",
        "new_functions": [],
        "functions": [
            "|SpecialCaseListTest|makeSpecialCaseListFile"
        ]
    },
    {
        "filename": "/llvm/unittests/TableGen/AutomataTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/Target/RISCV/RISCVInstrInfoTest.cpp",
        "new_functions": [],
        "functions": [
            "|None|TEST_P"
        ]
    },
    {
        "filename": "/llvm/unittests/TargetParser/TargetParserTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/Transforms/Vectorize/VPlanHCFGTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/Transforms/Vectorize/VPlanTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/XRay/FDRProducerConsumerTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/tools/llvm-exegesis/Mips/SnippetGeneratorTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/tools/llvm-exegesis/PowerPC/SnippetGeneratorTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/unittests/tools/llvm-exegesis/X86/SnippetFileTest.cpp",
        "new_functions": [],
        "functions": [
            "llvm::exegesis::|None|TEST_F"
        ]
    },
    {
        "filename": "/llvm/utils/TableGen/DAGISelMatcher.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/utils/TableGen/DAGISelMatcher.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/utils/TableGen/DAGISelMatcherEmitter.cpp",
        "new_functions": [],
        "functions": [
            "None|None|getOpcodeString",
            "|MatcherTableEmitter|EmitMatcher"
        ]
    },
    {
        "filename": "/llvm/utils/TableGen/DAGISelMatcherGen.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/utils/TableGen/DAGISelMatcherOpt.cpp",
        "new_functions": [],
        "functions": [
            "None|None|ContractNodes"
        ]
    },
    {
        "filename": "/llvm/utils/TableGen/GlobalISelEmitter.cpp",
        "new_functions": [],
        "functions": [
            "|GlobalISelEmitter|importExplicitDefRenderers",
            "|GlobalISelEmitter|runOnPattern"
        ]
    },
    {
        "filename": "/llvm/utils/TableGen/GlobalISelMatchTable.cpp",
        "new_functions": [],
        "functions": [
            "llvm::gi|MatchTable|emitDeclaration"
        ]
    },
    {
        "filename": "/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/utils/TableGen/IntrinsicEmitter.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/llvm/utils/TableGen/RISCVTargetDefEmitter.cpp",
        "new_functions": [],
        "functions": [
            "None|None|EmitRISCVTargetDef"
        ]
    },
    {
        "filename": "/llvm/utils/TableGen/X86DisassemblerTables.cpp",
        "new_functions": [],
        "functions": [
            "None|None|getDecisionType",
            "None|None|inheritsFrom",
            "None|None|outranks",
            "None|None|stringForContext",
            "None|None|stringForDecisionType",
            "None|None|stringForOperandEncoding",
            "None|None|stringForOperandType",
            "llvm::X86Disassembler|DisassemblerTables|emitContextDecision",
            "llvm::X86Disassembler|DisassemblerTables|setTableFields",
            "llvm::X86Disassembler|DisassemblerTables|~DisassemblerTables"
        ]
    },
    {
        "filename": "/llvm/utils/split-file/split-file.cpp",
        "new_functions": [],
        "functions": [
            "None|None|handle"
        ]
    },
    {
        "filename": "/llvm/utils/yaml-bench/YAMLBench.cpp",
        "new_functions": [],
        "functions": [
            "None|None|prettyTag"
        ]
    },
    {
        "filename": "/mlir/include/mlir-c/IR.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/include/mlir/Conversion/ArmSMEToLLVM/ArmSMEToLLVM.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/include/mlir/Dialect/ArmSME/Transforms/Passes.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/include/mlir/Dialect/Linalg/Transforms/Transforms.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/include/mlir/Dialect/SCF/Transforms/Transforms.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/include/mlir/Dialect/SparseTensor/IR/Enums.h",
        "new_functions": [],
        "functions": [
            "mlir::sparse_tensor|None|encodeDim",
            "mlir::sparse_tensor|None|encodeLvl"
        ]
    },
    {
        "filename": "/mlir/include/mlir/Dialect/Tensor/Transforms/Transforms.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/include/mlir/Dialect/Transform/IR/TransformInterfaces.h",
        "new_functions": [],
        "functions": [
            "mlir::transform|RegionScope|RegionScope",
            "mlir::transform|TransformState|mapBlockArguments"
        ]
    },
    {
        "filename": "/mlir/include/mlir/Dialect/Utils/StaticValueUtils.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/include/mlir/Dialect/Vector/Transforms/VectorDistribution.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/include/mlir/Dialect/Vector/Utils/VectorUtils.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/include/mlir/IR/OpImplementation.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/include/mlir/Pass/Pass.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/include/mlir/Target/LLVMIR/Dialect/All.h",
        "new_functions": [],
        "functions": [
            "mlir|None|registerAllFromLLVMIRTranslations",
            "mlir|None|registerAllGPUToLLVMIRTranslations",
            "mlir|None|registerAllToLLVMIRTranslations"
        ]
    },
    {
        "filename": "/mlir/include/mlir/Target/LLVMIR/ModuleImport.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/include/mlir/Target/LLVMIR/ModuleTranslation.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/include/mlir/Transforms/FoldUtils.h",
        "new_functions": [],
        "functions": [
            "mlir|OperationFolder|OperationFolder"
        ]
    },
    {
        "filename": "/mlir/lib/Analysis/DataFlow/IntegerRangeAnalysis.cpp",
        "new_functions": [],
        "functions": [
            "mlir::dataflow|IntegerRangeAnalysis|visitNonControlFlowArguments"
        ]
    },
    {
        "filename": "/mlir/lib/Bindings/Python/ExecutionEngineModule.cpp",
        "new_functions": [],
        "functions": [
            "|PyExecutionEngine|PyExecutionEngine"
        ]
    },
    {
        "filename": "/mlir/lib/Bindings/Python/IRInterfaces.cpp",
        "new_functions": [],
        "functions": [
            "mlir::python|PyShapedTypeComponents|PyShapedTypeComponents"
        ]
    },
    {
        "filename": "/mlir/lib/Bindings/Python/IRModule.h",
        "new_functions": [],
        "functions": [
            "mlir::python|PyDialectRegistry|PyDialectRegistry"
        ]
    },
    {
        "filename": "/mlir/lib/Bindings/Python/Pass.cpp",
        "new_functions": [],
        "functions": [
            "|PyPassManager|PyPassManager"
        ]
    },
    {
        "filename": "/mlir/lib/CAPI/Dialect/AMDGPU.cpp",
        "new_functions": [
            "None|None|mlirGetDialectHandle__ml_program__"
        ],
        "functions": [
            "None|None|mlirAMDGPUDialectGetNamespace",
            "None|None|mlirContextLoadAMDGPUDialect",
            "None|None|mlirDialectRegistryInsertAMDGPUDialect"
        ]
    },
    {
        "filename": "/mlir/lib/CAPI/IR/IR.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Conversion/ArithToLLVM/ArithToLLVM.cpp",
        "new_functions": [],
        "functions": [
            "|CmpFOpLowering|matchAndRewrite"
        ]
    },
    {
        "filename": "/mlir/lib/Conversion/ArmSMEToLLVM/ArmSMEToLLVM.cpp",
        "new_functions": [],
        "functions": [
            "mlir|None|populateArmSMEToLLVMConversionPatterns",
            "|ConvertArmSMEToLLVMPass|runOnOperation"
        ]
    },
    {
        "filename": "/mlir/lib/Conversion/ArmSMEToSCF/ArmSMEToSCF.cpp",
        "new_functions": [
            "|TileVectorPrintOpConversion|matchAndRewrite"
        ],
        "functions": [
            "mlir|None|populateArmSMEToSCFConversionPatterns",
            "|ConvertArmSMEToSCFPass|runOnOperation",
            "|TileLoadOpConversion|matchAndRewrite",
            "|TileLoadOpWithMaskAndPadNonZeroConversion|matchAndRewrite",
            "|TileLoadOpWithMaskAndPadZeroConversion|matchAndRewrite"
        ]
    },
    {
        "filename": "/mlir/lib/Conversion/GPUCommon/GPUToLLVMConversion.cpp",
        "new_functions": [],
        "functions": [
            "None|None|genConstFloat32From",
            "None|None|genConstInt32From",
            "|ConvertSpMMBufferSizeOpToGpuRuntimeCallPattern|matchAndRewrite"
        ]
    },
    {
        "filename": "/mlir/lib/Conversion/GPUToNVVM/LowerGpuOpsToNVVMOps.cpp",
        "new_functions": [],
        "functions": [
            "|LowerGpuOpsToNVVMOpsPass|runOnOperation"
        ]
    },
    {
        "filename": "/mlir/lib/Conversion/GPUToROCDL/LowerGpuOpsToROCDLOps.cpp",
        "new_functions": [],
        "functions": [
            "mlir|None|populateGpuToROCDLConversionPatterns"
        ]
    },
    {
        "filename": "/mlir/lib/Conversion/MathToLibm/MathToLibm.cpp",
        "new_functions": [],
        "functions": [
            "mlir|None|populateMathToLibmConversionPatterns"
        ]
    },
    {
        "filename": "/mlir/lib/Conversion/MemRefToSPIRV/MapMemRefStorageClassPass.cpp",
        "new_functions": [],
        "functions": [
            "None|None|isLegalType"
        ]
    },
    {
        "filename": "/mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp",
        "new_functions": [],
        "functions": [
            "|ConvertNVGPUToNVVMPass|runOnOperation"
        ]
    },
    {
        "filename": "/mlir/lib/Conversion/PDLToPDLInterp/PredicateTree.cpp",
        "new_functions": [],
        "functions": [
            "None|None|foldSwitchToBool"
        ]
    },
    {
        "filename": "/mlir/lib/Conversion/TosaToLinalg/TosaToLinalg.cpp",
        "new_functions": [],
        "functions": [
            "|GenericResizeConverter|matchAndRewrite"
        ]
    },
    {
        "filename": "/mlir/lib/Conversion/TosaToLinalg/TosaToLinalgNamed.cpp",
        "new_functions": [],
        "functions": [
            "None|None|inferDynamicDimsForConv",
            "|FullyConnectedConverter|matchAndRewrite",
            "|None|matchAndRewrite"
        ]
    },
    {
        "filename": "/mlir/lib/Conversion/VectorToArmSME/VectorToArmSME.cpp",
        "new_functions": [
            "None|None|getLoopOverTileSlices"
        ],
        "functions": [
            "mlir|None|populateVectorToArmSMEPatterns",
            "|BroadcastOpToArmSMELowering|matchAndRewrite",
            "|ConstantOpToArmSMELowering|matchAndRewrite",
            "|SplatOpToArmSMELowering|matchAndRewrite",
            "|TransposeOpToArmSMELowering|matchAndRewrite"
        ]
    },
    {
        "filename": "/mlir/lib/Conversion/VectorToGPU/VectorToGPU.cpp",
        "new_functions": [],
        "functions": [
            "None|None|convertTransferReadOp",
            "None|None|getSliceContract",
            "|CombineTransferReadOpTranspose|matchAndRewrite"
        ]
    },
    {
        "filename": "/mlir/lib/Conversion/VectorToSCF/VectorToSCF.cpp",
        "new_functions": [],
        "functions": [
            "::lowering_n_d|DecomposePrintOpConversion|matchAndRewrite"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Affine/IR/AffineOps.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Dialect/ArmSME/Transforms/EnableArmStreaming.cpp",
        "new_functions": [],
        "functions": [
            "mlir::arm_sme|None|createEnableArmStreamingPass",
            "|EnableArmStreamingPass|EnableArmStreamingPass",
            "|EnableArmStreamingPass|runOnOperation"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Bufferization/IR/BufferizationOps.cpp",
        "new_functions": [],
        "functions": [
            "|SimplifyClones|matchAndRewrite"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Bufferization/Transforms/BufferDeallocationSimplification.cpp",
        "new_functions": [],
        "functions": [
            "|SplitDeallocWhenNotAliasingAnyOther|matchAndRewrite"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp",
        "new_functions": [],
        "functions": [
            "None|None|regionOperatesOnMemrefValues"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Complex/IR/ComplexOps.cpp",
        "new_functions": [
            "None|ArithBitcast|matchAndRewrite"
        ],
        "functions": [
            "None|MergeComplexBitcast|matchAndRewrite"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/GPU/Transforms/SPIRVAttachTarget.cpp",
        "new_functions": [],
        "functions": [
            "|SPIRVAttachTarget|runOnOperation"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/LLVMIR/IR/LLVMAttrs.cpp",
        "new_functions": [],
        "functions": [
            "mlir::LLVM|DINodeAttr|classof"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp",
        "new_functions": [],
        "functions": [
            "None|None|printLLVMOpAttrs",
            "|LLVMOpAsmDialectInterface|getAlias"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/LLVMIR/IR/NVVMDialect.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Dialect/LLVMIR/Transforms/TypeConsistency.cpp",
        "new_functions": [],
        "functions": [
            "None|None|gepToByteOffset"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Linalg/IR/LinalgOps.cpp",
        "new_functions": [],
        "functions": [
            "|None|foldFillPackIntoFillOp"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Linalg/TransformOps/LinalgTransformOps.cpp",
        "new_functions": [],
        "functions": [
            "None|None|parseOptionalInterchange",
            "None|None|printOptionalInterchange",
            "|VectorizationPattern|VectorizationPattern",
            "|VectorizationPattern|matchAndRewrite"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Linalg/Transforms/ElementwiseOpFusion.cpp",
        "new_functions": [],
        "functions": [
            "mlir::linalg|None|fuseElementwiseOps",
            "|FuseElementwiseOps|matchAndRewrite"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Linalg/Transforms/Vectorization.cpp",
        "new_functions": [],
        "functions": [
            "None|None|vectorizeConvolution",
            "mlir::linalg|None|vectorize",
            "|Conv1DGenerator|depthwiseConv",
            "|Conv1DGenerator|depthwiseConv1dSliceAsMulAcc",
            "|Conv1DGenerator|generateDilatedConv"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Math/IR/MathOps.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Dialect/MemRef/IR/MemRefOps.cpp",
        "new_functions": [
            "::saturated_arith|Wrapper|asOffset",
            "::saturated_arith|Wrapper|asSize",
            "::saturated_arith|Wrapper|asStride",
            "::saturated_arith|Wrapper|offset",
            "::saturated_arith|Wrapper|operator!=",
            "::saturated_arith|Wrapper|operator*",
            "::saturated_arith|Wrapper|operator+",
            "::saturated_arith|Wrapper|operator==",
            "::saturated_arith|Wrapper|size",
            "::saturated_arith|Wrapper|stride"
        ],
        "functions": [
            "None|None|computeCollapsedLayoutMap",
            "None|None|computeExpandedLayoutMap"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Mesh/IR/MeshOps.cpp",
        "new_functions": [
            "None|None|isMeshDimensionDynamic"
        ],
        "functions": [
            "None|None|collectiveDeviceGroupSize"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/NVGPU/TransformOps/NVGPUTransformOps.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Dialect/SCF/IR/SCF.cpp",
        "new_functions": [
            "|LastTensorLoadCanonicalization|matchAndRewrite"
        ],
        "functions": [
            "|ParallelOpSingleOrZeroIterationDimsFolder|matchAndRewrite"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/SCF/Transforms/LoopPipelining.cpp",
        "new_functions": [],
        "functions": [
            "|LoopPipelinerInternal|analyzeCrossStageValues",
            "|LoopPipelinerInternal|createKernel",
            "|LoopPipelinerInternal|createKernelLoop",
            "|LoopPipelinerInternal|emitEpilogue",
            "|LoopPipelinerInternal|emitPrologue",
            "|LoopPipelinerInternal|initializeLoopInfo"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/SPIRV/IR/SPIRVCanonicalization.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Dialect/SPIRV/IR/SPIRVOps.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Dialect/Shape/IR/Shape.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Dialect/SparseTensor/IR/SparseTensorDialect.cpp",
        "new_functions": [],
        "functions": [
            "mlir::sparse_tensor|None|isBlockSparsity"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/SparseTensor/Transforms/CodegenEnv.cpp",
        "new_functions": [
            "mlir::sparse_tensor|CodegenEnv|clearValidLexInsert",
            "mlir::sparse_tensor|CodegenEnv|setValidLexInsert"
        ],
        "functions": [
            "mlir::sparse_tensor|CodegenEnv|atExpandLevel",
            "mlir::sparse_tensor|CodegenEnv|getCustomRedId",
            "mlir::sparse_tensor|CodegenEnv|startReduc",
            "mlir::sparse_tensor|CodegenEnv|updateReduc"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/SparseTensor/Transforms/CodegenEnv.h",
        "new_functions": [
            "mlir::sparse_tensor|CodegenEnv|getLoopDepth"
        ],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Dialect/SparseTensor/Transforms/LoopEmitter.cpp",
        "new_functions": [
            "None|None|loadSliceNextPosPtrStart",
            "None|None|loadSlicePosPtr",
            "None|None|updateSlicePosPtr",
            "mlir::sparse_tensor|LoopEmitter|forwardsReducedSliceLevelTreeIt",
            "mlir::sparse_tensor|LoopEmitter|invalidateSliceIterIdx"
        ],
        "functions": [
            "mlir::sparse_tensor|LoopEmitter|enterTensorsAtDenseLvls",
            "mlir::sparse_tensor|LoopEmitter|exitForLoop",
            "mlir::sparse_tensor|LoopEmitter|exitWhileLoop",
            "mlir::sparse_tensor|LoopEmitter|genResolvedSliceBegin",
            "mlir::sparse_tensor|LoopEmitter|genSliceBegin",
            "mlir::sparse_tensor|LoopEmitter|genSliceNextInduction",
            "mlir::sparse_tensor|LoopEmitter|genUnResolvedSliceBegin",
            "mlir::sparse_tensor|LoopEmitter|genUnResolvedSliceTreeTraverse",
            "mlir::sparse_tensor|LoopEmitter|genWhileLoopBody",
            "mlir::sparse_tensor|LoopEmitter|initialize"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/SparseTensor/Transforms/LoopEmitter.h",
        "new_functions": [],
        "functions": [
            "mlir::sparse_tensor|LoopEmitter|getCurrentDepth",
            "mlir::sparse_tensor|LoopEmitter|getLoopIV",
            "mlir::sparse_tensor|SliceInfo|SliceInfo"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/SparseTensor/Transforms/SparseBufferRewriting.cpp",
        "new_functions": [],
        "functions": [
            "None|None|createQuickSort"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/SparseTensor/Transforms/SparseGPUCodegen.cpp",
        "new_functions": [],
        "functions": [
            "|None|genGPUCode"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/SparseTensor/Transforms/SparseReinterpretMap.cpp",
        "new_functions": [],
        "functions": [
            "|GenericOpScheduler|matchAndRewrite"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/SparseTensor/Transforms/Sparsification.cpp",
        "new_functions": [],
        "functions": [
            "None|None|endIf",
            "None|None|endLoop",
            "None|None|endLoopSeq",
            "None|None|finalizeWhileOp",
            "None|None|findDepIdxSet",
            "None|None|genCoIteration",
            "None|None|genExp",
            "None|None|genExpand",
            "None|None|genIf",
            "None|None|genInsertionStore",
            "None|None|genInvariants",
            "None|None|genLoop",
            "None|None|genStmt",
            "None|None|isInvariantAffine",
            "None|None|relinkBranch",
            "None|None|shouldTryParallize",
            "None|None|startLoop",
            "None|None|startLoopSeq",
            "None|None|translateBitsToTidLvlPairs"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/SparseTensor/Transforms/SparsificationAndBufferizationPass.cpp",
        "new_functions": [],
        "functions": [
            "mlir::sparse_tensor|SparsificationAndBufferizationPass|runOnOperation"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Tensor/IR/TensorOps.cpp",
        "new_functions": [
            "None|None|operandsAndShape"
        ],
        "functions": [
            "|None|matchAndRewrite",
            "|ReplaceEmptyTensorStaticShapeDims|matchAndRewrite",
            "|StaticTensorGenerate|matchAndRewrite"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Tensor/TransformOps/TensorTransformOps.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Dialect/Tosa/IR/TosaOps.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Dialect/Tosa/Transforms/TosaInferShapes.cpp",
        "new_functions": [],
        "functions": [
            "|None|propagateShapesInRegion",
            "|TosaInferShapes|runOnOperation"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Transform/IR/TransformInterfaces.cpp",
        "new_functions": [],
        "functions": [
            "mlir::transform|RegionScope|~RegionScope",
            "mlir::transform|TrackingListener|TrackingListener",
            "mlir::transform|TrackingListener|notifyOperationReplaced",
            "mlir::transform|TransformState|TransformState",
            "mlir::transform|TransformState|applyTransform",
            "mlir::transform|TransformState|replacePayloadOp"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Utils/IndexingUtils.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Dialect/Utils/StaticValueUtils.cpp",
        "new_functions": [],
        "functions": [
            "mlir|None|foldDynamicIndexList"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Vector/IR/VectorOps.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Dialect/Vector/Transforms/VectorDistribute.cpp",
        "new_functions": [],
        "functions": [
            "mlir::vector|None|populateDistributeTransferWriteOpPatterns",
            "|WarpOpTransferWrite|WarpOpTransferWrite",
            "|WarpOpTransferWrite|tryExtractOp"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Vector/Transforms/VectorTransferOpTransforms.cpp",
        "new_functions": [
            "None|None|hasMatchingInnerContigousShape"
        ],
        "functions": [
            "None|None|createMaskDropNonScalableUnitDims",
            "|FlattenContiguousRowMajorTransferReadPattern|matchAndRewrite",
            "|FlattenContiguousRowMajorTransferWritePattern|matchAndRewrite",
            "|TransferReadDropUnitDimsPattern|matchAndRewrite",
            "|TransferWriteDropUnitDimsPattern|matchAndRewrite"
        ]
    },
    {
        "filename": "/mlir/lib/Dialect/Vector/Utils/VectorUtils.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/ExecutionEngine/CudaRuntimeWrappers.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/IR/AsmPrinter.cpp",
        "new_functions": [],
        "functions": [
            "mlir|Impl|printTypeImpl"
        ]
    },
    {
        "filename": "/mlir/lib/IR/Builders.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/IR/Verifier.cpp",
        "new_functions": [],
        "functions": [
            "|OperationVerifier|verifyDominanceOfContainedRegions"
        ]
    },
    {
        "filename": "/mlir/lib/Pass/Pass.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Pass/PassDetail.h",
        "new_functions": [
            "mlir|PassExecutionAction|PassExecutionAction",
            "mlir|PassExecutionAction|getOp",
            "mlir|PassExecutionAction|getPass"
        ],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Target/LLVMIR/DebugImporter.cpp",
        "new_functions": [],
        "functions": [
            "mlir::LLVM::detail|DebugImporter|translate",
            "mlir::LLVM::detail|DebugImporter|translateLoc"
        ]
    },
    {
        "filename": "/mlir/lib/Target/LLVMIR/DebugImporter.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Target/LLVMIR/DebugTranslation.cpp",
        "new_functions": [],
        "functions": [
            "mlir::LLVM::detail|DebugTranslation|translate",
            "mlir::LLVM::detail|DebugTranslation|translateLoc"
        ]
    },
    {
        "filename": "/mlir/lib/Target/LLVMIR/DebugTranslation.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Target/LLVMIR/Dialect/GPU/SelectObjectAttr.cpp",
        "new_functions": [],
        "functions": [
            "llvm::|LaunchKernel|LaunchKernel",
            "llvm::|LaunchKernel|createKernelLaunch",
            "llvm::|LaunchKernel|getKernelLaunchFn",
            "llvm::|LaunchKernel|getModuleLoadFn"
        ]
    },
    {
        "filename": "/mlir/lib/Target/LLVMIR/Dialect/LLVMIR/LLVMToLLVMIRTranslation.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/lib/Target/LLVMIR/ModuleImport.cpp",
        "new_functions": [],
        "functions": [
            "mlir::LLVM|ModuleImport|convertGlobal",
            "mlir::LLVM|ModuleImport|processDebugIntrinsic",
            "mlir::LLVM|ModuleImport|processFunctionAttributes"
        ]
    },
    {
        "filename": "/mlir/lib/Target/LLVMIR/ModuleTranslation.cpp",
        "new_functions": [],
        "functions": [
            "mlir::LLVM|ModuleTranslation|convertGlobals",
            "mlir::LLVM|ModuleTranslation|convertOneFunction"
        ]
    },
    {
        "filename": "/mlir/lib/Transforms/Utils/FoldUtils.cpp",
        "new_functions": [],
        "functions": [
            "mlir|OperationFolder|insertKnownConstant",
            "mlir|OperationFolder|tryGetOrCreateConstant"
        ]
    },
    {
        "filename": "/mlir/lib/Transforms/Utils/GreedyPatternRewriteDriver.cpp",
        "new_functions": [],
        "functions": [
            "|GreedyPatternRewriteDriver|notifyOperationReplaced"
        ]
    },
    {
        "filename": "/mlir/test/lib/Dialect/SCF/TestSCFUtils.cpp",
        "new_functions": [],
        "functions": [
            "|TestSCFPipeliningPass|runOnOperation"
        ]
    },
    {
        "filename": "/mlir/test/lib/Dialect/Vector/TestVectorTransforms.cpp",
        "new_functions": [],
        "functions": [
            "|TestFlattenVectorTransferPatterns|getDependentDialects",
            "|TestVectorDistribution|runOnOperation"
        ]
    },
    {
        "filename": "/mlir/test/lib/IR/TestClone.cpp",
        "new_functions": [],
        "functions": [
            "|ClonePass|runOnOperation"
        ]
    },
    {
        "filename": "/mlir/test/lib/Transforms/TestIntRangeInference.cpp",
        "new_functions": [],
        "functions": [
            "|TestIntRangeInference|runOnOperation"
        ]
    },
    {
        "filename": "/mlir/tools/mlir-opt/mlir-opt.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/mlir/unittests/Pass/PassManagerTest.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/openmp/libomptarget/include/ExclusiveAccess.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/openmp/libomptarget/include/OpenMP/InternalTypes.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/openmp/libomptarget/include/OpenMP/Mapping.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/openmp/libomptarget/include/PluginManager.h",
        "new_functions": [],
        "functions": [
            "None|PluginManager|PluginManager"
        ]
    },
    {
        "filename": "/openmp/libomptarget/include/Shared/Debug.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/openmp/libomptarget/include/Shared/Profile.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/openmp/libomptarget/include/device.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/openmp/libomptarget/include/omptarget.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/openmp/libomptarget/plugins-nextgen/amdgpu/dynamic_hsa/hsa_ext_amd.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp",
        "new_functions": [],
        "functions": [
            "llvm::omp::target::plugin|AMDGPUDeviceTy|callGlobalCtorDtorCommon"
        ]
    },
    {
        "filename": "/openmp/libomptarget/plugins-nextgen/common/include/GlobalHandler.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/openmp/libomptarget/plugins-nextgen/common/include/PluginInterface.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/openmp/libomptarget/plugins-nextgen/common/src/GlobalHandler.cpp",
        "new_functions": [],
        "functions": [
            "llvm::omp::target::plugin|GenericGlobalHandlerTy|getGlobalMetadataFromELF",
            "llvm::omp::target::plugin|GenericGlobalHandlerTy|readGlobalFromImage"
        ]
    },
    {
        "filename": "/openmp/libomptarget/plugins-nextgen/common/src/PluginInterface.cpp",
        "new_functions": [],
        "functions": [
            "None|None|__tgt_rtl_init_requires"
        ]
    },
    {
        "filename": "/openmp/libomptarget/plugins-nextgen/common/src/RPC.cpp",
        "new_functions": [],
        "functions": [
            "llvm::omp::target|RPCServerTy|isDeviceUsingRPC"
        ]
    },
    {
        "filename": "/openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp",
        "new_functions": [],
        "functions": [
            "llvm::omp::target::plugin|CUDADeviceTy|callGlobalCtorDtorCommon"
        ]
    },
    {
        "filename": "/openmp/libomptarget/src/OpenMP/InteropAPI.cpp",
        "new_functions": [],
        "functions": [
            "None|None|__tgt_interop_destroy",
            "None|None|__tgt_interop_init",
            "None|None|__tgt_interop_use"
        ]
    },
    {
        "filename": "/openmp/libomptarget/src/OpenMP/Mapping.cpp",
        "new_functions": [],
        "functions": [
            "None|None|dumpTargetPointerMappings"
        ]
    },
    {
        "filename": "/openmp/libomptarget/src/PluginManager.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/openmp/libomptarget/src/device.cpp",
        "new_functions": [
            "None|DeviceTy|associatePtr",
            "None|DeviceTy|deallocTgtPtrAndEntry",
            "None|DeviceTy|disassociatePtr",
            "None|DeviceTy|eraseMapEntry",
            "None|DeviceTy|getTargetPointer",
            "None|DeviceTy|getTgtPtrBegin",
            "None|DeviceTy|initOnce",
            "None|DeviceTy|lookupMapping",
            "None|None|deviceIsReady",
            "None|None|printCopyInfo"
        ],
        "functions": [
            "None|DeviceTy|DeviceTy",
            "None|DeviceTy|init",
            "None|DeviceTy|loadBinary",
            "None|DeviceTy|printDeviceInfo",
            "None|DeviceTy|retrieveData",
            "None|DeviceTy|submitData",
            "None|HostDataToTargetTy|addEventIfNecessary"
        ]
    },
    {
        "filename": "/openmp/libomptarget/src/interface.cpp",
        "new_functions": [],
        "functions": [
            "None|None|__tgt_activate_record_replay",
            "None|None|__tgt_init_all_rtls",
            "None|None|__tgt_print_device_info",
            "None|None|__tgt_register_lib",
            "None|None|__tgt_register_requires",
            "None|None|__tgt_set_info_flag",
            "None|None|__tgt_target_kernel_replay",
            "None|None|__tgt_target_nowait_query",
            "None|None|__tgt_unregister_lib",
            "None|None|targetData",
            "None|None|targetKernel"
        ]
    },
    {
        "filename": "/openmp/libomptarget/src/omptarget.cpp",
        "new_functions": [
            "None|None|handleDefaultTargetOffload",
            "None|None|isOffloadDisabled"
        ],
        "functions": [
            "None|None|checkDeviceAndCtors",
            "None|None|handleTargetOutcome",
            "None|None|initLibrary",
            "None|None|postProcessingTargetDataEnd",
            "None|None|targetAllocExplicit",
            "None|None|targetDataBegin",
            "None|None|targetDataContiguous",
            "None|None|targetDataEnd",
            "None|None|targetFreeExplicit",
            "None|None|targetLockExplicit",
            "None|None|targetUnlockExplicit",
            "|None|processDataAfter",
            "|None|processDataBefore"
        ]
    },
    {
        "filename": "/openmp/libomptarget/src/private.h",
        "new_functions": [
            "None|TargetMemcpyArgsTy|TargetMemcpyArgsTy"
        ],
        "functions": []
    },
    {
        "filename": "/openmp/libomptarget/test/offloading/ctor_dtor.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/openmp/runtime/src/kmp_os.h",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/openmp/runtime/src/z_Linux_util.cpp",
        "new_functions": [],
        "functions": []
    },
    {
        "filename": "/polly/lib/Analysis/ScopBuilder.cpp",
        "new_functions": [],
        "functions": [
            "polly|ScopBuilder|checkForReductions"
        ]
    },
    {
        "filename": "/polly/lib/External/isl/interface/extract_interface.cc",
        "new_functions": [],
        "functions": []
    }
]