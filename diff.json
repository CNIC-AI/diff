{
    "data": [
        {
            "filename": "/bolt/lib/Passes/SplitFunctions.cpp",
            "functions": [
                "int:findSplitIndex:const int &, const int &"
            ]
        },
        {
            "filename": "/bolt/lib/Target/AArch64/AArch64MCPlusBuilder.cpp",
            "functions": [
                "bool:isRegToRegMove:const int &, int &, int &"
            ]
        },
        {
            "filename": "/clang-tools-extra/clang-doc/Mapper.cpp",
            "functions": [
                "int:getFile:const int *, const int &, int, bool &"
            ]
        },
        {
            "filename": "/clang-tools-extra/clang-tidy/ClangTidy.cpp",
            "functions": [
                "void:finish:",
                "void:reportDiagnostic:const ClangTidyError &"
            ]
        },
        {
            "filename": "/clang-tools-extra/clang-tidy/ExpandModularHeadersPPCallbacks.cpp",
            "functions": [
                "void:InclusionDirective:int, const int &, int, bool, int, int, int, int, const int *, int"
            ]
        },
        {
            "filename": "/clang-tools-extra/clang-tidy/hicpp/HICPPTidyModule.cpp",
            "functions": [
                "void:addCheckFactories:ClangTidyCheckFactories &"
            ]
        },
        {
            "filename": "/clang-tools-extra/clang-tidy/misc/IncludeCleanerCheck.cpp",
            "functions": [
                "void:check:const int &"
            ]
        },
        {
            "filename": "/clang-tools-extra/clang-tidy/modernize/ModernizeTidyModule.cpp",
            "functions": [
                "void:addCheckFactories:ClangTidyCheckFactories &"
            ]
        },
        {
            "filename": "/clang-tools-extra/clang-tidy/performance/UnnecessaryCopyInitialization.cpp",
            "functions": [
                "void:check:const int &"
            ]
        },
        {
            "filename": "/clang-tools-extra/clang-tidy/readability/ContainerContainsCheck.cpp",
            "functions": [
                "void:check:const int &"
            ]
        },
        {
            "filename": "/clang-tools-extra/clang-tidy/readability/FunctionCognitiveComplexityCheck.cpp",
            "functions": [
                "CognitiveComplexity::Criteria:operator&:CognitiveComplexity::Criteria, CognitiveComplexity::Criteria",
                "CognitiveComplexity::Criteria:operator|:CognitiveComplexity::Criteria, CognitiveComplexity::Criteria"
            ]
        },
        {
            "filename": "/clang-tools-extra/clangd/IncludeCleaner.cpp",
            "functions": [
                "IncludeCleanerFindings:computeIncludeCleanerFindings:ParsedAST &"
            ]
        },
        {
            "filename": "/clang-tools-extra/clangd/SemanticHighlighting.cpp",
            "functions": [
                "Constructor:HighlightingsBuilder:const ParsedAST &, const HighlightingFilter &"
            ]
        },
        {
            "filename": "/clang-tools-extra/modularize/ModuleAssistant.cpp",
            "functions": [
                "bool:addModuleDescription:Module *, int, int, DependencyMap &, bool"
            ]
        },
        {
            "filename": "/clang-tools-extra/pseudo/include/clang-pseudo/Token.h",
            "functions": [
                "bool:flag:",
                "void:setFlag:"
            ]
        },
        {
            "filename": "/clang/include/clang/AST/Expr.h",
            "functions": [
                "Expr *:getVal2:",
                "bool:isCmpXChg:"
            ]
        },
        {
            "filename": "/clang/include/clang/AST/Type.h",
            "functions": [
                "const int &:operator<<:const int &, int"
            ]
        },
        {
            "filename": "/clang/include/clang/Basic/DirectoryEntry.h",
            "functions": [
                "const DirectoryEntry *:operator const clang::DirectoryEntry *:"
            ]
        },
        {
            "filename": "/clang/include/clang/Basic/FileEntry.h",
            "functions": [
                "const FileEntry *:operator const clang::FileEntry *:",
                "int:getName:"
            ]
        },
        {
            "filename": "/clang/include/clang/Basic/LangOptions.h",
            "functions": [
                "Constructor:FPOptions:const LangOptions &"
            ]
        },
        {
            "filename": "/clang/include/clang/Basic/SourceManager.h",
            "functions": [
                "const int *:getFileEntryForID:int",
                "const int *:getFileEntryForSLocEntry:const SrcMgr::SLocEntry &"
            ]
        },
        {
            "filename": "/clang/include/clang/Basic/SyncScope.h",
            "functions": [
                "SyncScope:map:unsigned int",
                "bool:isValid:unsigned int",
                "int:create:AtomicScopeModelKind",
                "int:getAsString:SyncScope",
                "int:getRuntimeValues:"
            ]
        },
        {
            "filename": "/clang/include/clang/Format/Format.h",
            "functions": [
                "bool:operator==:const FormatStyle &"
            ]
        },
        {
            "filename": "/clang/include/clang/Lex/ModuleMap.h",
            "functions": [
                "int:getBuiltinDir:"
            ]
        },
        {
            "filename": "/clang/include/clang/Serialization/ModuleFile.h",
            "functions": [
                "int:getFile:"
            ]
        },
        {
            "filename": "/clang/lib/AST/ExprConstant.cpp",
            "functions": [
                "EvalStmtResult:EvaluateStmt:StmtResult &, EvalInfo &, const int *, const int *",
                "bool:CheckConstexprFunction:EvalInfo &, SourceLocation, const FunctionDecl *, const FunctionDecl *, const int *",
                "bool:VisitMaterializeTemporaryExpr:const int *",
                "bool:VisitVarDecl:const Expr *, const VarDecl *"
            ]
        },
        {
            "filename": "/clang/lib/AST/Interp/ByteCodeEmitter.cpp",
            "functions": [
                "int:compileFunc:const FunctionDecl *"
            ]
        },
        {
            "filename": "/clang/lib/AST/Interp/Interp.h",
            "functions": [
                "bool:ArrayDecay:InterpState &, CodePtr",
                "bool:CastFloatingIntegral:"
            ]
        },
        {
            "filename": "/clang/lib/AST/Interp/InterpBuiltin.cpp",
            "functions": [
                "bool:InterpretBuiltin:InterpState &, CodePtr, const Function *, const int *"
            ]
        },
        {
            "filename": "/clang/lib/AST/Interp/InterpFrame.cpp",
            "functions": [
                "SourceInfo:getSource:CodePtr",
                "SourceRange:getRange:CodePtr"
            ]
        },
        {
            "filename": "/clang/lib/AST/MicrosoftMangle.cpp",
            "functions": [
                "void:mangleCXXRTTICompleteObjectLocator:const int *, int, int &"
            ]
        },
        {
            "filename": "/clang/lib/AST/RecordLayoutBuilder.cpp",
            "functions": [
                "void:layoutNonVirtualBase:const int *, const int *, const int &, const int *&"
            ]
        },
        {
            "filename": "/clang/lib/AST/StmtPrinter.cpp",
            "functions": [
                "void:VisitAtomicExpr:int *"
            ]
        },
        {
            "filename": "/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp",
            "functions": [
                "int *:getMemberForAccessor:const int &"
            ]
        },
        {
            "filename": "/clang/lib/Analysis/FlowSensitive/HTMLLogger.cpp",
            "functions": [
                "void:dump:const int &",
                "void:writeCode:"
            ]
        },
        {
            "filename": "/clang/lib/Analysis/FlowSensitive/Models/UncheckedOptionalAccessModel.cpp",
            "functions": [
                "int &:createOptionalValue:int &, int &, int &",
                "int &:valueOrConversionHasValue:const int &, const int &, const int &, int &",
                "int *:getHasValue:int &, int *",
                "int:diagnoseUnwrapCall:const int *, const int &",
                "void:buildTransferMatchSwitch:",
                "void:transferArrowOpCall:const int *, const int *, int &",
                "void:transferOptionalAndOptionalCmp:const int *, const int &, int &",
                "void:transferOptionalAndValueCmp:const int *, const int *, int &",
                "void:transferOptionalHasValueCall:const int *, const int &, int &",
                "void:transferSwap:int *, int *, int &",
                "void:transferUnwrapCall:const int *, const int *, int &",
                "void:transferValueOrImpl:const int *, const int &, int &, const int &(*)(int &, const int &, const int &)"
            ]
        },
        {
            "filename": "/clang/lib/Analysis/FlowSensitive/Transfer.cpp",
            "functions": [
                "void:VisitInitListExpr:const int *"
            ]
        },
        {
            "filename": "/clang/lib/Analysis/ThreadSafety.cpp",
            "functions": [
                "void:VisitDeclStmt:const int *",
                "void:VisitMaterializeTemporaryExpr:const int *",
                "void:handleCall:const int *, const int *, int *, int",
                "void:runAnalysis:int &"
            ]
        },
        {
            "filename": "/clang/lib/Analysis/UninitializedValues.cpp",
            "functions": [
                "bool:isTrackedVar:const int *, const int *"
            ]
        },
        {
            "filename": "/clang/lib/Analysis/UnsafeBufferUsage.cpp",
            "functions": [
                "bool:classof:const Gadget *"
            ]
        },
        {
            "filename": "/clang/lib/Basic/Cuda.cpp",
            "functions": [
                "int:MinVersionForCudaArch:int"
            ]
        },
        {
            "filename": "/clang/lib/Basic/Module.cpp",
            "functions": [
                "bool:isPlatformEnvironment:const int &, int"
            ]
        },
        {
            "filename": "/clang/lib/Basic/Targets/OSTargets.cpp",
            "functions": [
                "void:addVisualCDefines:const int &, int &"
            ]
        },
        {
            "filename": "/clang/lib/Basic/Targets/RISCV.cpp",
            "functions": [
                "bool:hasFeature:int",
                "void:getTargetDefines:const int &, int &"
            ]
        },
        {
            "filename": "/clang/lib/CodeGen/BackendUtil.cpp",
            "functions": [
                "void:RunOptimizationPipeline:int, int &, int &, BackendConsumer *"
            ]
        },
        {
            "filename": "/clang/lib/CodeGen/CGAtomic.cpp",
            "functions": [
                "RValue:EmitAtomicExpr:int *",
                "llvm::Value *:EmitPostAtomicMinMax:CGBuilderTy &, int, bool, llvm::Value *, llvm::Value *",
                "std::pair<llvm::Value *, llvm::Value *>:EmitAtomicCompareExchangeOp:llvm::Value *, llvm::Value *, int, int, bool",
                "void:EmitAtomicOp:CodeGenFunction &, int *, Address, Address, Address, Address, llvm::Value *, llvm::Value *, uint64_t, int, int",
                "void:emitAtomicCmpXchg:CodeGenFunction &, int *, bool, Address, Address, Address, Address, uint64_t, int, int, int"
            ]
        },
        {
            "filename": "/clang/lib/CodeGen/CGBuiltin.cpp",
            "functions": [
                "RValue:EmitBinaryAtomicPost:CodeGenFunction &, int, const int *, int, bool",
                "RValue:EmitBuiltinExpr:const GlobalDecl, unsigned int, const int *, ReturnValueSlot",
                "Value *:EmitAArch64BuiltinExpr:unsigned int, const int *, int",
                "Value *:EmitAArch64SVEBuiltinExpr:unsigned int, const int *",
                "Value *:EmitAMDGPUBuiltinExpr:unsigned int, const int *",
                "Value *:EmitAtomicCmpXchg128ForMSIntrin:CodeGenFunction &, const int *, int",
                "Value *:EmitAtomicCmpXchgForMSIntrin:CodeGenFunction &, const int *, int",
                "Value *:EmitAtomicDecrementValue:CodeGenFunction &, const int *, int",
                "Value *:EmitAtomicIncrementValue:CodeGenFunction &, const int *, int",
                "Value *:EmitNVPTXBuiltinExpr:unsigned int, const int *",
                "Value *:EmitSystemZBuiltinExpr:unsigned int, const int *",
                "Value *:MakeAtomicCmpXchgValue:CodeGenFunction &, const int *, bool",
                "Value *:MakeBinaryAtomicValue:CodeGenFunction &, int, const int *, int",
                "llvm::Value *:EmitBitTestIntrinsic:CodeGenFunction &, unsigned int, const int *"
            ]
        },
        {
            "filename": "/clang/lib/CodeGen/CGCUDANV.cpp",
            "functions": [
                "void:createOffloadingEntries:"
            ]
        },
        {
            "filename": "/clang/lib/CodeGen/CGCall.cpp",
            "functions": [
                "RValue:EmitCall:const CGFunctionInfo &, const CGCallee &, ReturnValueSlot, const CallArgList &, int **, bool, int"
            ]
        },
        {
            "filename": "/clang/lib/CodeGen/CGCall.h",
            "functions": [
                "FnInfoOpts:operator&:FnInfoOpts, FnInfoOpts",
                "FnInfoOpts:operator|:FnInfoOpts, FnInfoOpts"
            ]
        },
        {
            "filename": "/clang/lib/CodeGen/CGDebugInfo.cpp",
            "functions": [
                "int *:CreateRecordStaticField:const VarDecl *, int *, const RecordDecl *",
                "void:CreateCompileUnit:",
                "void:finalize:"
            ]
        },
        {
            "filename": "/clang/lib/CodeGen/CGExpr.cpp",
            "functions": [
                "Address:emitArraySubscriptGEP:CodeGenFunction &, Address, int, QualType, bool, bool, int, QualType *, const Expr *, const llvm::Twine &",
                "LValue:EmitLValueForField:LValue, const FieldDecl *"
            ]
        },
        {
            "filename": "/clang/lib/CodeGen/CGExprComplex.cpp",
            "functions": [
                "ComplexPairTy:EmitBinDiv:const BinOpInfo &",
                "ComplexPairTy:EmitBinMul:const BinOpInfo &"
            ]
        },
        {
            "filename": "/clang/lib/CodeGen/CGExprScalar.cpp",
            "functions": [
                "LValue:EmitCompoundAssignLValue:const int *, Value *((anonymous namespace)::ScalarExprEmitter::*)(const BinOpInfo &), Value *&"
            ]
        },
        {
            "filename": "/clang/lib/CodeGen/CGHLSLRuntime.cpp",
            "functions": [
                "void:annotateHLSLResource:const VarDecl *, GlobalVariable *",
                "void:finishCodeGen:"
            ]
        },
        {
            "filename": "/clang/lib/CodeGen/CGOpenMPRuntime.cpp",
            "functions": [
                "void:generateInfoForComponentList:int, int, int, int, MapCombinedInfoTy &, StructRangeInfoTy &, bool, bool, const ValueDecl *, bool, const ValueDecl *, const Expr *, int"
            ]
        },
        {
            "filename": "/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp",
            "functions": [
                "Address:getParameterAddress:CodeGenFunction &, const VarDecl *, const VarDecl *",
                "void:emitOutlinedFunctionCall:CodeGenFunction &, int, int, int",
                "void:processRequiresDirective:const int *"
            ]
        },
        {
            "filename": "/clang/lib/CodeGen/CGStmtOpenMP.cpp",
            "functions": [
                "std::pair<bool, RValue>:emitOMPAtomicRMW:CodeGenFunction &, LValue, RValue, int, int, bool",
                "void:emitOMPSimdRegion:CodeGenFunction &, const OMPLoopDirective &, PrePostActionTy &"
            ]
        },
        {
            "filename": "/clang/lib/CodeGen/CodeGenModule.cpp",
            "functions": [
                "ConstantAddress:GetAddrOfGlobalTemporary:const int *, const Expr *",
                "llvm::Constant *:GetOrCreateMultiVersionResolver:GlobalDecl",
                "void:emitMultiVersionFunctions:"
            ]
        },
        {
            "filename": "/clang/lib/CodeGen/CodeGenTBAA.cpp",
            "functions": [
                "int *:getBaseTypeInfo:QualType",
                "int *:getBaseTypeInfoHelper:const Type *",
                "int *:getTypeInfoHelper:const Type *"
            ]
        },
        {
            "filename": "/clang/lib/CodeGen/Targets/AMDGPU.cpp",
            "functions": [
                "int:getLLVMSyncScopeID:const int &, int, int, int &"
            ]
        },
        {
            "filename": "/clang/lib/Driver/ToolChains/Arch/AArch64.cpp",
            "functions": [
                "std::string:getAArch64TargetCPU:const int &, const int &, int *&",
                "void:getAArch64TargetFeatures:const int &, const int &, const int &, int &, bool"
            ]
        },
        {
            "filename": "/clang/lib/Driver/ToolChains/Arch/RISCV.cpp",
            "functions": [
                "void:getRISCFeaturesFromMcpu:const int &, const int *, const int &, int, int &",
                "void:getRISCVTargetFeatures:const int &, const int &, const int &, int &"
            ]
        },
        {
            "filename": "/clang/lib/Driver/ToolChains/Arch/X86.cpp",
            "functions": [
                "void:getX86TargetFeatures:const int &, const int &, const int &, int &"
            ]
        },
        {
            "filename": "/clang/lib/Driver/ToolChains/Clang.cpp",
            "functions": [
                "void:RenderFloatingPointOptions:const int &, const int &, bool, const int &, int &, const int &"
            ]
        },
        {
            "filename": "/clang/lib/Driver/ToolChains/CommonArgs.cpp",
            "functions": [
                "void:addFortranRuntimeLibs:const int &, const int &, int &",
                "void:addMachineOutlinerArgs:const int &, const int &, int &, const int &, bool, const int"
            ]
        },
        {
            "filename": "/clang/lib/Driver/ToolChains/Cuda.cpp",
            "functions": [
                "int:getCudaVersion:uint32_t",
                "void:getNVPTXTargetFeatures:const int &, const int &, const int &, int &"
            ]
        },
        {
            "filename": "/clang/lib/Driver/ToolChains/Flang.cpp",
            "functions": [
                "void:processVSRuntimeLibrary:const int &, const int &, int &"
            ]
        },
        {
            "filename": "/clang/lib/Driver/ToolChains/HIPUtility.cpp",
            "functions": [
                "void:constructGenerateObjFileFromHIPFatBinary:int &, const int &, const int &, const int &, const int &, const int &"
            ]
        },
        {
            "filename": "/clang/lib/ExtractAPI/ExtractAPIConsumer.cpp",
            "functions": [
                "bool:operator():int",
                "int:getRelativeIncludeName:const int &, int, bool *"
            ]
        },
        {
            "filename": "/clang/lib/ExtractAPI/Serialization/SymbolGraphSerializer.cpp",
            "functions": [
                "int:getLanguageName:int"
            ]
        },
        {
            "filename": "/clang/lib/Format/ContinuationIndenter.cpp",
            "functions": [
                "unsigned int:getNewLineColumn:const LineState &"
            ]
        },
        {
            "filename": "/clang/lib/Format/Format.cpp",
            "functions": [
                "int:getStyle:int, int, int, int, int *, bool",
                "int:reformat:const FormatStyle &, int, int, unsigned int, unsigned int, unsigned int, int, int *"
            ]
        },
        {
            "filename": "/clang/lib/Format/TokenAnnotator.cpp",
            "functions": [
                "bool:spaceRequiredBefore:const AnnotatedLine &, const FormatToken &"
            ]
        },
        {
            "filename": "/clang/lib/Format/UnwrappedLineFormatter.cpp",
            "functions": [
                "unsigned int:tryFitMultipleLinesInOne:LevelIndentTracker &, int, int",
                "unsigned int:tryMergeSimpleBlock:int, int, unsigned int"
            ]
        },
        {
            "filename": "/clang/lib/Frontend/CompilerInvocation.cpp",
            "functions": [
                "bool:ParsePreprocessorArgs:int &, int &, int &, int, const int &",
                "void:GeneratePreprocessorArgs:const int &, int, const int &, const int &, const int &"
            ]
        },
        {
            "filename": "/clang/lib/Frontend/InitPreprocessor.cpp",
            "functions": [
                "void:InitializePredefinedMacros:const int &, const int &, const int &, const int &, int &"
            ]
        },
        {
            "filename": "/clang/lib/Lex/InitHeaderSearch.cpp",
            "functions": [
                "void:Realize:const int &"
            ]
        },
        {
            "filename": "/clang/lib/Parse/ParseOpenACC.cpp",
            "functions": [
                "OpenACCDirectiveKindEx:getOpenACCDirectiveKind:int",
                "bool:isOpenACCDirectiveKind:int, int",
                "int:ParseOpenACCAtomicKind:int &",
                "int:ParseOpenACCDirectiveKind:int &",
                "int:getOpenACCAtomicKind:int"
            ]
        },
        {
            "filename": "/clang/lib/Sema/Sema.cpp",
            "functions": [
                "void:checkUndefinedButUsed:int &"
            ]
        },
        {
            "filename": "/clang/lib/Sema/SemaChecking.cpp",
            "functions": [
                "bool:CheckInvalidVLENandLMUL:const int &, int *, int &, int, int",
                "bool:isValidOrderingForOp:int64_t, int",
                "int:SemaBuiltinDumpStruct:int &, int *"
            ]
        },
        {
            "filename": "/clang/lib/Sema/SemaDeclAttr.cpp",
            "functions": [
                "void:ProcessDeclAttribute:int &, int *, int *, const int &, const int &"
            ]
        },
        {
            "filename": "/clang/lib/Sema/SemaDeclCXX.cpp",
            "functions": [
                "bool:TryNamespaceTypoCorrection:int &, int &, int *, int &, int, int *"
            ]
        },
        {
            "filename": "/clang/lib/Sema/SemaInit.cpp",
            "functions": [
                "int:CopyObject:int &, int, const int &, int, bool",
                "void:CheckCXX98CompatAccessibleCopy:int &, const int &, int *",
                "void:TryConstructorInitialization:int &, const int &, const int &, int, int, int, int &, bool, bool"
            ]
        },
        {
            "filename": "/clang/lib/Sema/SemaOverload.cpp",
            "functions": [
                "int:CheckConvertedConstantExpression:int &, int *, int, int &, int, bool, int *"
            ]
        },
        {
            "filename": "/clang/lib/Sema/SemaRISCVVectorLookup.cpp",
            "functions": [
                "void:InitRVVIntrinsic:const int &, int, int, bool, int &, bool, int"
            ]
        },
        {
            "filename": "/clang/lib/Sema/SemaStmtAttr.cpp",
            "functions": [
                "int *:ProcessStmtAttribute:int &, int *, const int &, int"
            ]
        },
        {
            "filename": "/clang/lib/Sema/SemaTemplate.cpp",
            "functions": [
                "NullPointerValueKind:isNullPointerValueTemplateArgument:int &, int *, int, int *, int *",
                "bool:CheckNonTypeTemplatePartialSpecializationArgs:int &, int, int *, const int *, unsigned int, bool",
                "bool:CheckTemplateArgumentAddressOfObjectOrFunction:int &, int *, int, int *, int &, int &",
                "bool:CheckTemplateArgumentIsCompatibleWithParameter:int &, int *, int, int *, int *, int",
                "bool:CheckTemplateArgumentPointerToMember:int &, int *, int, int *&, int &, int &",
                "bool:diagnoseMissingArgument:",
                "void:CheckIfContainingRecord:const int *",
                "void:checkMoreSpecializedThanPrimary:"
            ]
        },
        {
            "filename": "/clang/lib/Sema/SemaType.cpp",
            "functions": [
                "int:GetDeclSpecTypeForDeclarator:TypeProcessingState &, int *&"
            ]
        },
        {
            "filename": "/clang/lib/Serialization/ASTReaderDecl.cpp",
            "functions": [
                "ASTDeclReader::RedeclarableResult:VisitTagDecl:int *",
                "void:VisitDecl:int *",
                "void:VisitFunctionDecl:int *",
                "void:VisitParmVarDecl:int *"
            ]
        },
        {
            "filename": "/clang/lib/Serialization/ASTWriterDecl.cpp",
            "functions": [
                "void:VisitDecl:int *",
                "void:VisitFunctionDecl:int *",
                "void:VisitParmVarDecl:int *",
                "void:VisitTagDecl:int *"
            ]
        },
        {
            "filename": "/clang/lib/StaticAnalyzer/Checkers/BitwiseShiftChecker.cpp",
            "functions": [
                "int:checkOvershift:",
                "void:checkPreStmt:const int *, int &"
            ]
        },
        {
            "filename": "/clang/lib/StaticAnalyzer/Checkers/EnumCastOutOfRangeChecker.cpp",
            "functions": [
                "void:reportWarning:int &, const int *, const int *"
            ]
        },
        {
            "filename": "/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp",
            "functions": [
                "const int *:getConstValue:int, int"
            ]
        },
        {
            "filename": "/clang/test/CXX/drs/dr11xx.cpp",
            "functions": [
                "void:foo:"
            ]
        },
        {
            "filename": "/clang/test/CXX/drs/dr12xx.cpp",
            "functions": [
                "void:f:S"
            ]
        },
        {
            "filename": "/clang/test/CXX/drs/dr13xx.cpp",
            "functions": [
                "void:init_capture:"
            ]
        },
        {
            "filename": "/clang/test/CXX/drs/dr14xx.cpp",
            "functions": [
                "bool:check:"
            ]
        },
        {
            "filename": "/clang/test/CXX/drs/dr16xx.cpp",
            "functions": [
                "void:f:bool"
            ]
        },
        {
            "filename": "/clang/test/CXX/drs/dr18xx.cpp",
            "functions": [
                "void:dr1891:"
            ]
        },
        {
            "filename": "/clang/test/CXX/drs/dr1xx.cpp",
            "functions": [
                "void:f:bool"
            ]
        },
        {
            "filename": "/clang/test/CXX/drs/dr20xx.cpp",
            "functions": [
                "int:f:",
                "void:discarded_lval:",
                "void:ref_to_non_const:"
            ]
        },
        {
            "filename": "/clang/test/CXX/drs/dr25xx.cpp",
            "functions": [
                "void:f:"
            ]
        },
        {
            "filename": "/clang/test/CXX/drs/dr2xx.cpp",
            "functions": [
                "int:main:",
                "void:f:int, int, int, int *"
            ]
        },
        {
            "filename": "/clang/test/CXX/drs/dr3xx.cpp",
            "functions": [
                "void:f:P, Q, Q2, R, S, T"
            ]
        },
        {
            "filename": "/clang/test/CXX/drs/dr4xx.cpp",
            "functions": [
                "int:h:",
                "void:f:A, bool, C",
                "void:f:int",
                "void:g:"
            ]
        },
        {
            "filename": "/clang/test/CXX/drs/dr5xx.cpp",
            "functions": [
                "void:jump:"
            ]
        },
        {
            "filename": "/clang/test/CXX/drs/dr6xx.cpp",
            "functions": [
                "void:test:"
            ]
        },
        {
            "filename": "/clang/test/CXX/drs/dr8xx.cpp",
            "functions": [
                "void:g:int"
            ]
        },
        {
            "filename": "/clang/test/ParserOpenACC/unimplemented.cpp",
            "functions": [
                "void:func:"
            ]
        },
        {
            "filename": "/clang/test/Sema/aarch64-sve2p1-intrinsics/acle_sve2p1_imm.cpp",
            "functions": [
                "void:test_svbfmul_lane:int, int, int"
            ]
        },
        {
            "filename": "/clang/test/SemaCXX/builtin-dump-struct.cpp",
            "functions": [
                "void:errors:B"
            ]
        },
        {
            "filename": "/clang/test/SemaCXX/coro-lifetimebound.cpp",
            "functions": [
                "void:lambdas:"
            ]
        },
        {
            "filename": "/clang/test/SemaCXX/coro-return-type-and-wrapper.cpp",
            "functions": [
                "void:foo:"
            ]
        },
        {
            "filename": "/clang/tools/clang-format/ClangFormat.cpp",
            "functions": [
                "int:main:int, const char **"
            ]
        },
        {
            "filename": "/clang/tools/clang-fuzzer/handle-llvm/handle_llvm.cpp",
            "functions": [
                "void:CreateAndRunJITFunc:const std::string &, int"
            ]
        },
        {
            "filename": "/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp",
            "functions": [
                "int:clang:int, const int &"
            ]
        },
        {
            "filename": "/clang/tools/clang-linker-wrapper/OffloadWrapper.cpp",
            "functions": [
                "int *:createRegisterGlobalsFunction:int &, bool"
            ]
        },
        {
            "filename": "/clang/tools/libclang/CXIndexDataConsumer.cpp",
            "functions": [
                "void:translateLoc:int, int *, int *, unsigned int *, unsigned int *, unsigned int *"
            ]
        },
        {
            "filename": "/clang/unittests/Analysis/FlowSensitive/RecordOpsTest.cpp",
            "functions": [
                "int:TEST:int, int"
            ]
        },
        {
            "filename": "/clang/unittests/Analysis/FlowSensitive/TypeErasedDataflowAnalysisTest.cpp",
            "functions": [
                "int:TEST_F:JoinFlowConditionsTest, int"
            ]
        },
        {
            "filename": "/clang/unittests/Analysis/FlowSensitive/UncheckedOptionalAccessModelTest.cpp",
            "functions": [
                "void:ExpectDiagnosticsFor:"
            ]
        },
        {
            "filename": "/clang/utils/TableGen/RISCVVEmitter.cpp",
            "functions": [
                "void:emitCodeGenSwitchBody:const int *, int &"
            ]
        },
        {
            "filename": "/clang/utils/TableGen/SveEmitter.cpp",
            "functions": [
                "void:applyModifier:char"
            ]
        },
        {
            "filename": "/compiler-rt/lib/asan/asan_rtl.cpp",
            "functions": [
                "bool:AsanInitIsRunning:",
                "void:AsanInitFromRtl:",
                "void:AsanInitInternal:",
                "void:SetAsanInitIsRunning:int"
            ]
        },
        {
            "filename": "/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup.cpp",
            "functions": [
                "void:RenderData:InternalScopedString *, const char *, const DataInfo *, const char *",
                "void:RenderFrame:InternalScopedString *, const char *, int, uptr, const AddressInfo *, bool, const char *"
            ]
        },
        {
            "filename": "/compiler-rt/lib/scudo/standalone/combined.h",
            "functions": [
                "int:ringBufferSizeInBytes:u32",
                "uptr:getRingBufferSize:",
                "uptr:getUsableSize:const void *",
                "void:deallocate:void *, Chunk::Origin, uptr, uptr",
                "void:mapAndInitializeRingBuffer:",
                "void:storeRingBufferEntry:void *, u32, u32, uptr, u32, u32",
                "void:unmapRingBuffer:"
            ]
        },
        {
            "filename": "/compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp",
            "functions": [
                "int:LLVMFuzzerTestOneInput:uint8_t *, int"
            ]
        },
        {
            "filename": "/compiler-rt/lib/scudo/standalone/primary32.h",
            "functions": [
                "void:getSizeClassFragmentationInfo:SizeClassInfo *, uptr, ScopedString *"
            ]
        },
        {
            "filename": "/compiler-rt/lib/scudo/standalone/primary64.h",
            "functions": [
                "void:getRegionFragmentationInfo:RegionInfo *, uptr, ScopedString *"
            ]
        },
        {
            "filename": "/compiler-rt/test/hwasan/TestCases/Linux/syscalls.cpp",
            "functions": [
                "int:main:int, char *[]"
            ]
        },
        {
            "filename": "/flang/include/flang/Optimizer/Analysis/TBAAForest.h",
            "functions": [
                "const TBAATree &:operator[]:int"
            ]
        },
        {
            "filename": "/flang/include/flang/Optimizer/Builder/IntrinsicCall.h",
            "functions": [
                "int:getTypeHelper:int *, int &, ParamTypeId, int"
            ]
        },
        {
            "filename": "/flang/lib/Frontend/CompilerInvocation.cpp",
            "functions": [
                "void:parseCodeGenArgs:int &, int &, int &"
            ]
        },
        {
            "filename": "/flang/lib/Frontend/FrontendActions.cpp",
            "functions": [
                "void:addAMDGPUSpecificMLIRItems:int &, int &"
            ]
        },
        {
            "filename": "/flang/lib/Lower/Bridge.cpp",
            "functions": [
                "void:IncrementLoopInfo:",
                "void:createTypeInfoOpAndGlobal:int &, const TypeInfo &",
                "void:genFIRIncrementLoopBegin:int &",
                "void:run:int &",
                "void:startNewFunction:int &"
            ]
        },
        {
            "filename": "/flang/lib/Lower/ConvertCall.cpp",
            "functions": [
                "int:genUserCall:int &, int &, int, CallContext &"
            ]
        },
        {
            "filename": "/flang/lib/Lower/ConvertVariable.cpp",
            "functions": [
                "void:instantiateCommon:int &, const int &, const int &, int &",
                "void:instantiateGlobal:int &, const int &, int &"
            ]
        },
        {
            "filename": "/flang/lib/Lower/DirectivesCommon.h",
            "functions": [
                "int:genBoundsOps:",
                "int:genBoundsOpsFromBox:"
            ]
        },
        {
            "filename": "/flang/lib/Lower/HlfirIntrinsics.cpp",
            "functions": [
                "int:getOperandVector:const int &, const int *"
            ]
        },
        {
            "filename": "/flang/lib/Lower/OpenMP.cpp",
            "functions": [
                "void:createBodyOfOp:",
                "void:genThreadprivateOp:int &, const int &",
                "void:threadPrivatizeVars:int &, int &"
            ]
        },
        {
            "filename": "/flang/lib/Optimizer/CodeGen/CodeGen.cpp",
            "functions": [
                "int:doRewriteBox:int, int, int, int &",
                "void:runOnOperation:"
            ]
        },
        {
            "filename": "/flang/lib/Optimizer/CodeGen/TargetRewrite.cpp",
            "functions": [
                "void:runOnOperation:"
            ]
        },
        {
            "filename": "/flang/lib/Optimizer/HLFIR/IR/HLFIROps.cpp",
            "functions": [
                "int:verifyCharacterReductionOp:",
                "int:verifyNumericalReductionOp:"
            ]
        },
        {
            "filename": "/flang/lib/Optimizer/HLFIR/Transforms/LowerHLFIRIntrinsics.cpp",
            "functions": [
                "int:matchAndRewrite:OP, int &",
                "void:runOnOperation:"
            ]
        },
        {
            "filename": "/flang/lib/Parser/prescan.cpp",
            "functions": [
                "const char *:FreeFormContinuationLine:bool",
                "void:QuotedCharacterLiteral:TokenSequence &, const char *"
            ]
        },
        {
            "filename": "/flang/lib/Semantics/definable.cpp",
            "functions": [
                "int:WhyNotDefinable:int, const Scope &, int, const Symbol &",
                "int:WhyNotDefinableLast:int, const Scope &, int, const Symbol &"
            ]
        },
        {
            "filename": "/flang/runtime/ISO_Fortran_binding.cpp",
            "functions": [
                "int:CFI_allocate:int *, const int[], const int[], std::size_t"
            ]
        },
        {
            "filename": "/flang/runtime/descriptor-io.cpp",
            "functions": [
                "bool:DefinedUnformattedIo:IoStatementState &, const Descriptor &, const typeInfo::DerivedType &, const typeInfo::SpecialBinding &"
            ]
        },
        {
            "filename": "/flang/runtime/descriptor-io.h",
            "functions": [
                "bool:FormattedDerivedTypeIO:",
                "bool:UnformattedDescriptorIO:"
            ]
        },
        {
            "filename": "/flang/runtime/edit-input.cpp",
            "functions": [
                "bool:EditBOZInput:",
                "bool:EditCharacterInput:"
            ]
        },
        {
            "filename": "/flang/runtime/edit-output.cpp",
            "functions": [
                "bool:EditFOutput:const DataEdit &",
                "bool:EditIntegerOutput:"
            ]
        },
        {
            "filename": "/flang/runtime/internal-unit.cpp",
            "functions": [
                "void:EndIoStatement:"
            ]
        },
        {
            "filename": "/flang/runtime/io-stmt.h",
            "functions": [
                "int:CueUpInput:const DataEdit &"
            ]
        },
        {
            "filename": "/flang/runtime/iostat.cpp",
            "functions": [
                "const char *:IostatErrorString:int"
            ]
        },
        {
            "filename": "/flang/runtime/unit.cpp",
            "functions": [
                "ExternalFileUnit *:LookUpOrCreateAnonymous:int, Direction, int, const Terminator &",
                "bool:BeginReadingRecord:IoErrorHandler &",
                "bool:Emit:const char *, std::size_t, std::size_t, IoErrorHandler &",
                "void:BackspaceRecord:IoErrorHandler &",
                "void:BeginSequentialVariableUnformattedInputRecord:IoErrorHandler &",
                "void:DoEndfile:IoErrorHandler &",
                "void:DoImpliedEndfile:IoErrorHandler &",
                "void:Rewind:IoErrorHandler &"
            ]
        },
        {
            "filename": "/flang/tools/bbc/bbc.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/flang/tools/tco/tco.cpp",
            "functions": [
                "int:compileFIR:const int &"
            ]
        },
        {
            "filename": "/flang/unittests/Evaluate/real.cpp",
            "functions": [
                "void:roundTest:int, int, std::uint32_t"
            ]
        },
        {
            "filename": "/flang/unittests/Frontend/FrontendActionTest.cpp",
            "functions": [
                "int:TEST_F:FrontendActionTest, int",
                "void:SetUp:"
            ]
        },
        {
            "filename": "/flang/unittests/Runtime/CommandTest.cpp",
            "functions": [
                "void:CheckMissingArgumentValue:int, const char *",
                "void:CheckMissingCommandValue:const char *"
            ]
        },
        {
            "filename": "/flang/unittests/Runtime/MatmulTranspose.cpp",
            "functions": [
                "int:TEST:int, int"
            ]
        },
        {
            "filename": "/libc/src/__support/FPUtil/Hypot.h",
            "functions": [
                "int:find_leading_one:int, int &"
            ]
        },
        {
            "filename": "/libc/src/__support/FPUtil/generic/sqrt.h",
            "functions": [
                "int:normalize:",
                "int:normalize:int &, int &"
            ]
        },
        {
            "filename": "/libc/src/__support/FPUtil/generic/sqrt_80_bit_long_double.h",
            "functions": [
                "int:normalize:int &, int &"
            ]
        },
        {
            "filename": "/libc/src/__support/FPUtil/x86_64/NextAfterLongDouble.h",
            "functions": [
                "int:nextafter:long double, long double"
            ]
        },
        {
            "filename": "/libc/src/__support/hash.h",
            "functions": [
                "int:update:int, int"
            ]
        },
        {
            "filename": "/libc/src/__support/str_to_float.h",
            "functions": [
                "int:binary_exp_to_float:int, bool, int",
                "int:decimal_exp_to_float:int, const char *__restrict, bool, int",
                "int:decimal_string_to_float:const char *__restrict, const char, int",
                "int:hexadecimal_string_to_float:const char *__restrict, const char, int",
                "int:simple_decimal_conversion:const char *__restrict, int",
                "int:strtofloatingpoint:const char *__restrict"
            ]
        },
        {
            "filename": "/libc/src/math/generic/expf.cpp",
            "functions": [
                "int:LLVM_LIBC_FUNCTION:float, int, int (float)"
            ]
        },
        {
            "filename": "/libc/src/math/generic/explogxf.h",
            "functions": [
                "int:log2_eval:double",
                "int:log_eval:double"
            ]
        },
        {
            "filename": "/libc/src/math/generic/hypotf.cpp",
            "functions": [
                "int:LLVM_LIBC_FUNCTION:float, int, int (float, float)"
            ]
        },
        {
            "filename": "/libc/src/math/generic/log.cpp",
            "functions": [
                "int:LLVM_LIBC_FUNCTION:double, int, int (double)"
            ]
        },
        {
            "filename": "/libc/src/math/generic/log10.cpp",
            "functions": [
                "int:LLVM_LIBC_FUNCTION:double, int, int (double)"
            ]
        },
        {
            "filename": "/libc/src/math/generic/log10f.cpp",
            "functions": [
                "int:LLVM_LIBC_FUNCTION:float, int, int (float)"
            ]
        },
        {
            "filename": "/libc/src/math/generic/log1p.cpp",
            "functions": [
                "int:LLVM_LIBC_FUNCTION:double, int, int (double)"
            ]
        },
        {
            "filename": "/libc/src/math/generic/log1pf.cpp",
            "functions": [
                "int:log:double"
            ]
        },
        {
            "filename": "/libc/src/math/generic/log2.cpp",
            "functions": [
                "int:LLVM_LIBC_FUNCTION:double, int, int (double)"
            ]
        },
        {
            "filename": "/libc/src/math/generic/log2f.cpp",
            "functions": [
                "int:LLVM_LIBC_FUNCTION:float, int, int (float)"
            ]
        },
        {
            "filename": "/libc/src/math/generic/logf.cpp",
            "functions": [
                "int:LLVM_LIBC_FUNCTION:float, int, int (float)"
            ]
        },
        {
            "filename": "/libc/src/math/generic/powf.cpp",
            "functions": [
                "int:is_integer:float",
                "int:is_odd_integer:float",
                "int:larger_exponent:double, double"
            ]
        },
        {
            "filename": "/libc/src/search/hcreate.cpp",
            "functions": [
                "int:LLVM_LIBC_FUNCTION:int, int, int"
            ]
        },
        {
            "filename": "/libc/src/search/hdestroy.cpp",
            "functions": [
                "int:LLVM_LIBC_FUNCTION:int, int, int ()"
            ]
        },
        {
            "filename": "/libc/src/search/hsearch_r.cpp",
            "functions": [
                "int:LLVM_LIBC_FUNCTION:int, int, int"
            ]
        },
        {
            "filename": "/libc/src/stdio/printf_core/float_hex_converter.h",
            "functions": [
                "int:convert_float_hex_exp:int *, const int &"
            ]
        },
        {
            "filename": "/libc/src/stdlib/getenv.cpp",
            "functions": [
                "int:LLVM_LIBC_FUNCTION:char *, int, int (const char *)"
            ]
        },
        {
            "filename": "/libc/src/string/memory_utils/op_builtin.h",
            "functions": [
                "int:block:int, int"
            ]
        },
        {
            "filename": "/libc/src/string/memory_utils/utils.h",
            "functions": [
                "int:align_to_next_boundary:",
                "int:distance_to_align_down:const void *",
                "int:distance_to_align_up:const void *",
                "int:load_aligned:int",
                "int:store_aligned:"
            ]
        },
        {
            "filename": "/libc/startup/linux/aarch64/start.cpp",
            "functions": [
                "void:do_start:",
                "void:init_tls:int &"
            ]
        },
        {
            "filename": "/libc/startup/linux/riscv/start.cpp",
            "functions": [
                "void:do_start:",
                "void:init_tls:int &"
            ]
        },
        {
            "filename": "/libc/startup/linux/x86_64/start.cpp",
            "functions": [
                "void:_start:",
                "void:init_tls:int &"
            ]
        },
        {
            "filename": "/libc/test/src/__support/FPUtil/fpbits_test.cpp",
            "functions": [
                "int:TEST:int, int"
            ]
        },
        {
            "filename": "/libc/test/src/__support/HashTable/bitmask_test.cpp",
            "functions": [
                "int:TEST:int, int"
            ]
        },
        {
            "filename": "/libc/test/src/__support/HashTable/table_test.cpp",
            "functions": [
                "int:TEST:int, int"
            ]
        },
        {
            "filename": "/libc/test/src/__support/math_extras_test.cpp",
            "functions": [
                "int:TEST:int, int"
            ]
        },
        {
            "filename": "/libc/test/src/__support/memory_size_test.cpp",
            "functions": [
                "int:TEST:int, int"
            ]
        },
        {
            "filename": "/libc/test/src/math/LdExpTest.h",
            "functions": [
                "void:testNormalOperation:LdExpFunc"
            ]
        },
        {
            "filename": "/libc/test/src/math/NextAfterTest.h",
            "functions": [
                "void:testBoundaries:NextAfterFunc"
            ]
        },
        {
            "filename": "/libc/test/src/math/RoundToIntegerTest.h",
            "functions": [
                "void:do_round_numbers_test:RoundToIntegerFunc",
                "void:testIntegerOverflow:RoundToIntegerFunc"
            ]
        },
        {
            "filename": "/libc/test/src/math/smoke/LdExpTest.h",
            "functions": [
                "void:testNormalOperation:LdExpFunc"
            ]
        },
        {
            "filename": "/libc/test/src/math/smoke/NextAfterTest.h",
            "functions": [
                "void:testBoundaries:NextAfterFunc"
            ]
        },
        {
            "filename": "/libc/test/src/math/smoke/NextTowardTest.h",
            "functions": [
                "void:testBoundaries:NextTowardFunc"
            ]
        },
        {
            "filename": "/libc/test/src/stdio/sprintf_test.cpp",
            "functions": [
                "int:TEST_F:LlvmLibcSPrintfTest, int"
            ]
        },
        {
            "filename": "/libc/test/utils/FPUtil/x86_long_double_test.cpp",
            "functions": [
                "int:TEST:int, int"
            ]
        },
        {
            "filename": "/libc/utils/gpu/loader/amdgpu/Loader.cpp",
            "functions": [
                "int:load:int, char **, char **, void *, int, const int &"
            ]
        },
        {
            "filename": "/libcxx/benchmarks/stop_token.bench.cpp",
            "functions": [
                "void:BM_stop_token_async_reg_unreg_callback:int &"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/binary_search.h",
            "functions": [
                "int:binary_search:int, int, const int &"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/copy.h",
            "functions": [
                "int:copy:int, int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/copy_n.h",
            "functions": [
                "int:copy_n:int, int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/fill.h",
            "functions": [
                "void:__fill:int, int, const int &, int",
                "void:fill:int, int, const int &"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/fill_n.h",
            "functions": [
                "int:fill_n:int, int, const int &"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/inplace_merge.h",
            "functions": [
                "int:__inplace_merge:"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/is_heap.h",
            "functions": [
                "int:is_heap:int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/is_sorted.h",
            "functions": [
                "int:is_sorted:int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/lexicographical_compare.h",
            "functions": [
                "int:lexicographical_compare:int, int, int, int",
                "int:lexicographical_compare:int, int, int, int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/merge.h",
            "functions": [
                "int:merge:int, int, int, int, int",
                "int:merge:int, int, int, int, int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/move_backward.h",
            "functions": [
                "int:move_backward:int, int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/next_permutation.h",
            "functions": [
                "bool:next_permutation:int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/nth_element.h",
            "functions": [
                "void:__nth_element:int, int, int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/partial_sort.h",
            "functions": [
                "void:partial_sort:int, int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/partial_sort_copy.h",
            "functions": [
                "int:partial_sort_copy:int, int, int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/prev_permutation.h",
            "functions": [
                "bool:prev_permutation:int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/rotate.h",
            "functions": [
                "int:__rotate_gcd:int, int, int",
                "int:__rotate_right:int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/sample.h",
            "functions": [
                "int:__sample:int, int, int, int, int &, int"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/stable_partition.h",
            "functions": [
                "int:__stable_partition_impl:int, int, int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__algorithm/swap_ranges.h",
            "functions": [
                "int:swap_ranges:int, int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__functional/bind.h",
            "functions": [
                "int:__apply_functor:int &, int &, int, int &&",
                "int:__mu:int &, int &",
                "int:__mu_expand:int &, int &, int",
                "int:bind:int &&, int &&"
            ]
        },
        {
            "filename": "/libcxx/include/__functional/function.h",
            "functions": [
                "Destructor:~__policy_func<type-parameter-0-0 (type-parameter-0-1...)>:",
                "_Rp:operator():_ArgTypes &&...",
                "int:__not_null:",
                "int:__throw_bad_function_call:"
            ]
        },
        {
            "filename": "/libcxx/include/__iterator/advance.h",
            "functions": [
                "void:advance:int &, int"
            ]
        },
        {
            "filename": "/libcxx/include/__iterator/distance.h",
            "functions": [
                "int:distance:int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__iterator/istream_iterator.h",
            "functions": [
                "int:operator!=:",
                "int:operator==:"
            ]
        },
        {
            "filename": "/libcxx/include/__iterator/istreambuf_iterator.h",
            "functions": [
                "int:operator!=:",
                "int:operator==:"
            ]
        },
        {
            "filename": "/libcxx/include/__locale_dir/locale_base_api/bsd_locale_fallbacks.h",
            "functions": [
                "int:__libcpp_mbtowc_l:wchar_t *, const char *, int, locale_t",
                "int:__libcpp_wctob_l:wint_t, locale_t"
            ]
        },
        {
            "filename": "/libcxx/include/__locale_dir/locale_base_api/locale_guard.h",
            "functions": [
                "Destructor:~__libcpp_locale_guard:"
            ]
        },
        {
            "filename": "/libcxx/include/__memory/allocator_arg_t.h",
            "functions": [
                "int:__user_alloc_construct_impl:"
            ]
        },
        {
            "filename": "/libcxx/include/__memory/shared_ptr.h",
            "functions": [
                "int:allocate_shared:const int &, int &&",
                "int:atomic_is_lock_free:",
                "int:make_shared:int &&"
            ]
        },
        {
            "filename": "/libcxx/include/__memory/uninitialized_algorithms.h",
            "functions": [
                "int:__uninitialized_copy:int, int, int, int",
                "int:__uninitialized_copy_n:int, int, int, int",
                "int:__uninitialized_fill:int, int, const int &",
                "int:__uninitialized_fill_n:int, int, const int &",
                "int:uninitialized_copy:int, int, int",
                "int:uninitialized_copy_n:int, int, int",
                "int:uninitialized_fill:",
                "int:uninitialized_fill_n:int, int, const int &"
            ]
        },
        {
            "filename": "/libcxx/include/__memory/unique_ptr.h",
            "functions": [
                "bool:operator==:const int",
                "int:operator!=:",
                "int:operator<:",
                "int:operator<=:",
                "int:operator>:",
                "int:operator>=:"
            ]
        },
        {
            "filename": "/libcxx/include/__mutex/once_flag.h",
            "functions": [
                "int:__execute:"
            ]
        },
        {
            "filename": "/libcxx/include/__numeric/accumulate.h",
            "functions": [
                "int:accumulate:int, int, int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__numeric/adjacent_difference.h",
            "functions": [
                "int:adjacent_difference:int, int, int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__numeric/inner_product.h",
            "functions": [
                "int:inner_product:int, int, int, int, int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__numeric/partial_sum.h",
            "functions": [
                "int:partial_sum:int, int, int, int"
            ]
        },
        {
            "filename": "/libcxx/include/__random/binomial_distribution.h",
            "functions": [
                "int:__libcpp_lgamma:double"
            ]
        },
        {
            "filename": "/libcxx/include/__random/discard_block_engine.h",
            "functions": [
                "int:operator!=:",
                "int:operator==:"
            ]
        },
        {
            "filename": "/libcxx/include/__random/independent_bits_engine.h",
            "functions": [
                "int:operator!=:",
                "int:operator==:"
            ]
        },
        {
            "filename": "/libcxx/include/__random/mersenne_twister_engine.h",
            "functions": [
                "int:operator!=:",
                "int:operator==:"
            ]
        },
        {
            "filename": "/libcxx/include/__random/shuffle_order_engine.h",
            "functions": [
                "int:operator!=:",
                "int:operator==:"
            ]
        },
        {
            "filename": "/libcxx/include/__random/subtract_with_carry_engine.h",
            "functions": [
                "int:operator!=:",
                "int:operator==:"
            ]
        },
        {
            "filename": "/libcxx/include/__thread/this_thread.h",
            "functions": [
                "int:sleep_until:"
            ]
        },
        {
            "filename": "/libcxx/include/__thread/thread.h",
            "functions": [
                "int &:operator<<:int &, int",
                "int *:__thread_proxy:",
                "int:__thread_execute:"
            ]
        },
        {
            "filename": "/libcxx/include/__thread/timed_backoff_policy.h",
            "functions": [
                "int:operator():int"
            ]
        },
        {
            "filename": "/libcxx/include/__utility/rel_ops.h",
            "functions": [
                "int:operator!=:",
                "int:operator<=:",
                "int:operator>:",
                "int:operator>=:"
            ]
        },
        {
            "filename": "/libcxx/include/stdlib.h",
            "functions": [
                "double:abs:double",
                "float:abs:float",
                "ldiv_t:div:long, long",
                "lldiv_t:div:long long, long long",
                "long double:abs:long double",
                "long long:abs:long long",
                "long:abs:long"
            ]
        },
        {
            "filename": "/libcxx/src/hash.cpp",
            "functions": [
                "int:__check_for_overflow:"
            ]
        },
        {
            "filename": "/libcxx/src/include/atomic_support.h",
            "functions": [
                "int:__libcpp_atomic_compare_exchange:",
                "int:__libcpp_atomic_store:",
                "int:__libcpp_relaxed_store:"
            ]
        },
        {
            "filename": "/libcxx/src/include/to_chars_floating_point.h",
            "functions": [
                "int:_Floating_to_chars:char *, char *const, int, const int, const int",
                "int:_Floating_to_chars_general_precision:char *, char *const, const int, int",
                "int:_Floating_to_chars_hex_precision:char *, char *const, const int, int",
                "int:_Floating_to_chars_hex_shortest:char *, char *const, const int"
            ]
        },
        {
            "filename": "/libcxx/src/ios.cpp",
            "functions": [
                "int:__ios_new_cap:"
            ]
        },
        {
            "filename": "/libcxx/src/iostream.cpp",
            "functions": [
                "Constructor:DoIOSInit:"
            ]
        },
        {
            "filename": "/libcxx/src/regex.cpp",
            "functions": [
                "int:__get_classname:const char *, bool",
                "int:__get_collation_name:const char *"
            ]
        },
        {
            "filename": "/libcxx/src/support/win32/thread_win32.cpp",
            "functions": [
                "int:__libcpp_condvar_timedwait:int *, int *, int *"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/atomics/atomics.types.generic/atomics.types.float/lockfree.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_left/assert.conversion.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_left/assert.ctor.extents.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_left/assert.index_operator.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_left/assert.stride.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_right/assert.conversion.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_right/assert.ctor.extents.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_right/assert.index_operator.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_right/assert.stride.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_stride/assert.conversion.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_stride/assert.ctor.extents_array.non_unique.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_stride/assert.ctor.extents_array.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_stride/assert.ctor.extents_span.non_unique.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_stride/assert.ctor.extents_span.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_stride/assert.index_operator.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/containers/views/mdspan/layout_stride/assert.stride.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/containers/views/mdspan/mdspan/assert.conversion.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/libcxx/containers/views/mdspan/mdspan/assert.size.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.move/move.pass.cpp",
            "functions": [
                "int:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.move/move_backward.pass.cpp",
            "functions": [
                "int:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.random.shuffle/random_shuffle.pass.cpp",
            "functions": [
                "void:test_with_iterator:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.replace/pstl.replace.pass.cpp",
            "functions": [
                "void:operator():"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.replace/pstl.replace_copy.pass.cpp",
            "functions": [
                "void:operator():"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.replace/pstl.replace_copy_if.pass.cpp",
            "functions": [
                "void:operator():"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.replace/pstl.replace_if.pass.cpp",
            "functions": [
                "void:operator():"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.rotate/ranges.rotate_copy.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.transform/ranges.transform.binary.iterator.pass.cpp",
            "functions": [
                "bool:test_iterators:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.transform/ranges.transform.binary.range.pass.cpp",
            "functions": [
                "bool:test_iterators:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.transform/ranges.transform.unary.pass.cpp",
            "functions": [
                "bool:test_iterators:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.modifying.operations/alg.unique/ranges_unique_copy.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.count/count.pass.cpp",
            "functions": [
                "int:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.ends_with/ranges.ends_with.pass.cpp",
            "functions": [
                "void:test_iterators:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.equal/ranges.equal.pass.cpp",
            "functions": [
                "void:test_iterators:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.find.end/ranges.find_end.pass.cpp",
            "functions": [
                "void:test_iterators:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.foreach/ranges.for_each.pass.cpp",
            "functions": [
                "void:test_iterator:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.foreach/ranges.for_each_n.pass.cpp",
            "functions": [
                "void:test_iterator:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.search/ranges.search.pass.cpp",
            "functions": [
                "void:test_iterators:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.search/ranges.search_n.pass.cpp",
            "functions": [
                "void:test_iterators:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.nonmodifying/alg.starts_with/ranges.starts_with.pass.cpp",
            "functions": [
                "void:test_iterators:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.sorting/alg.heap.operations/sort.heap/ranges_sort_heap.pass.cpp",
            "functions": [
                "void:test_complexity:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.sorting/alg.merge/pstl.merge.pass.cpp",
            "functions": [
                "void:operator():"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.sorting/alg.partitions/ranges.is_partitioned.pass.cpp",
            "functions": [
                "void:test_iterators:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.sorting/alg.sort/is.sorted/ranges.is_sorted.pass.cpp",
            "functions": [
                "void:test_iterators:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.sorting/alg.sort/is.sorted/ranges.is_sorted_until.pass.cpp",
            "functions": [
                "void:test_iterators:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.sorting/alg.three.way/lexicographical_compare_three_way.pass.cpp",
            "functions": [
                "void:test_lexicographical_compare:"
            ]
        },
        {
            "filename": "/libcxx/test/std/algorithms/alg.sorting/alg.three.way/lexicographical_compare_three_way_comp.pass.cpp",
            "functions": [
                "void:test_lexicographical_compare:"
            ]
        },
        {
            "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/assign.pass.cpp",
            "functions": [
                "int:main:int, char **",
                "void:test_impl:"
            ]
        },
        {
            "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/compare_exchange_strong.pass.cpp",
            "functions": [
                "void:testBasic:",
                "void:test_impl:"
            ]
        },
        {
            "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/compare_exchange_weak.pass.cpp",
            "functions": [
                "int:main:int, char **",
                "void:testBasic:",
                "void:test_impl:"
            ]
        },
        {
            "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/ctor.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/exchange.pass.cpp",
            "functions": [
                "int:main:int, char **",
                "void:test_impl:"
            ]
        },
        {
            "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/fetch_add.pass.cpp",
            "functions": [
                "int:main:int, char **",
                "void:test_impl:"
            ]
        },
        {
            "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/fetch_sub.pass.cpp",
            "functions": [
                "int:main:int, char **",
                "void:test_impl:"
            ]
        },
        {
            "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/load.pass.cpp",
            "functions": [
                "int:main:int, char **",
                "void:test_impl:"
            ]
        },
        {
            "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/lockfree.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/notify_all.pass.cpp",
            "functions": [
                "int:main:int, char **",
                "void:test_impl:"
            ]
        },
        {
            "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/notify_one.pass.cpp",
            "functions": [
                "int:main:int, char **",
                "void:test_impl:"
            ]
        },
        {
            "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/operator.float.pass.cpp",
            "functions": [
                "int:main:int, char **",
                "void:test_impl:"
            ]
        },
        {
            "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/operator.minus_equals.pass.cpp",
            "functions": [
                "int:main:int, char **",
                "void:test_impl:"
            ]
        },
        {
            "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/operator.plus_equals.pass.cpp",
            "functions": [
                "int:main:int, char **",
                "void:test_impl:"
            ]
        },
        {
            "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/store.pass.cpp",
            "functions": [
                "int:main:int, char **",
                "void:test_impl:"
            ]
        },
        {
            "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/test_helper.h",
            "functions": [
                "bool:approximately_equals:"
            ]
        },
        {
            "filename": "/libcxx/test/std/atomics/atomics.types.generic/atomics.types.float/wait.pass.cpp",
            "functions": [
                "int:main:int, char **",
                "void:test_impl:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/sequences/insert_range_sequence_containers.h",
            "functions": [
                "void:test_sequence_insert_range:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/unord/unord.map/eq.different_hash.pass.cpp",
            "functions": [
                "std::size_t:hash_scale:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/unord/unord.multimap/eq.different_hash.pass.cpp",
            "functions": [
                "std::size_t:hash_scale:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/unord/unord.multiset/eq.different_hash.pass.cpp",
            "functions": [
                "std::size_t:hash_scale:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/unord/unord.set/eq.different_hash.pass.cpp",
            "functions": [
                "std::size_t:hash_even:",
                "std::size_t:hash_scale:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/ConvertibleToIntegral.h",
            "functions": [
                "char:operator char:",
                "signed char:operator signed char:",
                "unsigned char:operator unsigned char:",
                "unsigned int:operator unsigned int:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/layout_left/properties.pass.cpp",
            "functions": [
                "void:test_layout_mapping_left:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/layout_right/properties.pass.cpp",
            "functions": [
                "void:test_layout_mapping_right:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/layout_stride/deduction.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/layout_stride/index_operator.pass.cpp",
            "functions": [
                "bool:test:",
                "bool:test_large:",
                "void:iterate_stride:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/layout_stride/is_exhaustive_corner_case.pass.cpp",
            "functions": [
                "void:test_layout_mapping_stride:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/layout_stride/properties.pass.cpp",
            "functions": [
                "void:test_layout_mapping_stride:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/assign.pass.cpp",
            "functions": [
                "void:mixin_layout:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.copy.pass.cpp",
            "functions": [
                "void:mixin_layout:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.default.pass.cpp",
            "functions": [
                "void:mixin_layout:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.dh_array.pass.cpp",
            "functions": [
                "void:mixin_layout:",
                "void:test_mdspan_ctor_array:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.dh_extents.pass.cpp",
            "functions": [
                "void:mixin_layout:",
                "void:test_mdspan_types:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.dh_integers.pass.cpp",
            "functions": [
                "void:mixin_layout:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.dh_map.pass.cpp",
            "functions": [
                "void:test_mdspan_types:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.dh_map_acc.pass.cpp",
            "functions": [
                "void:test_mdspan_types:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.dh_span.pass.cpp",
            "functions": [
                "void:mixin_layout:",
                "void:test_mdspan_ctor_span:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/ctor.move.pass.cpp",
            "functions": [
                "void:mixin_layout:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/mapping.verify.cpp",
            "functions": [
                "void:not_layout_policy:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/move.pass.cpp",
            "functions": [
                "void:mixin_layout:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/properties.pass.cpp",
            "functions": [
                "void:test_mdspan_types:"
            ]
        },
        {
            "filename": "/libcxx/test/std/containers/views/mdspan/mdspan/swap.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/diagnostics/syserr/syserr.errcat/syserr.errcat.objects/generic_category.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/diagnostics/syserr/syserr.errcat/syserr.errcat.objects/system_category.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/file.streams/fstreams/ifstream.members/buffered_reads.pass.cpp",
            "functions": [
                "void:test_read:",
                "void:test_read_codecvt:"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/file.streams/fstreams/ofstream.members/buffered_writes.pass.cpp",
            "functions": [
                "void:test_write:",
                "void:test_write_codecvt:"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/filesystems/class.path/path.member/path.assign/source.pass.cpp",
            "functions": [
                "void:RunStringMoveTest:const int *"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/filesystems/fs.enum/enum.copy_options.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/filesystems/fs.enum/enum.directory_options.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/filesystems/fs.enum/enum.file_type.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/filesystems/fs.enum/enum.path.format.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/filesystems/fs.enum/enum.perm_options.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/filesystems/fs.enum/enum.perms.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.absolute/absolute.pass.cpp",
            "functions": [
                "void:basic_test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.canonical/canonical.pass.cpp",
            "functions": [
                "void:test_exception_contains_paths:"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.permissions/permissions.pass.cpp",
            "functions": [
                "void:test_signatures:"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/filesystems/fs.op.funcs/fs.op.temp_dir_path/temp_directory_path.pass.cpp",
            "functions": [
                "void:basic_tests:"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/iostream.format/print.fun/no_file_description.pass.cpp",
            "functions": [
                "void:test_vprint_nonunicode:",
                "void:test_vprint_unicode:"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/iostream.format/print.fun/vprint_nonunicode.sh.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/iostream.format/print.fun/vprint_unicode.sh.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/string.streams/stringbuf/stringbuf.assign/member_swap_noexcept.pass.cpp",
            "functions": [
                "void:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/string.streams/stringbuf/stringbuf.assign/nonmember_swap_noexcept.pass.cpp",
            "functions": [
                "void:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/input.output/syncstream/syncbuf/syncstream.syncbuf.assign/swap.pass.cpp",
            "functions": [
                "void:test_short_write_after_swap:"
            ]
        },
        {
            "filename": "/libcxx/test/std/iterators/iterator.requirements/iterator.cust/iterator.cust.move/iter_move.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/language.support/support.dynamic/new.delete/new.delete.single/new.size_align_nothrow.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/language.support/support.dynamic/new.delete/new.delete.single/new.size_nothrow.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/numerics/rand/rand.device/ctor.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/ranges/range.adaptors/range.chunk.by/range.chunk.by.iter/compare.pass.cpp",
            "functions": [
                "void:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/ranges/range.adaptors/range.chunk.by/range.chunk.by.iter/decrement.pass.cpp",
            "functions": [
                "void:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/ranges/range.adaptors/range.chunk.by/range.chunk.by.iter/deref.pass.cpp",
            "functions": [
                "void:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/ranges/range.adaptors/range.chunk.by/range.chunk.by.iter/increment.pass.cpp",
            "functions": [
                "void:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/ranges/range.adaptors/range.elements/general.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/ranges/range.adaptors/range.elements/iterator/deref.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/ranges/range.factories/range.repeat.view/size.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/re/re.iter/re.regiter/types.pass.cpp",
            "functions": [
                "void:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/re/re.iter/re.tokiter/types.pass.cpp",
            "functions": [
                "void:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.capacity/reserve.pass.cpp",
            "functions": [
                "void:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.capacity/reserve_size.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.capacity/shrink_to_fit.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.cons/copy_assignment.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.cons/move_assignment.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.cons/pointer_assignment.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.cons/string_view_assignment.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_append/T_size_size.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_append/push_back.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_append/size_char.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_append/string.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_append/string_size_size.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_append/string_view.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_assign/pointer.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_assign/pointer_size.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_copy/copy.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_insert/iter_char.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_op_plus_equal/char.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_op_plus_equal/pointer.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.modifiers/string_op_plus_equal/string.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.nonmembers/string.special/swap.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/basic.string/string.ops/string_substr/substr.pass.cpp",
            "functions": [
                "int:test_string:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/string.view/string.view.comparison/equal.pass.cpp",
            "functions": [
                "int:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/string.view/string.view.comparison/greater.pass.cpp",
            "functions": [
                "int:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/string.view/string.view.comparison/greater_equal.pass.cpp",
            "functions": [
                "int:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/string.view/string.view.comparison/less.pass.cpp",
            "functions": [
                "int:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/string.view/string.view.comparison/less_equal.pass.cpp",
            "functions": [
                "int:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/strings/string.view/string.view.comparison/not_equal.pass.cpp",
            "functions": [
                "int:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/thread/thread.mutex/thread.lock/thread.lock.scoped/mutex.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/thread/thread.mutex/thread.mutex.requirements/thread.shared_mutex.requirements/thread.shared_mutex.class/default.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/time/time.cal/time.cal.ym/time.cal.ym.members/plus_minus_equal_month.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/time/time.cal/time.cal.ym/time.cal.ym.nonmembers/minus.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/time/time.cal/time.cal.ym/time.cal.ym.nonmembers/plus.pass.cpp",
            "functions": [
                "bool:test_ym_plus_m:",
                "bool:test_ym_plus_y:"
            ]
        },
        {
            "filename": "/libcxx/test/std/time/time.cal/time.cal.ymd/time.cal.ymd.members/plus_minus_equal_month.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/time/time.cal/time.cal.ymd/time.cal.ymd.nonmembers/plus.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/time/time.cal/time.cal.ymdlast/time.cal.ymdlast.members/plus_minus_equal_month.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/time/time.cal/time.cal.ymdlast/time.cal.ymdlast.nonmembers/minus.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/time/time.cal/time.cal.ymdlast/time.cal.ymdlast.nonmembers/plus.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/time/time.cal/time.cal.ymwd/time.cal.ymwd.members/plus_minus_equal_month.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/time/time.cal/time.cal.ymwd/time.cal.ymwd.nonmembers/minus.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/time/time.cal/time.cal.ymwd/time.cal.ymwd.nonmembers/plus.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/time/time.cal/time.cal.ymwdlast/time.cal.ymwdlast.members/plus_minus_equal_month.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/time/time.cal/time.cal.ymwdlast/time.cal.ymwdlast.nonmembers/minus.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/time/time.cal/time.cal.ymwdlast/time.cal.ymwdlast.nonmembers/plus.pass.cpp",
            "functions": [
                "bool:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/time/time.syn/formatter_tests.h",
            "functions": [
                "void:check:",
                "void:check_exception:"
            ]
        },
        {
            "filename": "/libcxx/test/std/utilities/format/format.arguments/format.arg.store/make_format_args.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/utilities/format/format.arguments/format.arg.store/make_format_args.sh.cpp",
            "functions": [
                "void:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/utilities/format/format.arguments/format.arg.store/make_wformat_args.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/utilities/format/format.arguments/format.args/ctad.compile.pass.cpp",
            "functions": [
                "void:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/utilities/format/format.formatter/format.context/format.context/arg.pass.cpp",
            "functions": [
                "void:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/utilities/format/format.formatter/format.context/format.context/ctor.pass.cpp",
            "functions": [
                "void:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/utilities/format/format.formatter/format.context/format.context/locale.pass.cpp",
            "functions": [
                "void:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/utilities/format/format.formatter/format.formatter.spec/formatter.string.pass.cpp",
            "functions": [
                "void:test:"
            ]
        },
        {
            "filename": "/libcxx/test/std/utilities/format/format.functions/escaped_output.unicode.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/utilities/function.objects/refwrap/refwrap.const/type_conv_ctor.pass.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/libcxx/test/std/utilities/memory/util.smartptr/util.smartptr.shared/util.smartptr.shared.create/make_shared_for_overwrite.pass.cpp",
            "functions": [
                "void *:operator new:std::size_t"
            ]
        },
        {
            "filename": "/libcxx/test/std/utilities/smartptr/unique.ptr/unique.ptr.create/make_unique_for_overwrite.default_init.pass.cpp",
            "functions": [
                "void *:operator new:std::size_t"
            ]
        },
        {
            "filename": "/libcxx/test/support/allocators.h",
            "functions": [
                "void:MaybePOCCAAllocator<T, POCCAValue>:"
            ]
        },
        {
            "filename": "/libcxx/test/tools/clang_tidy_checks/header_exportable_declarations.cpp",
            "functions": [
                "Constructor:header_exportable_declarations:int, int *",
                "bool:is_viable_declaration:const int *",
                "std::string:get_qualified_name:const int &",
                "void:check:const int &",
                "void:registerMatchers:int *"
            ]
        },
        {
            "filename": "/libcxx/test/tools/clang_tidy_checks/uglify_attributes.cpp",
            "functions": [
                "int:get_standard_attributes:const int &"
            ]
        },
        {
            "filename": "/libcxxabi/src/cxa_personality.cpp",
            "functions": [
                "void:scan_eh_tab:scan_results &, int, bool, int *, int *"
            ]
        },
        {
            "filename": "/lld/COFF/Driver.cpp",
            "functions": [
                "void:linkerMain:int"
            ]
        },
        {
            "filename": "/lld/COFF/PDB.cpp",
            "functions": [
                "void:pdbMakeAbsolute:int &"
            ]
        },
        {
            "filename": "/lld/COFF/Writer.cpp",
            "functions": [
                "void:createECCodeMap:",
                "void:createMiscChunks:",
                "void:mergeSections:",
                "void:run:",
                "void:sortExceptionTable:",
                "void:sortExceptionTables:",
                "void:writeBuildId:",
                "void:writeHeader:"
            ]
        },
        {
            "filename": "/lld/ELF/Arch/RISCV.cpp",
            "functions": [
                "void:relaxCall:const int &, int, int, int &, int &"
            ]
        },
        {
            "filename": "/lld/ELF/InputSection.cpp",
            "functions": [
                "void:relocateNonAlloc:"
            ]
        },
        {
            "filename": "/lld/ELF/Relocations.cpp",
            "functions": [
                "void:processAux:RelExpr, int, uint64_t, Symbol &, int64_t"
            ]
        },
        {
            "filename": "/lld/MachO/InputFiles.cpp",
            "functions": [
                "std::string:sourceFile:"
            ]
        },
        {
            "filename": "/lld/MinGW/Driver.cpp",
            "functions": [
                "bool:link:int, int &, int &, bool, bool"
            ]
        },
        {
            "filename": "/lld/wasm/Driver.cpp",
            "functions": [
                "void:setConfigs:"
            ]
        },
        {
            "filename": "/lldb/source/Commands/CommandObjectTarget.cpp",
            "functions": [
                "int:LookupSymbolInModule:int &, int &, int *, const char *, bool, bool, bool"
            ]
        },
        {
            "filename": "/lldb/source/Host/netbsd/HostNetBSD.cpp",
            "functions": [
                "bool:GetNetBSDProcessCPUType:int &"
            ]
        },
        {
            "filename": "/lldb/source/Host/posix/DomainSocket.cpp",
            "functions": [
                "bool:SetSockAddr:int, const int, sockaddr_un *, socklen_t &"
            ]
        },
        {
            "filename": "/lldb/source/Plugins/DynamicLoader/POSIX-DYLD/DYLDRendezvous.cpp",
            "functions": [
                "bool:SOEntryIsMainExecutable:const SOEntry &"
            ]
        },
        {
            "filename": "/lldb/source/Plugins/DynamicLoader/POSIX-DYLD/DynamicLoaderPOSIXDYLD.cpp",
            "functions": [
                "int *:CreateInstance:Process *, bool"
            ]
        },
        {
            "filename": "/lldb/source/Plugins/Process/MacOSX-Kernel/ProcessKDP.cpp",
            "functions": [
                "Destructor:~ProcessKDP:"
            ]
        },
        {
            "filename": "/lldb/source/Plugins/Process/NetBSD/NativeProcessNetBSD.cpp",
            "functions": [
                "int:Halt:",
                "int:Interrupt:"
            ]
        },
        {
            "filename": "/lldb/source/Plugins/Process/elf-core/ProcessElfCore.cpp",
            "functions": [
                "Destructor:~ProcessElfCore:"
            ]
        },
        {
            "filename": "/lldb/source/Plugins/Process/gdb-remote/ProcessGDBRemote.cpp",
            "functions": [
                "Destructor:~ProcessGDBRemote:"
            ]
        },
        {
            "filename": "/lldb/source/Plugins/Process/mach-core/ProcessMachCore.cpp",
            "functions": [
                "Destructor:~ProcessMachCore:"
            ]
        },
        {
            "filename": "/lldb/source/Plugins/Process/minidump/ProcessMinidump.cpp",
            "functions": [
                "Destructor:~ProcessMinidump:"
            ]
        },
        {
            "filename": "/lldb/source/Plugins/Process/scripted/ScriptedProcess.cpp",
            "functions": [
                "Destructor:~ScriptedProcess:"
            ]
        },
        {
            "filename": "/lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp",
            "functions": [
                "void:CreateStaticMemberVariable:const DWARFDIE &, const MemberAttributes &, const int &"
            ]
        },
        {
            "filename": "/lldb/source/Plugins/SymbolFile/DWARF/DWARFDeclContext.cpp",
            "functions": [
                "const char *:GetQualifiedName:"
            ]
        },
        {
            "filename": "/lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.cpp",
            "functions": [
                "const std::shared_ptr<SymbolFileDWARFDwo> &:GetDwpSymbolFile:",
                "int:FindCompleteObjCDefinitionTypeForDIE:const DWARFDIE &, int, bool",
                "int:FindDefinitionTypeForDWARFDeclContext:const DWARFDIE &"
            ]
        },
        {
            "filename": "/lldb/source/Utility/ConstString.cpp",
            "functions": [
                "StringPoolValueType:GetMangledCounterpart:const char *",
                "const char *:GetConstCStringAndSetMangledCounterPart:int, const char *",
                "const char *:GetConstCStringWithStringRef:int"
            ]
        },
        {
            "filename": "/lldb/test/API/api/multithreaded/common.h",
            "functions": [
                "char *:get_working_dir:"
            ]
        },
        {
            "filename": "/lldb/test/API/tools/lldb-server/thread-name/main.cpp",
            "functions": [
                "void:set_thread_name:const char *"
            ]
        },
        {
            "filename": "/lldb/tools/lldb-dap/JSONUtils.cpp",
            "functions": [
                "int:CreateStackFrame:lldb::SBFrame &",
                "int:CreateVariable:lldb::SBValue, int64_t, int64_t, bool, bool, int"
            ]
        },
        {
            "filename": "/llvm/examples/Kaleidoscope/Chapter8/toy.cpp",
            "functions": [
                "int:main:"
            ]
        },
        {
            "filename": "/llvm/examples/OrcV2Examples/LLJITWithRemoteDebugging/LLJITWithRemoteDebugging.cpp",
            "functions": [
                "int:main:int, char *[]"
            ]
        },
        {
            "filename": "/llvm/include/llvm/Analysis/ObjCARCAnalysisUtils.h",
            "functions": [
                "bool:IsObjCIdentifiedObject:const int *"
            ]
        },
        {
            "filename": "/llvm/include/llvm/Analysis/VectorUtils.h",
            "functions": [
                "int *:getVectorizedFunction:const VFShape &",
                "void:getVFABIMappings:const int &, int &"
            ]
        },
        {
            "filename": "/llvm/include/llvm/CodeGen/AccelTable.h",
            "functions": [
                "const int &:getTypeUnitsSymbols:"
            ]
        },
        {
            "filename": "/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h",
            "functions": [
                "int:buildPipeline:int &, int &, int &, int *, int",
                "void:addIRPasses:AddIRPass &",
                "void:addISelPrepare:AddIRPass &",
                "void:addPassesToHandleExceptions:AddIRPass &"
            ]
        },
        {
            "filename": "/llvm/include/llvm/CodeGen/IndirectThunks.h",
            "functions": [
                "bool:run:int &, int &",
                "void:createThunkFunction:int &, int, bool, int"
            ]
        },
        {
            "filename": "/llvm/include/llvm/CodeGen/TargetInstrInfo.h",
            "functions": [
                "bool:isTriviallyReMaterializable:const int &"
            ]
        },
        {
            "filename": "/llvm/include/llvm/CodeGen/TargetSchedule.h",
            "functions": [
                "Constructor:TargetSchedModel:"
            ]
        },
        {
            "filename": "/llvm/include/llvm/DebugInfo/PDB/Native/FormatUtil.h",
            "functions": [
                "std::string:formatUnknownEnum:"
            ]
        },
        {
            "filename": "/llvm/include/llvm/ExecutionEngine/JITLink/aarch64.h",
            "functions": [
                "int &:createPointerJumpStubBlock:int &, int &, int &"
            ]
        },
        {
            "filename": "/llvm/include/llvm/Frontend/HLSL/HLSLResource.h",
            "functions": [
                "Constructor:FrontendResource:int *"
            ]
        },
        {
            "filename": "/llvm/include/llvm/IR/DerivedTypes.h",
            "functions": [
                "bool:isOpaque:"
            ]
        },
        {
            "filename": "/llvm/include/llvm/IR/ModuleSummaryIndex.h",
            "functions": [
                "Constructor:CalleeInfo:"
            ]
        },
        {
            "filename": "/llvm/include/llvm/IR/OperandTraits.h",
            "functions": [
                "int *:op_begin:int *",
                "int *:op_end:int *"
            ]
        },
        {
            "filename": "/llvm/include/llvm/MC/MCInstrItineraries.h",
            "functions": [
                "int:getOperandCycle:unsigned int, unsigned int",
                "int:getOperandLatency:unsigned int, unsigned int, unsigned int, unsigned int"
            ]
        },
        {
            "filename": "/llvm/include/llvm/MC/MCSectionCOFF.h",
            "functions": [
                "bool:isImplicitlyDiscardable:int"
            ]
        },
        {
            "filename": "/llvm/include/llvm/MC/MCSymbolXCOFF.h",
            "functions": [
                "bool:hasRename:",
                "void:setSymbolTableName:int"
            ]
        },
        {
            "filename": "/llvm/include/llvm/Object/ELFObjectFile.h",
            "functions": [
                "bool:isDebugSection:int",
                "int:getSymbolFlags:int"
            ]
        },
        {
            "filename": "/llvm/include/llvm/Passes/PassBuilder.h",
            "functions": [
                "bool:parseAnalysisUtilityPasses:"
            ]
        },
        {
            "filename": "/llvm/include/llvm/ProfileData/SampleProf.h",
            "functions": [
                "Constructor:SampleContext:int, int &, ContextStateMask"
            ]
        },
        {
            "filename": "/llvm/include/llvm/Support/GenericDomTreeConstruction.h",
            "functions": [
                "unsigned int:runDFS:",
                "void:doFullDFSWalk:",
                "void:runSemiNCA:"
            ]
        },
        {
            "filename": "/llvm/include/llvm/Transforms/IPO/Attributor.h",
            "functions": [
                "void:emitRemark:"
            ]
        },
        {
            "filename": "/llvm/lib/Analysis/InstructionSimplify.cpp",
            "functions": [
                "bool:isDivZero:int *, int *, const int &, unsigned int, bool",
                "int *:simplifyAndInst:int *, int *, const int &, unsigned int",
                "int *:simplifyDiv:int, int *, int *, bool, const int &, unsigned int",
                "int *:simplifyDivRem:int, int *, int *, const int &, unsigned int",
                "int *:simplifyICmpWithBinOpOnLHS:int, int *, int *, const int &, unsigned int",
                "int *:simplifyICmpWithZero:int, int *, int *, const int &",
                "int *:simplifyLShrInst:int *, int *, bool, const int &, unsigned int",
                "int *:simplifyRightShift:int, int *, int *, bool, const int &, unsigned int",
                "int *:simplifyShift:int, int *, int *, bool, const int &, unsigned int",
                "int *:simplifySubInst:int *, int *, bool, bool, const int &, unsigned int",
                "int *:simplifyWithOpReplaced:int *, int *, int *, const int &, bool, int *, unsigned int"
            ]
        },
        {
            "filename": "/llvm/lib/Analysis/LazyValueInfo.cpp",
            "functions": [
                "int:getEdgeValueLocal:int *, int *, int *"
            ]
        },
        {
            "filename": "/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp",
            "functions": [
                "void:computeFunctionSummary:int &, const int &, const int &, int *, int *, int &, bool, int &, bool, int"
            ]
        },
        {
            "filename": "/llvm/lib/Analysis/ScalarEvolution.cpp",
            "functions": [
                "int:MatchBinaryOp:int *, const int &, int &, const int &, const int *"
            ]
        },
        {
            "filename": "/llvm/lib/Analysis/VFABIDemangling.cpp",
            "functions": [
                "ParseRet:tryParseISA:int &, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Analysis/ValueTracking.cpp",
            "functions": [
                "bool:isKnownNonNullFromDominatingCondition:const int *, const int *, const int *",
                "bool:isKnownNonZeroFromOperator:const int *, const int &, unsigned int, const int &",
                "int:isImpliedCondICmps:const int *, int, const int *, const int *, const int &, bool, unsigned int",
                "void:computeKnownBitsFromOperator:const int *, const int &, int &, unsigned int, const int &",
                "void:computeKnownBitsMul:const int *, const int *, bool, const int &, int &, int &, unsigned int, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/BinaryFormat/Magic.cpp",
            "functions": [
                "bool:startswith:"
            ]
        },
        {
            "filename": "/llvm/lib/Bitcode/Reader/BitcodeReader.cpp",
            "functions": [
                "Error:parseFunctionBody:Function *",
                "Error:parseGlobalVarRecord:ArrayRef<uint64_t>",
                "int:makeCallList:ArrayRef<uint64_t>, bool, bool, bool"
            ]
        },
        {
            "filename": "/llvm/lib/Bitcode/Reader/MetadataLoader.cpp",
            "functions": [
                "Error:parseOneMetadata:int &, unsigned int, PlaceholderQueue &, int, unsigned int &"
            ]
        },
        {
            "filename": "/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp",
            "functions": [
                "void:writeCombinedGlobalValueSummary:",
                "void:writeModuleInfo:",
                "void:writePerModuleFunctionSummaryRecord:int &, int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, const Function &",
                "void:writePerModuleGlobalValueSummary:"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp",
            "functions": [
                "Constructor:Dwarf5AccelTableWriter<DataT>:AsmPrinter *, const int &, int",
                "void:emitDWARF5AccelTable:AsmPrinter *, int &, const DwarfDebug &, int",
                "void:emitDWARF5AccelTable:AsmPrinter *, int &, int",
                "void:emitTUList:"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp",
            "functions": [
                "Constructor:DwarfDebug:AsmPrinter *",
                "void:addDwarfTypeUnitType:DwarfCompileUnit &, int, DIE &, const int *"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp",
            "functions": [
                "bool:removeRedundantDbgLocsUsingBackwardScan:const int *, FunctionVarLocsBuilder &"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/GlobalMerge.cpp",
            "functions": [
                "bool:doInitialization:int &"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/MIRParser/MILexer.cpp",
            "functions": [
                "Cursor:maybeLexIRBlock:Cursor, MIToken &, int",
                "Cursor:maybeLexIRValue:Cursor, MIToken &, int",
                "Cursor:maybeLexIndex:Cursor, MIToken &, int, MIToken::TokenKind",
                "Cursor:maybeLexIndexAndName:Cursor, MIToken &, int, MIToken::TokenKind",
                "Cursor:maybeLexMCSymbol:Cursor, MIToken &, int",
                "Cursor:maybeLexMachineBasicBlock:Cursor, MIToken &, int",
                "Cursor:maybeLexSubRegisterIndex:Cursor, MIToken &, int"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/MachineScheduler.cpp",
            "functions": [
                "void:clusterNeighboringMemOps:int, bool, int *",
                "void:collectMemOpRecords:int &, int &"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/RegAllocFast.cpp",
            "functions": [
                "void:allocateInstruction:int &"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/SanitizerBinaryMetadata.cpp",
            "functions": [
                "bool:runOnMachineFunction:int &"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/SelectOptimize.cpp",
            "functions": [
                "void:getAnalysisUsage:int &"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp",
            "functions": [
                "int:replaceStoreOfFPConstant:int *",
                "int:visitEXTRACT_VECTOR_ELT:int *"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp",
            "functions": [
                "int:getPreferredExtendForValue:const int *"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp",
            "functions": [
                "int:OptimizeFloatStore:int *"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp",
            "functions": [
                "void:computeOperandLatency:SDNode *, SDNode *, unsigned int, int &"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp",
            "functions": [
                "void:visitAtomicLoad:const LoadInst &",
                "void:visitAtomicStore:const StoreInst &",
                "void:visitDbgInfo:const int &",
                "void:visitIntrinsicCall:const CallInst &, unsigned int"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp",
            "functions": [
                "int:CheckCondCode:const unsigned char *, unsigned int &, int",
                "int:CheckOpcode:const unsigned char *, unsigned int &, int *",
                "int:CheckValueType:const unsigned char *, unsigned int &, int, const int *, const DataLayout &",
                "unsigned int:IsPredicateKnownToFail:const unsigned char *, unsigned int, int, bool &, const int &, int &",
                "void:processDbgDeclares:FunctionLoweringInfo &"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/SjLjEHPrepare.cpp",
            "functions": [
                "Constructor:SjLjEHPrepare:const int *"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/TargetInstrInfo.cpp",
            "functions": [
                "int *:foldInlineAsmMemOperand:int &, int, int, const int &",
                "void:foldInlineAsmMemOperand:int *, unsigned int, int, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp",
            "functions": [
                "int:getELFKindForNamedSection:int, int",
                "unsigned int:calcUniqueIDUpdateFlagsAndSize:const int *, int, int, const int &, int &, int &, unsigned int &, unsigned int &, unsigned int &, const bool, const bool",
                "unsigned int:getELFSectionType:int, int"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/TargetPassConfig.cpp",
            "functions": [
                "int:getCGPassBuilderOption:"
            ]
        },
        {
            "filename": "/llvm/lib/CodeGen/WinEHPrepare.cpp",
            "functions": [
                "bool:prepareExplicitEH:int &",
                "int *:insertPHILoads:int *, int &",
                "void:cleanupPreparedFunclets:int &",
                "void:cloneCommonBlocks:int &",
                "void:colorFunclets:int &",
                "void:demotePHIsOnFunclets:int &, bool",
                "void:insertPHIStores:int *, int *",
                "void:removeImplausibleInstructions:int &",
                "void:replaceUseWithLoad:int *, int &, int *&, int &, int &",
                "void:verifyPreparedFunclets:int &"
            ]
        },
        {
            "filename": "/llvm/lib/DWARFLinker/DWARFLinker.cpp",
            "functions": [
                "void:analyzeImportedModule:const int &, int &, int *, int"
            ]
        },
        {
            "filename": "/llvm/lib/DWARFLinkerParallel/DWARFLinkerCompileUnit.cpp",
            "functions": [
                "void:analyzeImportedModule:const DWARFDebugInfoEntry *"
            ]
        },
        {
            "filename": "/llvm/lib/DWARFLinkerParallel/SyntheticTypeNameBuilder.cpp",
            "functions": [
                "int:addTypeName:UnitEntryPairTy, bool"
            ]
        },
        {
            "filename": "/llvm/lib/Debuginfod/Debuginfod.cpp",
            "functions": [
                "int:getDefaultDebuginfodUrls:"
            ]
        },
        {
            "filename": "/llvm/lib/ExecutionEngine/JITLink/ELF_x86_64.cpp",
            "functions": [
                "SectionRangeSymbolDesc:identifyELFSectionStartAndEndSymbols:int &, int &"
            ]
        },
        {
            "filename": "/llvm/lib/ExecutionEngine/JITLink/MachOLinkGraphBuilder.cpp",
            "functions": [
                "int:getScope:int, int"
            ]
        },
        {
            "filename": "/llvm/lib/ExecutionEngine/Orc/Debugging/DebuggerSupport.cpp",
            "functions": [
                "int:enableDebuggerSupport:int &"
            ]
        },
        {
            "filename": "/llvm/lib/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.cpp",
            "functions": [
                "bool:isDebugSection:int &"
            ]
        },
        {
            "filename": "/llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp",
            "functions": [
                "void:materialize:int"
            ]
        },
        {
            "filename": "/llvm/lib/ExecutionEngine/Orc/ObjectFileInterface.cpp",
            "functions": [
                "int:getMachOObjectFileSymbolInfo:int &, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/ExecutionEngine/Orc/Shared/ObjectFormats.cpp",
            "functions": [
                "bool:isCOFFInitializerSection:int"
            ]
        },
        {
            "filename": "/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldCOFF.cpp",
            "functions": [
                "uint64_t:getDLLImportOffset:unsigned int, StubMap &, int, bool"
            ]
        },
        {
            "filename": "/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldChecker.cpp",
            "functions": [
                "bool:checkAllRulesInBuffer:int, int *",
                "int:evalDecodeOperand:int",
                "int:evalIdentifierExpr:int, ParseContext",
                "int:evalLoadExpr:int",
                "int:evalNextPC:int, ParseContext",
                "int:evalParensExpr:int, ParseContext",
                "int:evalSectionAddr:int, ParseContext",
                "int:evalSimpleExpr:int, ParseContext",
                "int:evalSliceExpr:const int &",
                "int:evalStubOrGOTAddr:int, ParseContext, bool",
                "int:getTokenForError:int",
                "int:parseBinOpToken:int",
                "int:parseNumberString:int"
            ]
        },
        {
            "filename": "/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFAArch64.h",
            "functions": [
                "int:processRelocationRef:unsigned int, int, const int &, ObjSectionToIDMap &, StubMap &"
            ]
        },
        {
            "filename": "/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFI386.h",
            "functions": [
                "int:processRelocationRef:unsigned int, int, const int &, ObjSectionToIDMap &, StubMap &"
            ]
        },
        {
            "filename": "/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFThumb.h",
            "functions": [
                "int:processRelocationRef:unsigned int, int, const int &, ObjSectionToIDMap &, StubMap &"
            ]
        },
        {
            "filename": "/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFX86_64.h",
            "functions": [
                "int:processRelocationRef:unsigned int, int, const int &, ObjSectionToIDMap &, StubMap &"
            ]
        },
        {
            "filename": "/llvm/lib/FileCheck/FileCheck.cpp",
            "functions": [
                "bool:parsePattern:int, int, int &, const int &",
                "int:FindCheckType:const int &, int, int, bool &",
                "int:FindRegexVarEnd:int, int &"
            ]
        },
        {
            "filename": "/llvm/lib/IR/AsmWriter.cpp",
            "functions": [
                "void:printFunctionSummary:const int *",
                "void:printGlobal:const int *",
                "void:printMetadataIdentifier:int, int &",
                "void:printModuleSummaryIndex:"
            ]
        },
        {
            "filename": "/llvm/lib/IR/AutoUpgrade.cpp",
            "functions": [
                "bool:UpgradeIntrinsicFunction1:int *, int *&",
                "bool:UpgradeX86IntrinsicFunction:int *, int, int *&",
                "int:ShouldUpgradeNVPTXBF16Intrinsic:int"
            ]
        },
        {
            "filename": "/llvm/lib/IR/DebugInfo.cpp",
            "functions": [
                "bool:StripDebugInfo:int &",
                "void:findDbgIntrinsics:",
                "void:findDbgUsers:int &, int *, int *",
                "void:findDbgValues:int &, int *, int *"
            ]
        },
        {
            "filename": "/llvm/lib/IR/Function.cpp",
            "functions": [
                "int:findTargetSubtable:int"
            ]
        },
        {
            "filename": "/llvm/lib/IR/PassInstrumentation.cpp",
            "functions": [
                "bool:isSpecialPass:int, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/IR/Type.cpp",
            "functions": [
                "TargetTypeInfo:getTargetTypeInfo:const int *"
            ]
        },
        {
            "filename": "/llvm/lib/IR/Verifier.cpp",
            "functions": [
                "void:verifyFunctionAttrs:int *, int, const int *, bool, bool",
                "void:visitIntrinsicCall:int, int &",
                "void:visitNamedMDNode:const int &"
            ]
        },
        {
            "filename": "/llvm/lib/InterfaceStub/IFSHandler.cpp",
            "functions": [
                "bool:usesTriple:int"
            ]
        },
        {
            "filename": "/llvm/lib/Linker/IRMover.cpp",
            "functions": [
                "int:run:"
            ]
        },
        {
            "filename": "/llvm/lib/MC/ELFObjectWriter.cpp",
            "functions": [
                "bool:isDwoSection:const int &",
                "void:executePostLayoutBinding:int &, const int &",
                "void:writeSectionData:const int &, int &, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/MC/MCAsmStreamer.cpp",
            "functions": [
                "void:addExplicitComment:const int &"
            ]
        },
        {
            "filename": "/llvm/lib/MC/MCDisassembler/Disassembler.cpp",
            "functions": [
                "int:getItineraryLatency:LLVMDisasmContext *, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/MC/MCParser/COFFMasmParser.cpp",
            "functions": [
                "bool:ParseDirectiveSegment:int, int"
            ]
        },
        {
            "filename": "/llvm/lib/MC/MCParser/ELFAsmParser.cpp",
            "functions": [
                "bool:ParseSectionArguments:bool, int",
                "bool:allowSectionTypeMismatch:const int &, int, unsigned int"
            ]
        },
        {
            "filename": "/llvm/lib/MC/MCParser/MasmParser.cpp",
            "functions": [
                "bool:parseDirectiveEcho:int",
                "bool:parseStatement:ParseStatementInfo &, int *"
            ]
        },
        {
            "filename": "/llvm/lib/MC/WasmObjectWriter.cpp",
            "functions": [
                "bool:isDwoSection:const int &",
                "int:writeOneObject:int &, const int &, DwoMode",
                "void:recordRelocation:int &, const int &, const int *, const int &, int, int &"
            ]
        },
        {
            "filename": "/llvm/lib/MC/WinCOFFObjectWriter.cpp",
            "functions": [
                "bool:isDwoSection:const int &"
            ]
        },
        {
            "filename": "/llvm/lib/ObjCopy/COFF/COFFObjcopy.cpp",
            "functions": [
                "bool:isDebugSection:const Section &"
            ]
        },
        {
            "filename": "/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp",
            "functions": [
                "bool:isAArch64MappingSymbol:const Symbol &",
                "bool:isArmMappingSymbol:const Symbol &",
                "bool:isCompressable:const SectionBase &",
                "bool:isDWOSection:const SectionBase &",
                "bool:isDebugSection:const SectionBase &",
                "int:handleArgs:const int &, const int &, Object &",
                "int:replaceAndRemoveSections:const int &, const int &, Object &",
                "int:updateAndRemoveSymbols:const int &, const int &, Object &"
            ]
        },
        {
            "filename": "/llvm/lib/ObjCopy/MachO/MachOObject.h",
            "functions": [
                "bool:isSwiftSymbol:"
            ]
        },
        {
            "filename": "/llvm/lib/ObjCopy/wasm/WasmObjcopy.cpp",
            "functions": [
                "bool:isDebugSection:const Section &",
                "bool:isLinkerSection:const Section &"
            ]
        },
        {
            "filename": "/llvm/lib/Object/COFFImportFile.cpp",
            "functions": [
                "int:getNameType:int, int, int, bool",
                "int:replace:int, int, int"
            ]
        },
        {
            "filename": "/llvm/lib/Object/COFFModuleDefinition.cpp",
            "functions": [
                "Token:lex:",
                "bool:isDecorated:int, bool"
            ]
        },
        {
            "filename": "/llvm/lib/Object/ELFObjectFile.cpp",
            "functions": [
                "int:readBBAddrMapImpl:"
            ]
        },
        {
            "filename": "/llvm/lib/Object/RecordStreamer.cpp",
            "functions": [
                "void:flushSymverDirectives:"
            ]
        },
        {
            "filename": "/llvm/lib/ObjectYAML/ELFEmitter.cpp",
            "functions": [
                "bool:initImplicitHeader:ContiguousBlobAccumulator &, int &, int, int *"
            ]
        },
        {
            "filename": "/llvm/lib/Option/OptTable.cpp",
            "functions": [
                "bool:isInput:const int &, int",
                "bool:optionMatches:const int &, int",
                "unsigned int:matchOption:const int *, int, bool"
            ]
        },
        {
            "filename": "/llvm/lib/Passes/PassBuilder.cpp",
            "functions": [
                "bool:checkParametrizedPassName:int, int",
                "bool:startsWithDefaultPipelineAliasPrefix:int",
                "int:name:",
                "int:run:int &, int &"
            ]
        },
        {
            "filename": "/llvm/lib/ProfileData/InstrProf.cpp",
            "functions": [
                "int:getFuncNameWithoutPrefix:int, int"
            ]
        },
        {
            "filename": "/llvm/lib/ProfileData/InstrProfReader.cpp",
            "functions": [
                "int:extractName:int"
            ]
        },
        {
            "filename": "/llvm/lib/ProfileData/ItaniumManglingCanonicalizer.cpp",
            "functions": [
                "int:parseMaybeMangledName:int &, int, bool"
            ]
        },
        {
            "filename": "/llvm/lib/ProfileData/SampleProfReader.cpp",
            "functions": [
                "bool:parseMetadata:const int &, uint64_t &, uint32_t &"
            ]
        },
        {
            "filename": "/llvm/lib/Support/CommandLine.cpp",
            "functions": [
                "void:printHelp:"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp",
            "functions": [
                "bool:canUseAsPrologue:const int &",
                "int:eliminateCallFramePseudoInstr:MachineFunction &, int &, int",
                "unsigned int:findScratchNonCalleeSaveRegister:int *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp",
            "functions": [
                "bool:shouldTagGlobal:int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp",
            "functions": [
                "void:Select:int *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp",
            "functions": [
                "Constructor:AArch64TargetLowering:const int &, const AArch64Subtarget &",
                "const char *:getTargetNodeName:unsigned int",
                "int *:EmitInstrWithCustomInserter:MachineInstr &, int *",
                "int:EmitVectorComparison:int, int, AArch64CC::CondCode, bool, int, const int &, int &",
                "int:LowerDYNAMIC_STACKALLOC:int, int &",
                "int:createGPRPairNode:int &, int",
                "int:shouldExpandAtomicRMWInIR:int *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp",
            "functions": [
                "int:probedStackAlloc:int, int, bool"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AArch64/AArch64MachineFunctionInfo.cpp",
            "functions": [
                "Constructor:AArch64FunctionInfo:const Function &, const AArch64Subtarget *",
                "bool:ShouldSignWithBKey:const Function &, const AArch64Subtarget &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AArch64/AArch64RegisterInfo.cpp",
            "functions": [
                "int:getStrictlyReservedRegs:const MachineFunction &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AArch64/AArch64SLSHardening.cpp",
            "functions": [
                "void:populateThunk:MachineFunction &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp",
            "functions": [
                "bool:MatchAndEmitInstruction:int, unsigned int &, int &, int &, uint64_t &, bool",
                "bool:parseAuthExpr:const int *&, int &",
                "bool:showMatchError:int, unsigned int, uint64_t, int &",
                "int:tryParseFPImm:"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp",
            "functions": [
                "Constructor:AArch64LegalizerInfo:const AArch64Subtarget &",
                "bool:legalizeCustom:int &, int &",
                "bool:legalizeIntrinsic:int &, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp",
            "functions": [
                "void:getSIProgramInfo:SIProgramInfo &, const MachineFunction &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp",
            "functions": [
                "Constructor:IGroupLPDAGMutation:bool",
                "int:createIGroupLPDAGMutation:bool",
                "void:applyIGLPStrategy:int &, int &, bool",
                "void:initIGLPOpt:int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp",
            "functions": [
                "Constructor:AMDGPUTargetLowering:const TargetMachine &, const AMDGPUSubtarget &",
                "int:LowerOperation:int, int &",
                "int:lowerFEXP:int, int &",
                "void:ReplaceNodeResults:int *, int &, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp",
            "functions": [
                "Constructor:AMDGPULegalizerInfo:const GCNSubtarget &, const GCNTargetMachine &",
                "bool:legalizeCustom:int &, MachineInstr &",
                "bool:legalizeFExp:MachineInstr &, MachineIRBuilder &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/AMDGPULibFunc.cpp",
            "functions": [
                "bool:eatTerm:"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/AMDGPUSubtarget.cpp",
            "functions": [
                "unsigned int:getConstantBusLimit:unsigned int",
                "unsigned int:getNSAThreshold:const MachineFunction &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp",
            "functions": [
                "bool:mustPreserveGV:const GlobalValue &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/AMDGPUTargetObjectFile.cpp",
            "functions": [
                "int *:getExplicitSectionGlobal:const int *, int, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.cpp",
            "functions": [
                "bool:isReadRegisterSourceOfDivergence:const int *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp",
            "functions": [
                "bool:ParseInstruction:int &, int, int, int &",
                "bool:parseCnt:int &",
                "bool:parseDimId:unsigned int &",
                "bool:validateBLGP:const int &, const int &",
                "bool:validateCoherencyBits:const int &, const int &, const int &",
                "bool:validateMIMGAddrSize:const int &, const int &",
                "bool:validateMIMGAtomicDMask:const int &",
                "bool:validateMIMGD16:const int &",
                "bool:validateMIMGDataSize:const int &, const int &",
                "bool:validateMIMGMSAA:const int &",
                "bool:validateSMEMOffset:const int &, const int &",
                "bool:validateVOPDRegBankConstraints:const int &, const int &",
                "const RegInfo *:getRegularRegInfo:int",
                "int:parseCPol:int &",
                "int:parseInterpAttr:int &",
                "int:parseMnemonicSuffix:int",
                "unsigned int:getCPolKind:int, int, bool &",
                "unsigned int:getConstantBusLimit:unsigned int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/Disassembler/AMDGPUDisassembler.cpp",
            "functions": [
                "int:decodeSMEMOffset:int &, unsigned int, int, const int *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/GCNCreateVOPD.cpp",
            "functions": [
                "bool:doReplace:const SIInstrInfo *, VOPDCombineInfo &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp",
            "functions": [
                "int:getHazardType:int *, int",
                "unsigned int:PreEmitNoopsCommon:MachineInstr *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/GCNRegPressure.cpp",
            "functions": [
                "void:recede:const int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/GCNVOPDUtils.cpp",
            "functions": [
                "Constructor:VOPDPairingMutation:int",
                "bool:checkVOPDRegConstraints:const SIInstrInfo &, const int &, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUInstPrinter.cpp",
            "functions": [
                "void:printCPol:const int *, unsigned int, const int &, int &",
                "void:printRegularOperand:const int *, unsigned int, const int &, int &",
                "void:printVOPDst:const int *, unsigned int, const int &, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/R600OpenCLImageTypeLoweringPass.cpp",
            "functions": [
                "bool:replaceImageUses:int &, int, int &, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/SIAnnotateControlFlow.cpp",
            "functions": [
                "bool:closeControlFlow:int *",
                "bool:handleLoop:int *",
                "bool:insertElse:int *",
                "bool:openIf:int *",
                "int *:handleLoopCondition:int *, int *, int *, int *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/SIISelLowering.cpp",
            "functions": [
                "bool:isLegalAddressingMode:const int &, const int &, int *, unsigned int, Instruction *",
                "bool:isLegalGlobalAddressingMode:const int &",
                "int *:EmitInstrWithCustomInserter:MachineInstr &, int *",
                "int:lowerKernArgParameterPtr:int &, const int &, int, uint64_t",
                "std::pair<unsigned int, const TargetRegisterClass *>:getRegForInlineAsmConstraint:const TargetRegisterInfo *, StringRef, int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/SIInsertHardClauses.cpp",
            "functions": [
                "bool:runOnMachineFunction:MachineFunction &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp",
            "functions": [
                "void:moveToVALUImpl:SIInstrWorklist &, MachineDominatorTree *, MachineInstr &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/SIInstrInfo.h",
            "functions": [
                "bool:isVMEM:const int &",
                "bool:isVMEM:uint16_t"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/SIMachineFunctionInfo.cpp",
            "functions": [
                "bool:mayUseAGPRs:const Function &",
                "int:getScavengeFI:MachineFrameInfo &, const SIRegisterInfo &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp",
            "functions": [
                "bool:eliminateFrameIndex:int, int, unsigned int, RegScavenger *",
                "bool:shouldRealignStack:const MachineFunction &",
                "const TargetRegisterClass *:getRegClassForSizeOnBank:unsigned int, const RegisterBank &",
                "int:getFrameRegister:const MachineFunction &",
                "void:buildSpillLoadStore:int &, int, const int &, unsigned int, int, int, bool, int, int64_t, int *, RegScavenger *, LiveRegUnits *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp",
            "functions": [
                "TargetIDSetting:getTargetIDSettingFromFeatureString:StringRef",
                "bool:isLegalSMRDEncodedSignedOffset:const MCSubtargetInfo &, int64_t, bool",
                "bool:isLegalSMRDEncodedUnsignedOffset:const MCSubtargetInfo &, int64_t",
                "bool:isMAC:unsigned int",
                "bool:isPermlane16:unsigned int",
                "int:getSMRDEncodedOffset:const MCSubtargetInfo &, int64_t, bool",
                "unsigned int:getTgtId:const StringRef",
                "void:setTargetIDFromTargetIDStream:StringRef"
            ]
        },
        {
            "filename": "/llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp",
            "functions": [
                "bool:hasLowDefLatency:const int &, const MachineInstr &, unsigned int",
                "int:getLDMDefCycle:const InstrItineraryData *, const int &, unsigned int, unsigned int, unsigned int",
                "int:getOperandLatency:const InstrItineraryData *, const MachineInstr &, unsigned int, const MachineInstr &, unsigned int",
                "int:getOperandLatency:const InstrItineraryData *, const int &, unsigned int, unsigned int, const int &, unsigned int, unsigned int",
                "int:getOperandLatency:const InstrItineraryData *, int *, unsigned int, int *, unsigned int",
                "int:getOperandLatencyImpl:const InstrItineraryData *, const MachineInstr &, unsigned int, const int &, unsigned int, const int &, unsigned int, const MachineInstr &, unsigned int, const int &, unsigned int",
                "int:getSTMUseCycle:const InstrItineraryData *, const int &, unsigned int, unsigned int, unsigned int",
                "int:getVLDMDefCycle:const InstrItineraryData *, const int &, unsigned int, unsigned int, unsigned int",
                "int:getVSTMUseCycle:const InstrItineraryData *, const int &, unsigned int, unsigned int, unsigned int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/ARM/ARMISelLowering.cpp",
            "functions": [
                "int:createGPRPairNode:SelectionDAG &, int",
                "int:getSchedulingPreference:int *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/ARM/ARMMachineFunctionInfo.cpp",
            "functions": [
                "bool:GetBranchTargetEnforcement:const int &, const ARMSubtarget *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/ARM/ARMSLSHardening.cpp",
            "functions": [
                "void:populateThunk:MachineFunction &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/ARM/ARMSubtarget.cpp",
            "functions": [
                "void:initSubtargetFeatures:StringRef, StringRef"
            ]
        },
        {
            "filename": "/llvm/lib/Target/ARM/ARMTargetMachine.cpp",
            "functions": [
                "ARMBaseTargetMachine::ARMABI:computeTargetABI:const Triple &, StringRef, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp",
            "functions": [
                "bool:isLoweredToCall:const Function *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp",
            "functions": [
                "bool:ParseInstruction:int &, int, int, int &",
                "bool:doesIgnoreDataTypeSuffix:int, int",
                "bool:isCDEDualRegInstr:int",
                "bool:isCDEInstr:int",
                "bool:isITPredicableCDEInstr:int",
                "bool:isMnemonicVPTPredicable:int, int",
                "bool:isVPTPredicableCDEInstr:int",
                "bool:parseOperand:int &, int",
                "bool:shouldOmitVectorPredicateOperand:int, int &",
                "int:splitMnemonic:int, int, unsigned int &, unsigned int &, bool &, unsigned int &, int &",
                "void:getMnemonicAcceptInfo:int, int, int, bool &, bool &, bool &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/ARM/MCTargetDesc/ARMELFObjectWriter.cpp",
            "functions": [
                "unsigned int:GetRelocTypeInner:const int &, const int &, bool, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/AVR/AVRAsmPrinter.cpp",
            "functions": [
                "bool:doFinalization:int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp",
            "functions": [
                "bool:IsPreserveDIAccessIndexCall:const int *, CallInfo &",
                "bool:removePreserveAccessIndexIntrinsic:int &",
                "uint64_t:getConstant:const int *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/BPF/BPFCheckAndAdjustIR.cpp",
            "functions": [
                "bool:adjustIR:Module &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/BPF/BPFPreserveDIType.cpp",
            "functions": [
                "bool:BPFPreserveDITypeImpl:int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/BPF/BPFSubtarget.cpp",
            "functions": [
                "Constructor:BPFSubtarget:const int &, const std::string &, const std::string &, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/BPF/BPFTargetMachine.cpp",
            "functions": [
                "int:LLVMInitializeBPFTarget:",
                "void:registerPassBuilderCallbacks:int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/BPF/BTFDebug.cpp",
            "functions": [
                "std::string:populateFileContent:const int *",
                "void:processGlobals:bool"
            ]
        },
        {
            "filename": "/llvm/lib/Target/BPF/MCTargetDesc/BPFInstPrinter.cpp",
            "functions": [
                "void:printExpr:const int *, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/DirectX/DXILResource.cpp",
            "functions": [
                "Constructor:UAVResource:uint32_t, int",
                "void:parseSourceType:int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp",
            "functions": [
                "int:getOperandLatency:const int *, const MachineInstr &, unsigned int, const MachineInstr &, unsigned int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/Hexagon/HexagonSubtarget.cpp",
            "functions": [
                "HexagonSubtarget &:initializeSubtargetDependencies:StringRef, StringRef",
                "void:adjustSchedDependency:SUnit *, int, SUnit *, int, SDep &",
                "void:restoreLatency:SUnit *, SUnit *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp",
            "functions": [
                "int *:SelectSectionForGlobal:const int *, int, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCTargetDesc.cpp",
            "functions": [
                "void:prettyPrintAsm:int &, uint64_t, const int &, const int &, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/Lanai/AsmParser/LanaiAsmParser.cpp",
            "functions": [
                "bool:ParseInstruction:int &, int, int, int &",
                "int:splitMnemonic:int, int, int *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/Lanai/LanaiTargetObjectFile.cpp",
            "functions": [
                "bool:isGlobalInSmallSectionImpl:const int *, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/LoongArch/LoongArchISelDAGToDAG.cpp",
            "functions": [
                "void:Select:int *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp",
            "functions": [
                "Constructor:LoongArchTargetLowering:const int &, const LoongArchSubtarget &",
                "int *:EmitInstrWithCustomInserter:MachineInstr &, int *",
                "int:LowerOperation:int, int &",
                "int:getRegForInlineAsmConstraint:const int *, StringRef, int",
                "int:performINTRINSIC_WO_CHAINCombine:int *, int &, int &, const LoongArchSubtarget &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/M68k/AsmParser/M68kAsmParser.cpp",
            "functions": [
                "bool:parseRegisterName:int &, int, int",
                "unsigned int:getRegisterIndex:unsigned int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/M68k/M68kExpandPseudo.cpp",
            "functions": [
                "bool:ExpandMI:int &, int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp",
            "functions": [
                "bool:searchSymbolAlias:int &",
                "int:matchACRegisterName:int",
                "int:matchFCCRegisterName:int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/Mips/MCTargetDesc/MipsABIInfo.cpp",
            "functions": [
                "MipsABIInfo:computeTargetABI:const int &, StringRef, const MCTargetOptions &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/Mips/MipsISelLowering.cpp",
            "functions": [
                "std::pair<unsigned int, const TargetRegisterClass *>:parseRegForInlineAsmConstraint:StringRef, int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp",
            "functions": [
                "Constructor:NVPTXTargetLowering:const NVPTXTargetMachine &, const NVPTXSubtarget &",
                "int:LowerOperation:int, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/NVPTX/NVPTXReplaceImageHandles.cpp",
            "functions": [
                "bool:findIndexForHandle:int &, int &, unsigned int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/NVPTX/NVPTXSubtarget.cpp",
            "functions": [
                "Constructor:NVPTXSubtarget:const int &, const std::string &, const std::string &, const NVPTXTargetMachine &",
                "NVPTXSubtarget &:initializeSubtargetDependencies:int, int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/NVPTX/NVPTXSubtarget.h",
            "functions": [
                "unsigned int:getSmVersion:"
            ]
        },
        {
            "filename": "/llvm/lib/Target/PowerPC/AsmParser/PPCAsmParser.cpp",
            "functions": [
                "bool:ParseDirective:int",
                "void:ProcessInstruction:int &, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp",
            "functions": [
                "PPCAsmPrinter::TOCEntryType:getTOCEntryTypeForMO:const MachineOperand &",
                "void:emitGlobalVariableHelper:const int *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp",
            "functions": [
                "bool:assignCalleeSavedSpillSlots:int &, const int *, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/PowerPC/PPCISelLowering.cpp",
            "functions": [
                "bool:isValidPCRelNode:",
                "int:LowerGlobalAddress:int, int &",
                "int:LowerGlobalTLSAddressLinux:int, int &",
                "void:getLabelAccessInfo:bool, const PPCSubtarget &, unsigned int &, unsigned int &, const GlobalValue *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp",
            "functions": [
                "int:getOperandLatency:const int *, const MachineInstr &, unsigned int, const MachineInstr &, unsigned int",
                "int:getSerializableDirectMachineOperandTargetFlags:",
                "std::pair<unsigned int, unsigned int>:decomposeMachineOperandsTargetFlags:unsigned int",
                "unsigned int:getInstrLatency:const int *, const MachineInstr &, unsigned int *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/PowerPC/PPCInstrInfo.h",
            "functions": [
                "int:getOperandLatency:const int *, int *, unsigned int, int *, unsigned int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/PowerPC/PPCMCInstLower.cpp",
            "functions": [
                "MCOperand:GetSymbolRef:const MachineOperand &, const int *, AsmPrinter &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/PowerPC/PPCPreEmitPeephole.cpp",
            "functions": [
                "bool:isGOTPLDpc:MachineInstr &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/PowerPC/PPCTOCRegDeps.cpp",
            "functions": [
                "bool:hasTOCLoReloc:const MachineInstr &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/PowerPC/PPCTargetMachine.cpp",
            "functions": [
                "PPCTargetMachine::PPCABI:computeTargetABI:const int &, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp",
            "functions": [
                "Constructor:RISCVAsmParser:const int &, int &, const int &, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/GISel/RISCVCallLowering.cpp",
            "functions": [
                "void:saveVarArgRegisters:MachineIRBuilder &, int &, int &, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/GISel/RISCVInstructionSelector.cpp",
            "functions": [
                "bool:select:int &",
                "bool:selectAddr:int &, int &, int &, bool, bool"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/GISel/RISCVLegalizerInfo.cpp",
            "functions": [
                "Constructor:RISCVLegalizerInfo:const RISCVSubtarget &",
                "bool:legalizeCustom:int &, int &",
                "bool:legalizeVAStart:int &, MachineIRBuilder &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.cpp",
            "functions": [
                "ABI:computeTargetABI:const int &, const int &, int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/RISCVDeadRegisterDefinitions.cpp",
            "functions": [
                "Constructor:RISCVDeadRegisterDefinitions:"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/RISCVExpandPseudoInsts.cpp",
            "functions": [
                "Constructor:RISCVExpandPseudo:",
                "Constructor:RISCVPreRAExpandPseudo:",
                "bool:expandRV32ZdinxStore:int &, int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/RISCVFoldMasks.cpp",
            "functions": [
                "Constructor:RISCVFoldMasks:"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp",
            "functions": [
                "void:determineCalleeSaves:int &, int &, int *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/RISCVISelLowering.cpp",
            "functions": [
                "bool:CC_RISCV:const int &, RISCVABI::ABI, unsigned int, int, int, int, int, int &, bool, bool, int *, const RISCVTargetLowering &, int",
                "bool:CC_RISCVAssign2XLen:unsigned int, int &, int, int, unsigned int, int, int, int",
                "bool:allowsMisalignedMemoryAccesses:int, unsigned int, int, int, unsigned int *",
                "bool:isLegalStridedLoadStore:int, int",
                "bool:matchIndexAsWiderOp:int, int, int, int, const RISCVSubtarget &",
                "bool:shouldConvertConstantLoadToIntImm:const APInt &, int *",
                "int:LowerFormalArguments:int, int, bool, const int &, const int &, int &, int &",
                "int:getOptimalMemOpType:const int &, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/RISCVInsertReadWriteCSR.cpp",
            "functions": [
                "Constructor:RISCVInsertReadWriteCSR:"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp",
            "functions": [
                "Constructor:RISCVInsertVSETVLI:"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/RISCVInsertWriteVXRM.cpp",
            "functions": [
                "Constructor:RISCVInsertWriteVXRM:"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/RISCVMakeCompressible.cpp",
            "functions": [
                "Constructor:RISCVMakeCompressibleOpt:"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/RISCVMoveMerger.cpp",
            "functions": [
                "Constructor:RISCVMoveMerge:"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp",
            "functions": [
                "Constructor:RISCVOptWInstrs:"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/RISCVPushPopOptimizer.cpp",
            "functions": [
                "Constructor:RISCVPushPopOpt:"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/RISCVRVVInitUndef.cpp",
            "functions": [
                "Constructor:RISCVInitUndef:",
                "bool:processBasicBlock:int &, int &, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/RISCVRegisterInfo.cpp",
            "functions": [
                "void:lowerVRELOAD:int",
                "void:lowerVSPILL:int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/RISCVSubtarget.h",
            "functions": [
                "bool:hasMacroFusion:"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/RISCVTargetMachine.cpp",
            "functions": [
                "const RISCVSubtarget *:getSubtargetImpl:const int &",
                "void:addMachineSSAOptimization:"
            ]
        },
        {
            "filename": "/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.h",
            "functions": [
                "bool:isLegalMaskedGatherScatter:int *, int",
                "bool:isLegalMaskedLoadStore:int *, int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/SPIRV/SPIRVEmitIntrinsics.cpp",
            "functions": [
                "bool:runOnFunction:int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/SPIRV/SPIRVGlobalRegistry.cpp",
            "functions": [
                "int *:createSPIRVType:const int *, MachineIRBuilder &, int, bool"
            ]
        },
        {
            "filename": "/llvm/lib/Target/SPIRV/SPIRVUtils.cpp",
            "functions": [
                "const int *:getTypedPtrEltType:const int *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/SystemZ/AsmParser/SystemZAsmParser.cpp",
            "functions": [
                "int:parseAddress:int &, MemoryKind, RegisterKind",
                "int:parseDirective:int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/SystemZ/MCTargetDesc/SystemZInstPrinter.cpp",
            "functions": [
                "void:printAddress:const int *, int, const MCOperand &, int, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp",
            "functions": [
                "void:Select:int *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp",
            "functions": [
                "Constructor:SystemZTargetLowering:const int &, const SystemZSubtarget &",
                "const char *:getTargetNodeName:unsigned int",
                "int *:EmitInstrWithCustomInserter:int &, int *",
                "int:LowerOperation:int, int &",
                "int:lowerATOMIC_CMP_SWAP:int, int &",
                "int:lowerATOMIC_LOAD_OP:int, int &, unsigned int",
                "int:lowerATOMIC_LOAD_SUB:int, int &",
                "int:shouldExpandAtomicRMWInIR:int *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/VE/AsmParser/VEAsmParser.cpp",
            "functions": [
                "int:splitMnemonic:int, int, int *"
            ]
        },
        {
            "filename": "/llvm/lib/Target/WebAssembly/AsmParser/WebAssemblyAsmParser.cpp",
            "functions": [
                "void:doBeforeLabelEmit:int *, int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/WebAssembly/WebAssemblyAsmPrinter.cpp",
            "functions": [
                "bool:isEmscriptenInvokeName:int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp",
            "functions": [
                "bool:canLongjmp:const int *",
                "void:handleLongjmpableCallsForEmscriptenSjLj:int &, int &, int &, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp",
            "functions": [
                "bool:HandleAVX512Operand:int &",
                "bool:MatchRegisterByName:int &, int, int, int",
                "bool:ParseDirective:int",
                "bool:ParseInstruction:int &, int, int, int &",
                "bool:ParseIntelDotOperator:IntelExprStateMachine &, int &",
                "bool:ParseIntelExpression:IntelExprStateMachine &, int &",
                "bool:ParseRoundingModeOp:int, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/X86/GISel/X86InstructionSelector.cpp",
            "functions": [
                "bool:select:int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/X86/GISel/X86LegalizerInfo.cpp",
            "functions": [
                "Constructor:X86LegalizerInfo:const X86Subtarget &, const X86TargetMachine &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/X86/MCTargetDesc/X86InstComments.cpp",
            "functions": [
                "bool:EmitAnyX86InstComments:const MCInst *, raw_ostream &, const MCInstrInfo &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp",
            "functions": [
                "PrefixKind:emitVEXOpcodePrefix:int, const int &, const int &, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/X86/MCTargetDesc/X86MCTargetDesc.cpp",
            "functions": [
                "MCSubtargetInfo *:createX86MCSubtargetInfo:const Triple &, StringRef, StringRef"
            ]
        },
        {
            "filename": "/llvm/lib/Target/X86/X86DomainReassignment.cpp",
            "functions": [
                "void:initConverters:"
            ]
        },
        {
            "filename": "/llvm/lib/Target/X86/X86FastISel.cpp",
            "functions": [
                "bool:handleConstantAddresses:const int *, X86AddressMode &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/X86/X86FixupVectorConstants.cpp",
            "functions": [
                "bool:processInstruction:int &, int &, int &",
                "int *:rebuildSplatableConstant:const int *, unsigned int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/X86/X86ISelLowering.cpp",
            "functions": [
                "Constructor:X86TargetLowering:const X86TargetMachine &, const X86Subtarget &",
                "int:LowerBUILD_VECTOR:int, int &",
                "int:canonicalizeBitSelect:int *, int &, const X86Subtarget &",
                "int:combineConcatVectorOps:const int &, int, int, int &, int &, const X86Subtarget &",
                "int:combineLoad:int *, int &, int &, const X86Subtarget &",
                "int:combineShuffle:int *, int &, int &, const X86Subtarget &",
                "int:combineStore:int *, int &, int &, const X86Subtarget &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/X86/X86InsertPrefetch.cpp",
            "functions": [
                "bool:findPrefetchInfo:const int *, const int &, Prefetches &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/X86/X86InstrInfo.cpp",
            "functions": [
                "Constructor:X86InstrInfo:X86Subtarget &",
                "FunctionPass *:createCleanupLocalDynamicTLSPass:",
                "FunctionPass *:createX86GlobalBaseRegPass:",
                "bool:ExpandMOVImmSExti8:MachineInstrBuilder &, const int &, const X86Subtarget &",
                "bool:FoldImmediateImpl:int &, int *, int, int64_t, int *, bool",
                "bool:expandPostRAPseudo:int &",
                "bool:isCommutableVPERMV3Instruction:unsigned int",
                "bool:isDefConvertible:const int &, bool &, bool &",
                "bool:isFunctionSafeToOutlineFrom:int &, bool",
                "bool:isNonFoldablePartialRegisterLoad:const int &, const int &, const int &",
                "bool:isReallyTriviallyReMaterializable:const int &",
                "bool:isSafeToMoveRegClassDefs:const int *",
                "bool:optimizeCompareInstr:int &, int, int, int64_t, int64_t, const int *",
                "bool:reverseBranchCondition:int &",
                "bool:unfoldMemoryOperand:int &, int &, unsigned int, bool, bool, int &",
                "bool:unfoldMemoryOperand:int &, int *, int &",
                "const uint16_t *:lookup:unsigned int, unsigned int, int",
                "const uint16_t *:lookupAVX512:unsigned int, unsigned int, int",
                "int *:SetRegister:int &, unsigned int *",
                "int *:commuteInstructionImpl:int &, bool, unsigned int, unsigned int",
                "int *:foldMemoryOperandImpl:int &, int &, int, int, int &, int *",
                "int *:foldMemoryOperandImpl:int &, int &, int, int, int, int *, int *",
                "int:insertOutlinedCall:int &, int &, int &, int &, int &",
                "unsigned int:getCMovOpcode:unsigned int, bool",
                "unsigned int:getCommutedVPERMV3Opcode:unsigned int",
                "unsigned int:getFMA3OpcodeToCommuteOperands:const int &, unsigned int, unsigned int, const X86InstrFMA3Group &",
                "unsigned int:getGlobalBaseReg:int *",
                "unsigned int:getLoadStoreRegOpcode:int, const int *, bool, const X86Subtarget &, bool",
                "void:buildOutlinedFrame:int &, int &, const int &",
                "void:commuteVPTERNLOG:int &, unsigned int, unsigned int",
                "void:copyPhysReg:int &, int, const int &, MCRegister, MCRegister, bool",
                "void:expandLoadStackGuard:MachineInstrBuilder &, const int &",
                "void:setExecutionDomain:int &, unsigned int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/X86/X86MCInstLower.cpp",
            "functions": [
                "void:addConstantComments:const int *, MCStreamer &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/X86/X86RegisterInfo.cpp",
            "functions": [
                "const int *:getCalleeSavedRegs:const int *",
                "const uint32_t *:getCallPreservedMask:const int &, int"
            ]
        },
        {
            "filename": "/llvm/lib/Target/X86/X86Subtarget.cpp",
            "functions": [
                "void:initSubtargetFeatures:StringRef, StringRef, StringRef"
            ]
        },
        {
            "filename": "/llvm/lib/Target/XCore/XCoreISelLowering.cpp",
            "functions": [
                "Constructor:XCoreTargetLowering:const TargetMachine &, const XCoreSubtarget &",
                "int:LowerOperation:int, int &",
                "int:getGlobalAddressWrapper:int, const int *, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Target/XCore/XCoreTargetObjectFile.cpp",
            "functions": [
                "int *:getExplicitSectionGlobal:const int *, int, const TargetMachine &"
            ]
        },
        {
            "filename": "/llvm/lib/TargetParser/ARMTargetParser.cpp",
            "functions": [
                "bool:stripNegationPrefix:int &"
            ]
        },
        {
            "filename": "/llvm/lib/TargetParser/CSKYTargetParser.cpp",
            "functions": [
                "bool:stripNegationPrefix:int &"
            ]
        },
        {
            "filename": "/llvm/lib/TargetParser/Triple.cpp",
            "functions": [
                "int:parseARMArch:int",
                "int:parseArch:int",
                "int:parseSubArch:int"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Coroutines/CoroFrame.cpp",
            "functions": [
                "void:cacheDIVar:FrameDataInfo &, int &",
                "void:insertSpills:const FrameDataInfo &, int &",
                "void:salvageDebugInfo:int &, int *, bool, bool"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/IPO/AttributorAttributes.cpp",
            "functions": [
                "int:getConstantRangeFromLVI:int &, const int *",
                "void:createInitialization:int *, int &, int &, unsigned int, int &",
                "void:createReplacementValues:int, int *, int, int *, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/IPO/LowerTypeTests.cpp",
            "functions": [
                "void:createJumpTable:int *, int"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp",
            "functions": [
                "bool:AddCalls:VTableSlotInfo &, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp",
            "functions": [
                "int *:foldBoxMultiply:int &"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp",
            "functions": [
                "bool:canFreelyInvert:int &, int *, int *",
                "int *:matchDeMorgansLaws:int &, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/InstCombine/InstCombineNegator.cpp",
            "functions": [
                "int *:Negate:bool, bool, int *, int &",
                "int *:visitImpl:int *, bool, unsigned int"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp",
            "functions": [
                "bool:setShiftFlags:int &, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp",
            "functions": [
                "int *:CreateMetadataGlobal:int &, int *, int"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Instrumentation/MemProfiler.cpp",
            "functions": [
                "void:readMemprof:int &, int &, int *, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Instrumentation/SanitizerCoverage.cpp",
            "functions": [
                "int:CreateSecStartEnd:int &, const char *, int *",
                "void:InjectTraceForSwitch:int &, int"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Scalar/AlignmentFromAssumptions.cpp",
            "functions": [
                "int:getNewAlignment:const int *, const int *, const int *, int *, int *"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp",
            "functions": [
                "Decomposition:decompose:int *, int &, bool, const int &",
                "Decomposition:decomposeGEP:int &, int &, bool, const int &"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp",
            "functions": [
                "bool:expandUDivOrURem:int *, const int &, const int &",
                "bool:processBinOp:int *, int *",
                "bool:processICmp:int *, int *",
                "bool:processSDivOrSRem:int *, int *",
                "bool:processUDivOrURem:int *, int *",
                "bool:willNotOverflow:int *, int *"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp",
            "functions": [
                "void:RewriteForPHI:int *, const LSRUse &, const LSRFixup &, const Formula &, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Scalar/SROA.cpp",
            "functions": [
                "bool:deleteDeadInstructions:int &",
                "bool:splitAlloca:int &, AllocaSlices &"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp",
            "functions": [
                "bool:canTransformAccumulatorRecursion:int *, int *",
                "void:insertAccumulator:int *"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp",
            "functions": [
                "bool:DPValuesRemoveRedundantDbgInstrsUsingBackwardScan:int *",
                "bool:DPValuesRemoveRedundantDbgInstrsUsingForwardScan:int *"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Utils/Local.cpp",
            "functions": [
                "bool:rewriteDebugUsers:int &, int &, int &, int &, int, int"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Utils/LoopPeel.cpp",
            "functions": [
                "unsigned int:countToEliminateCompares:int &, unsigned int, int &"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp",
            "functions": [
                "bool:rotateLoop:int *, bool"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Utils/LowerSwitch.cpp",
            "functions": [
                "void:ProcessSwitchInst:int *, int &, int *, int *"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp",
            "functions": [
                "bool:widenLoopCompare:WidenIV::NarrowIVDefUse"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp",
            "functions": [
                "int:tryToCreateWidenRecipe:Instruction *, int, VFRange &, VPBasicBlock *, int &",
                "void:addCanonicalIVRecipes:VPlan &, Type *, bool, int",
                "void:adjustRecipesForReductions:VPBasicBlock *, int &, VPRecipeBuilder &, int",
                "void:buildVPlansWithVPRecipes:int, int",
                "void:fixVectorizedLoop:VPTransformState &, VPlan &",
                "void:setVectorizedCallDecision:int"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp",
            "functions": [
                "TreeEntry *:newTreeEntry:int, TreeEntry::EntryState, int, const InstructionsState &, const EdgeInfo &, int, int",
                "int:getVectorCallCosts:int *, int *, int *, int *"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Vectorize/VPlan.cpp",
            "functions": [
                "int:print:raw_ostream &",
                "void:assignSlots:const VPlan &",
                "void:dump:",
                "void:prepareToExecute:Value *, Value *, Value *, VPTransformState &"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Vectorize/VPlan.h",
            "functions": [
                "void:dropPoisonGeneratingFlags:",
                "void:setFlags:int *"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp",
            "functions": [
                "Value *:generateInstruction:VPTransformState &, unsigned int",
                "bool:mayHaveSideEffects:",
                "void:printFlags:raw_ostream &"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp",
            "functions": [
                "void:VPInstructionsToVPRecipes:int &, int, ScalarEvolution &, const TargetLibraryInfo &"
            ]
        },
        {
            "filename": "/llvm/lib/Transforms/Vectorize/VPlanValue.h",
            "functions": [
                "void:removeUser:VPUser &"
            ]
        },
        {
            "filename": "/llvm/tools/dsymutil/BinaryHolder.cpp",
            "functions": [
                "bool:isArchive:int"
            ]
        },
        {
            "filename": "/llvm/tools/dsymutil/DwarfLinkerForBinary.cpp",
            "functions": [
                "bool:linkImpl:",
                "int:remarksErrorHandler:const DebugMapObject &, DwarfLinkerForBinary &, int"
            ]
        },
        {
            "filename": "/llvm/tools/dsymutil/MachODebugMapParser.cpp",
            "functions": [
                "bool:shouldLinkArch:int &, int"
            ]
        },
        {
            "filename": "/llvm/tools/dsymutil/MachOUtils.cpp",
            "functions": [
                "std::string:getArchName:int"
            ]
        },
        {
            "filename": "/llvm/tools/dsymutil/SymbolMap.cpp",
            "functions": [
                "SymbolMapTranslator:Load:int, const DebugMap &",
                "int:operator():int"
            ]
        },
        {
            "filename": "/llvm/tools/llc/llc.cpp",
            "functions": [
                "int:GetOutputStream:const char *, int, const char *",
                "int:compileModule:char **, int &"
            ]
        },
        {
            "filename": "/llvm/tools/lli/lli.cpp",
            "functions": [
                "int:main:int, char **, char *const *"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-ar/llvm-ar.cpp",
            "functions": [
                "const char *:matchFlagWithArg:int, int &, int"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-as/llvm-as.cpp",
            "functions": [
                "void:WriteOutputFile:const int *, const int *"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-c-test/echo.cpp",
            "functions": [
                "int:CloneInstruction:int, int"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-config/llvm-config.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-cov/CodeCoverage.cpp",
            "functions": [
                "void:remapPathNames:const CoverageMapping &"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-cov/CoverageReport.cpp",
            "functions": [
                "void:render:const FileCoverageSummary &, int &"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-cov/SourceCoverageViewHTML.cpp",
            "functions": [
                "std::string:buildRelLinkToFile:int"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-cxxdump/llvm-cxxdump.cpp",
            "functions": [
                "void:dumpCXXData:const int *"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-diff/llvm-diff.cpp",
            "functions": [
                "void:diffGlobal:DifferenceEngine &, Module &, Module &, StringRef"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-dis/llvm-dis.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-dwarfutil/DebugInfoLinker.h",
            "functions": [
                "bool:isDebugSection:int"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-dwp/llvm-dwp.cpp",
            "functions": [
                "int:llvm_dwp_main:int, char **, const int &"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp",
            "functions": [
                "Error:createSubProcessAndRunBenchmark:int, int &",
                "void:prepareAndRunBenchmark:int, const BenchmarkKey &"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-exegesis/lib/Error.cpp",
            "functions": [
                "int:convertToErrorCode:",
                "void:log:int &"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-exegesis/lib/LatencyBenchmarkRunner.cpp",
            "functions": [
                "int:runMeasurements:const FunctionExecutor &"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp",
            "functions": [
                "void:HandleComment:int, int"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-exegesis/lib/X86/Target.cpp",
            "functions": [
                "const char *:isInvalidOpcode:const Instruction &"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-exegesis/llvm-exegesis.cpp",
            "functions": [
                "void:benchmarkMain:",
                "void:runBenchmarkConfigurations:const LLVMState &, int, int, const BenchmarkRunner &"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-jitlink/llvm-jitlink.cpp",
            "functions": [
                "Constructor:Session:int, int &",
                "int:addAliases:Session &, const int &",
                "int:addLibraries:Session &, const int &",
                "int:addObjects:Session &, const int &",
                "int:createJITDylibs:Session &, int &",
                "int:loadDylibs:Session &",
                "int:loadProcessSymbols:Session &",
                "int:sanitizeArguments:const int &, const char *"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp",
            "functions": [
                "int:processCommandLineLibraries:"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-ml/llvm-ml.cpp",
            "functions": [
                "int:GetTriple:int, int &"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-nm/llvm-nm.cpp",
            "functions": [
                "void:getXCOFFExports:int *, int &, int"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp",
            "functions": [
                "int:getOutputTargetInfoByTargetName:int"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-objdump/COFFDump.cpp",
            "functions": [
                "void:printCOFFSymbolTable:const COFFObjectFile &"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-objdump/MachODump.cpp",
            "functions": [
                "void:CreateSymbolAddressMap:MachOObjectFile *, SymbolAddressMap *",
                "void:getSectionsAndSymbols:MachOObjectFile *, int &, int &, int &, uint64_t &"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-objdump/SourcePrinter.cpp",
            "functions": [
                "void:printLines:int &, const int &, StringRef, LiveVariablePrinter &"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-objdump/llvm-objdump.cpp",
            "functions": [
                "void:disassembleObject:ObjectFile &, const ObjectFile &, DisassemblerTarget &, int &, SourcePrinter &, bool"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-profdata/llvm-profdata.cpp",
            "functions": [
                "void:parseInputFilenamesFile:int *, WeightedFileVector &"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-profgen/PerfReader.cpp",
            "functions": [
                "bool:extractCallstack:TraceStream &, int &",
                "bool:isLBRSample:int",
                "void:readUnsymbolizedProfile:int"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp",
            "functions": [
                "bool:parseLine:int"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-rc/ResourceScriptToken.cpp",
            "functions": [
                "bool:canStartBlockComment:",
                "bool:canStartLineComment:",
                "bool:willNowRead:int"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp",
            "functions": [
                "int:dumpProcedureData:const int &"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-readobj/COFFDumper.cpp",
            "functions": [
                "void:printCOFFResources:"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-readobj/ELFDumper.cpp",
            "functions": [
                "bool:isRelocationSec:",
                "int:getNoteTypeName:",
                "std::string:getDynamicEntry:uint64_t, uint64_t",
                "std::string:getGNUPtType:unsigned int, unsigned int",
                "void:forEachRelocationDo:const int &, bool, int, int",
                "void:parseDynamicTable:",
                "void:printDynamicRelocHeader:unsigned int, int, const DynRegionInfo &",
                "void:printNeededLibraries:",
                "void:printNotes:",
                "void:printRelocHeaderFields:",
                "void:printRelocations:"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-readobj/Win64EHDumper.cpp",
            "functions": [
                "void:printData:const Context &"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-readtapi/llvm-readtapi.cpp",
            "functions": [
                "bool:handleCompareAction:const Context &",
                "bool:handleMergeAction:const Context &",
                "bool:handleSingleFileAction:const Context &, const int, int",
                "bool:handleWriteAction:const Context &, int",
                "int:getInterfaceFile:const int, bool",
                "int:main:int, char **",
                "void:reportError:int, int"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-reduce/deltas/StripDebugInfo.cpp",
            "functions": [
                "void:stripDebugInfoImpl:Oracle &, int &"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-reduce/llvm-reduce.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-stress/llvm-stress.cpp",
            "functions": [
                "Constructor:Modifier:int *, int *, Random *"
            ]
        },
        {
            "filename": "/llvm/tools/llvm-undname/llvm-undname.cpp",
            "functions": [
                "int:main:int, char **"
            ]
        },
        {
            "filename": "/llvm/tools/obj2yaml/archive2yaml.cpp",
            "functions": [
                "int:dump:int"
            ]
        },
        {
            "filename": "/llvm/tools/obj2yaml/macho2yaml.cpp",
            "functions": [
                "int:dumpDebugSection:int, DWARFContext &, DWARFYAML::Data &",
                "int:extractSections:"
            ]
        },
        {
            "filename": "/llvm/tools/obj2yaml/wasm2yaml.cpp",
            "functions": [
                "int:dump:"
            ]
        },
        {
            "filename": "/llvm/tools/obj2yaml/xcoff2yaml.cpp",
            "functions": [
                "int:dumpSymbols:"
            ]
        },
        {
            "filename": "/llvm/tools/opt/opt.cpp",
            "functions": [
                "bool:shouldPinPassToLegacyPM:StringRef"
            ]
        },
        {
            "filename": "/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp",
            "functions": [
                "int:LLVMFuzzerTestOneInput:const int *, int"
            ]
        },
        {
            "filename": "/llvm/tools/yaml2obj/yaml2obj.cpp",
            "functions": [
                "int:preprocess:int, int"
            ]
        },
        {
            "filename": "/llvm/unittests/Analysis/VectorFunctionABITest.cpp",
            "functions": [
                "int:TEST:int, int",
                "int:TEST_F:VFABIParserTest, int"
            ]
        },
        {
            "filename": "/llvm/unittests/Analysis/VectorUtilsTest.cpp",
            "functions": [
                "void:buildShape:int, bool"
            ]
        },
        {
            "filename": "/llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp",
            "functions": [
                "int:TEST_P:OpenMPIRBuilderTestWithIVBits, int",
                "int:TEST_P:OpenMPIRBuilderTestWithParams, int"
            ]
        },
        {
            "filename": "/llvm/unittests/Object/ELFTypesTest.cpp",
            "functions": [
                "int:TEST:int, int"
            ]
        },
        {
            "filename": "/llvm/unittests/Support/CommandLineTest.cpp",
            "functions": [
                "int:TEST:int, int",
                "std::string:runTest:"
            ]
        },
        {
            "filename": "/llvm/unittests/Support/RegexTest.cpp",
            "functions": [
                "int:TEST_F:RegexTest, int"
            ]
        },
        {
            "filename": "/llvm/unittests/Support/SpecialCaseListTest.cpp",
            "functions": [
                "int:makeSpecialCaseList:int, int &, bool",
                "int:makeSpecialCaseListFile:int, bool"
            ]
        },
        {
            "filename": "/llvm/unittests/Target/RISCV/RISCVInstrInfoTest.cpp",
            "functions": [
                "int:TEST_P:RISCVInstrInfoTest, int"
            ]
        },
        {
            "filename": "/llvm/unittests/tools/llvm-exegesis/X86/SnippetFileTest.cpp",
            "functions": [
                "int:TEST_F:X86SnippetFileTest, int"
            ]
        },
        {
            "filename": "/llvm/utils/TableGen/DAGISelMatcherEmitter.cpp",
            "functions": [
                "int:getOpcodeString:Matcher::KindTy",
                "unsigned int:EmitMatcher:const Matcher *, const unsigned int, unsigned int, raw_ostream &"
            ]
        },
        {
            "filename": "/llvm/utils/TableGen/DAGISelMatcherOpt.cpp",
            "functions": [
                "void:ContractNodes:int &, const CodeGenDAGPatterns &"
            ]
        },
        {
            "filename": "/llvm/utils/TableGen/GlobalISelEmitter.cpp",
            "functions": [
                "int:importExplicitDefRenderers:int, RuleMatcher &, BuildMIAction &, const TreePatternNode *, const TreePatternNode *",
                "int:runOnPattern:const PatternToMatch &"
            ]
        },
        {
            "filename": "/llvm/utils/TableGen/GlobalISelMatchTable.cpp",
            "functions": [
                "void:emitDeclaration:raw_ostream &"
            ]
        },
        {
            "filename": "/llvm/utils/TableGen/RISCVTargetDefEmitter.cpp",
            "functions": [
                "void:EmitRISCVTargetDef:int &, int &"
            ]
        },
        {
            "filename": "/llvm/utils/TableGen/X86DisassemblerTables.cpp",
            "functions": [
                "Destructor:~DisassemblerTables:",
                "bool:inheritsFrom:int, int, bool, bool, bool, bool",
                "bool:outranks:int, int",
                "const char *:stringForContext:int",
                "const char *:stringForDecisionType:int",
                "const char *:stringForOperandEncoding:int",
                "const char *:stringForOperandType:int",
                "int:getDecisionType:ModRMDecision &",
                "void:emitContextDecision:raw_ostream &, raw_ostream &, unsigned int &, unsigned int &, unsigned int &, ContextDecision &, const char *",
                "void:setTableFields:ModRMDecision &, const ModRMFilter &, int, uint8_t",
                "void:setTableFields:int, int, uint8_t, const ModRMFilter &, int, bool, bool, bool, bool, unsigned int"
            ]
        },
        {
            "filename": "/llvm/utils/split-file/split-file.cpp",
            "functions": [
                "int:handle:int &, int"
            ]
        },
        {
            "filename": "/llvm/utils/yaml-bench/YAMLBench.cpp",
            "functions": [
                "std::string:prettyTag:int *"
            ]
        },
        {
            "filename": "/mlir/include/mlir/Dialect/SparseTensor/IR/Enums.h",
            "functions": [
                "uint64_t:encodeDim:uint64_t, uint64_t, uint64_t",
                "uint64_t:encodeLvl:uint64_t, uint64_t, uint64_t"
            ]
        },
        {
            "filename": "/mlir/include/mlir/Dialect/Transform/IR/TransformInterfaces.h",
            "functions": [
                "Constructor:RegionScope:TransformState &, int &",
                "int:mapBlockArguments:int, int"
            ]
        },
        {
            "filename": "/mlir/include/mlir/Target/LLVMIR/Dialect/All.h",
            "functions": [
                "void:registerAllFromLLVMIRTranslations:DialectRegistry &",
                "void:registerAllGPUToLLVMIRTranslations:DialectRegistry &",
                "void:registerAllToLLVMIRTranslations:DialectRegistry &"
            ]
        },
        {
            "filename": "/mlir/include/mlir/Transforms/FoldUtils.h",
            "functions": [
                "Constructor:OperationFolder:int *, int *"
            ]
        },
        {
            "filename": "/mlir/lib/Bindings/Python/ExecutionEngineModule.cpp",
            "functions": [
                "Constructor:PyExecutionEngine:PyExecutionEngine &&"
            ]
        },
        {
            "filename": "/mlir/lib/Bindings/Python/IRInterfaces.cpp",
            "functions": [
                "Constructor:PyShapedTypeComponents:PyShapedTypeComponents &&"
            ]
        },
        {
            "filename": "/mlir/lib/Bindings/Python/IRModule.h",
            "functions": [
                "Constructor:PyDialectRegistry:PyDialectRegistry &&",
                "Constructor:PyObjectRef<T>:PyObjectRef<T> &&"
            ]
        },
        {
            "filename": "/mlir/lib/Bindings/Python/Pass.cpp",
            "functions": [
                "Constructor:PyPassManager:PyPassManager &&"
            ]
        },
        {
            "filename": "/mlir/lib/CAPI/IR/IR.cpp",
            "functions": [
                "int:mlirRegionCreate:"
            ]
        },
        {
            "filename": "/mlir/lib/Conversion/ArithToLLVM/ArithToLLVM.cpp",
            "functions": [
                "int:matchAndRewrite:int, int, int &"
            ]
        },
        {
            "filename": "/mlir/lib/Conversion/ArmSMEToLLVM/ArmSMEToLLVM.cpp",
            "functions": [
                "void:populateArmSMEToLLVMConversionPatterns:int &, int &",
                "void:runOnOperation:"
            ]
        },
        {
            "filename": "/mlir/lib/Conversion/ArmSMEToSCF/ArmSMEToSCF.cpp",
            "functions": [
                "int:matchAndRewrite:int, int &",
                "void:populateArmSMEToSCFConversionPatterns:int &",
                "void:runOnOperation:"
            ]
        },
        {
            "filename": "/mlir/lib/Conversion/GPUCommon/GPUToLLVMConversion.cpp",
            "functions": [
                "int:genConstFloat32From:",
                "int:genConstInt32From:"
            ]
        },
        {
            "filename": "/mlir/lib/Conversion/GPUToNVVM/LowerGpuOpsToNVVMOps.cpp",
            "functions": [
                "void:runOnOperation:"
            ]
        },
        {
            "filename": "/mlir/lib/Conversion/GPUToROCDL/LowerGpuOpsToROCDLOps.cpp",
            "functions": [
                "void:populateGpuToROCDLConversionPatterns:int &, int &, int"
            ]
        },
        {
            "filename": "/mlir/lib/Conversion/MathToLibm/MathToLibm.cpp",
            "functions": [
                "void:populateMathToLibmConversionPatterns:int &"
            ]
        },
        {
            "filename": "/mlir/lib/Conversion/MemRefToSPIRV/MapMemRefStorageClassPass.cpp",
            "functions": [
                "bool:isLegalType:int"
            ]
        },
        {
            "filename": "/mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp",
            "functions": [
                "void:runOnOperation:"
            ]
        },
        {
            "filename": "/mlir/lib/Conversion/TosaToLinalg/TosaToLinalgNamed.cpp",
            "functions": [
                "int:inferDynamicDimsForConv:int, int, int, int, int, int, int, int, int, int &",
                "int:matchAndRewrite:TosaConvOp, typename TosaConvOp::Adaptor, int &",
                "int:matchAndRewrite:int, int, int &"
            ]
        },
        {
            "filename": "/mlir/lib/Conversion/VectorToArmSME/VectorToArmSME.cpp",
            "functions": [
                "int:matchAndRewrite:int, int &"
            ]
        },
        {
            "filename": "/mlir/lib/Conversion/VectorToGPU/VectorToGPU.cpp",
            "functions": [
                "int:matchAndRewrite:int, int &"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/ArmSME/Transforms/EnableArmStreaming.cpp",
            "functions": [
                "void:runOnOperation:"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp",
            "functions": [
                "bool:regionOperatesOnMemrefValues:int &"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/Complex/IR/ComplexOps.cpp",
            "functions": [
                "int:matchAndRewrite:int, int &"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/GPU/Transforms/SPIRVAttachTarget.cpp",
            "functions": [
                "void:runOnOperation:"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp",
            "functions": [
                "int:getAlias:int, int &",
                "void:printLLVMOpAttrs:int &, int *, int"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/LLVMIR/Transforms/TypeConsistency.cpp",
            "functions": [
                "int:gepToByteOffset:int &, int"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/Linalg/IR/LinalgOps.cpp",
            "functions": [
                "int:foldFillPackIntoFillOp:int &, int"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/Linalg/TransformOps/LinalgTransformOps.cpp",
            "functions": [
                "int:matchAndRewrite:int *, int &",
                "int:parseOptionalInterchange:int &, int &",
                "void:printOptionalInterchange:int &, int"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/MemRef/IR/MemRefOps.cpp",
            "functions": [
                "int:computeCollapsedLayoutMap:int, int, bool",
                "int:computeExpandedLayoutMap:int, int, int"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/Mesh/IR/MeshOps.cpp",
            "functions": [
                "int64_t:collectiveDeviceGroupSize:int, int"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/SCF/Transforms/LoopPipelining.cpp",
            "functions": [
                "bool:initializeLoopInfo:int, const int &",
                "int:analyzeCrossStageValues:",
                "int:createKernel:int, const int &, const int, unsigned int",
                "int:createKernelLoop:const int &, int &, int, unsigned int",
                "int:emitEpilogue:int &",
                "void:emitPrologue:int &"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/SparseTensor/IR/SparseTensorDialect.cpp",
            "functions": [
                "bool:isBlockSparsity:int"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/SparseTensor/Transforms/CodegenEnv.cpp",
            "functions": [
                "Value:getCustomRedId:",
                "void:startReduc:int, Value",
                "void:updateReduc:Value"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/SparseTensor/Transforms/LoopEmitter.cpp",
            "functions": [
                "bool:genSliceBegin:int &, Location, int, int",
                "int:genUnResolvedSliceTreeTraverse:int &, Location, int, int, int, int, int",
                "int:genWhileLoopBody:int &, Location, int, TensorLvlCond",
                "std::tuple<Value, Value, Value>:genSliceNextInduction:int &, Location, int, int",
                "void:enterTensorsAtDenseLvls:int &, Location, int, Value, int &",
                "void:exitForLoop:int &, Location, int",
                "void:exitWhileLoop:int &, Location, int",
                "void:genResolvedSliceBegin:int &, Location, int, int",
                "void:genUnResolvedSliceBegin:int &, Location, int, int",
                "void:initialize:int, int, bool, bool, unsigned int, int"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/SparseTensor/Transforms/SparseBufferRewriting.cpp",
            "functions": [
                "int:createQuickSort:int &, int, int, int, int, int, int"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/SparseTensor/Transforms/SparseGPUCodegen.cpp",
            "functions": [
                "void:genGPUCode:int &, int, int, int &, int &, int &"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/SparseTensor/Transforms/SparseReinterpretMap.cpp",
            "functions": [
                "int:matchAndRewrite:SourceOp, int &",
                "int:matchAndRewrite:linalg::GenericOp, int &"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/SparseTensor/Transforms/Sparsification.cpp",
            "functions": [
                "bool:findDepIdxSet:int &, int, int, int, int, bool, int",
                "bool:translateBitsToTidLvlPairs:CodegenEnv &, int, int, int &, int &",
                "int:genIf:CodegenEnv &, int &, int, int",
                "void:endIf:CodegenEnv &, int &, int, Value, Value, Value, Value",
                "void:genInsertionStore:CodegenEnv &, int &, int *, Value",
                "void:genInvariants:CodegenEnv &, int &, int, int, bool"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/SparseTensor/Transforms/SparsificationAndBufferizationPass.cpp",
            "functions": [
                "void:runOnOperation:"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/Tensor/IR/TensorOps.cpp",
            "functions": [
                "int:matchAndRewrite:InsertOpTy, int &"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/Tosa/Transforms/TosaInferShapes.cpp",
            "functions": [
                "void:propagateShapesInRegion:int &",
                "void:runOnOperation:"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/Vector/Transforms/VectorDistribute.cpp",
            "functions": [
                "int:tryExtractOp:int &, int, int"
            ]
        },
        {
            "filename": "/mlir/lib/Dialect/Vector/Transforms/VectorTransferOpTransforms.cpp",
            "functions": [
                "int:createMaskDropNonScalableUnitDims:int &, int, int"
            ]
        },
        {
            "filename": "/mlir/lib/IR/Verifier.cpp",
            "functions": [
                "int:verifyDominanceOfContainedRegions:int &, int &"
            ]
        },
        {
            "filename": "/mlir/lib/Target/LLVMIR/DebugImporter.cpp",
            "functions": [
                "int:translate:int *",
                "int:translateLoc:int *"
            ]
        },
        {
            "filename": "/mlir/lib/Target/LLVMIR/DebugTranslation.cpp",
            "functions": [
                "int *:translate:int",
                "int *:translateLoc:int, int *, int *"
            ]
        },
        {
            "filename": "/mlir/lib/Target/LLVMIR/Dialect/GPU/SelectObjectAttr.cpp",
            "functions": [
                "Constructor:LaunchKernel:int &, int &, int &",
                "int:createKernelLaunch:int, int",
                "int:getKernelLaunchFn:",
                "int:getModuleLoadFn:"
            ]
        },
        {
            "filename": "/mlir/lib/Transforms/Utils/GreedyPatternRewriteDriver.cpp",
            "functions": [
                "void:notifyOperationReplaced:int *, int"
            ]
        },
        {
            "filename": "/mlir/test/lib/Dialect/SCF/TestSCFUtils.cpp",
            "functions": [
                "void:runOnOperation:"
            ]
        },
        {
            "filename": "/mlir/test/lib/Dialect/Vector/TestVectorTransforms.cpp",
            "functions": [
                "void:runOnOperation:"
            ]
        },
        {
            "filename": "/openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp",
            "functions": [
                "int:callGlobalCtorDtorCommon:int &, int &, const char *"
            ]
        },
        {
            "filename": "/openmp/libomptarget/plugins-nextgen/common/src/PluginInterface.cpp",
            "functions": [
                "int64_t:__tgt_rtl_init_requires:int64_t"
            ]
        },
        {
            "filename": "/openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp",
            "functions": [
                "int:callGlobalCtorDtorCommon:int &, int &, bool"
            ]
        },
        {
            "filename": "/openmp/libomptarget/src/OpenMP/Mapping.cpp",
            "functions": [
                "void:dumpTargetPointerMappings:const int *, int &"
            ]
        },
        {
            "filename": "/openmp/libomptarget/src/interface.cpp",
            "functions": [
                "int:__tgt_activate_record_replay:int64_t, uint64_t, void *, bool, bool, uint64_t &",
                "int:__tgt_init_all_rtls:",
                "int:__tgt_print_device_info:int64_t",
                "int:__tgt_register_lib:int *",
                "int:__tgt_register_requires:int64_t",
                "int:__tgt_set_info_flag:uint32_t",
                "int:__tgt_target_kernel_replay:int *, int64_t, void *, void *, int64_t, void **, int *, int32_t, int32_t, int32_t, uint64_t",
                "int:__tgt_target_nowait_query:void **",
                "int:__tgt_unregister_lib:int *",
                "int:targetKernel:",
                "void:targetData:"
            ]
        },
        {
            "filename": "/openmp/libomptarget/src/omptarget.cpp",
            "functions": [
                "bool:checkDeviceAndCtors:int64_t &, int *",
                "int:initLibrary:int &",
                "int:postProcessingTargetDataEnd:int *, int &",
                "int:processDataAfter:int *, int64_t, void *, int32_t, void **, void **, int64_t *, int64_t *, int *, void **, PrivateArgumentManagerTy &, int &",
                "int:processDataBefore:int *, int64_t, void *, int32_t, void **, void **, int64_t *, int64_t *, int *, void **, int &, int &, PrivateArgumentManagerTy &, int &",
                "int:targetDataBegin:int *, int &, int32_t, void **, void **, int64_t *, int64_t *, int *, void **, int &, bool",
                "int:targetDataContiguous:int *, int &, void *, void *, int64_t, int64_t, int &",
                "int:targetDataEnd:int *, int &, int32_t, void **, void **, int64_t *, int64_t *, int *, void **, int &, bool",
                "void *:targetAllocExplicit:int, int, int, const char *",
                "void *:targetLockExplicit:void *, int, int, const char *",
                "void:handleTargetOutcome:bool, int *",
                "void:targetFreeExplicit:void *, int, int, const char *",
                "void:targetUnlockExplicit:void *, int, const char *"
            ]
        }
    ]
}